
servo_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08008a94  08008a94  00009a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e0c  08008e0c  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e0c  08008e0c  00009e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e14  08008e14  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e14  08008e14  00009e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e18  08008e18  00009e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008e1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044a8  2000006c  08008e88  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004514  08008e88  0000a514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001659a  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003442  00000000  00000000  00020636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00023a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f00  00000000  00000000  00024dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019467  00000000  00000000  00025cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157e0  00000000  00000000  0003f137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009979b  00000000  00000000  00054917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee0b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  000ee0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f3bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a7c 	.word	0x08008a7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008a7c 	.word	0x08008a7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000088 	.word	0x20000088
 80005ec:	20000128 	.word	0x20000128

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b0b0      	sub	sp, #192	@ 0xc0
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 f92d 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f941 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fab1 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fa79 	bl	8000af8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000606:	f000 fa4d 	bl	8000aa4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800060a:	f000 f9a3 	bl	8000954 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800060e:	f000 fa1f 	bl	8000a50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) //인터럽트 시작
 8000612:	4888      	ldr	r0, [pc, #544]	@ (8000834 <main+0x244>)
 8000614:	f002 fd06 	bl	8003024 <HAL_TIM_Base_Start_IT>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <main+0x32>
  	Error_Handler();
 800061e:	f000 fdd1 	bl	80011c4 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4883      	ldr	r0, [pc, #524]	@ (8000834 <main+0x244>)
 8000626:	f002 fdaf 	bl	8003188 <HAL_TIM_PWM_Start>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x44>
	Error_Handler();
 8000630:	f000 fdc8 	bl	80011c4 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 8000634:	2104      	movs	r1, #4
 8000636:	487f      	ldr	r0, [pc, #508]	@ (8000834 <main+0x244>)
 8000638:	f002 fda6 	bl	8003188 <HAL_TIM_PWM_Start>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <main+0x56>
	Error_Handler();
 8000642:	f000 fdbf 	bl	80011c4 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK)
 8000646:	2108      	movs	r1, #8
 8000648:	487a      	ldr	r0, [pc, #488]	@ (8000834 <main+0x244>)
 800064a:	f002 fd9d 	bl	8003188 <HAL_TIM_PWM_Start>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <main+0x68>
	Error_Handler();
 8000654:	f000 fdb6 	bl	80011c4 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4) != HAL_OK)
 8000658:	210c      	movs	r1, #12
 800065a:	4876      	ldr	r0, [pc, #472]	@ (8000834 <main+0x244>)
 800065c:	f002 fd94 	bl	8003188 <HAL_TIM_PWM_Start>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <main+0x7a>
	Error_Handler();
 8000666:	f000 fdad 	bl	80011c4 <Error_Handler>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf, RX_BUF_LEN);//uart활성화
 800066a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800066e:	4972      	ldr	r1, [pc, #456]	@ (8000838 <main+0x248>)
 8000670:	4872      	ldr	r0, [pc, #456]	@ (800083c <main+0x24c>)
 8000672:	f003 fba8 	bl	8003dc6 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of uartRxSem */
  osSemaphoreDef(uartRxSem);
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uartRxSemHandle = osSemaphoreCreate(osSemaphore(uartRxSem), 1);
 8000682:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fd8c 	bl	80051a6 <osSemaphoreCreate>
 800068e:	4603      	mov	r3, r0
 8000690:	4a6b      	ldr	r2, [pc, #428]	@ (8000840 <main+0x250>)
 8000692:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo1StartSem */
  osSemaphoreDef(servo1StartSem);
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  servo1StartSemHandle = osSemaphoreCreate(osSemaphore(servo1StartSem), 1);
 80006a0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80006a4:	2101      	movs	r1, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fd7d 	bl	80051a6 <osSemaphoreCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a65      	ldr	r2, [pc, #404]	@ (8000844 <main+0x254>)
 80006b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo2StartSem */
  osSemaphoreDef(servo2StartSem);
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  servo2StartSemHandle = osSemaphoreCreate(osSemaphore(servo2StartSem), 1);
 80006be:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fd6e 	bl	80051a6 <osSemaphoreCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a5e      	ldr	r2, [pc, #376]	@ (8000848 <main+0x258>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo3StartSem */
  osSemaphoreDef(servo3StartSem);
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  servo3StartSemHandle = osSemaphoreCreate(osSemaphore(servo3StartSem), 1);
 80006dc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80006e0:	2101      	movs	r1, #1
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fd5f 	bl	80051a6 <osSemaphoreCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a58      	ldr	r2, [pc, #352]	@ (800084c <main+0x25c>)
 80006ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo4StartSem */
  osSemaphoreDef(servo4StartSem);
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  servo4StartSemHandle = osSemaphoreCreate(osSemaphore(servo4StartSem), 1);
 80006fa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80006fe:	2101      	movs	r1, #1
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fd50 	bl	80051a6 <osSemaphoreCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	4a51      	ldr	r2, [pc, #324]	@ (8000850 <main+0x260>)
 800070a:	6013      	str	r3, [r2, #0]

  /* definition and creation of sequenceDoneSem */
  osSemaphoreDef(sequenceDoneSem);
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  sequenceDoneSemHandle = osSemaphoreCreate(osSemaphore(sequenceDoneSem), 1);
 8000718:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fd41 	bl	80051a6 <osSemaphoreCreate>
 8000724:	4603      	mov	r3, r0
 8000726:	4a4b      	ldr	r2, [pc, #300]	@ (8000854 <main+0x264>)
 8000728:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800072a:	4b4b      	ldr	r3, [pc, #300]	@ (8000858 <main+0x268>)
 800072c:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000730:	461d      	mov	r5, r3
 8000732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000736:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800073e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f004 fcce 	bl	80050e6 <osThreadCreate>
 800074a:	4603      	mov	r3, r0
 800074c:	4a43      	ldr	r2, [pc, #268]	@ (800085c <main+0x26c>)
 800074e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000750:	4b43      	ldr	r3, [pc, #268]	@ (8000860 <main+0x270>)
 8000752:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000756:	461d      	mov	r5, r3
 8000758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000764:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f004 fcbb 	bl	80050e6 <osThreadCreate>
 8000770:	4603      	mov	r3, r0
 8000772:	4a3c      	ldr	r2, [pc, #240]	@ (8000864 <main+0x274>)
 8000774:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000776:	4b3c      	ldr	r3, [pc, #240]	@ (8000868 <main+0x278>)
 8000778:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800077c:	461d      	mov	r5, r3
 800077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000782:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800078a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f004 fca8 	bl	80050e6 <osThreadCreate>
 8000796:	4603      	mov	r3, r0
 8000798:	4a34      	ldr	r2, [pc, #208]	@ (800086c <main+0x27c>)
 800079a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 800079c:	4b34      	ldr	r3, [pc, #208]	@ (8000870 <main+0x280>)
 800079e:	f107 0420 	add.w	r4, r7, #32
 80007a2:	461d      	mov	r5, r3
 80007a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fc95 	bl	80050e6 <osThreadCreate>
 80007bc:	4603      	mov	r3, r0
 80007be:	4a2d      	ldr	r2, [pc, #180]	@ (8000874 <main+0x284>)
 80007c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityIdle, 0, 128);
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <main+0x288>)
 80007c4:	1d3c      	adds	r4, r7, #4
 80007c6:	461d      	mov	r5, r3
 80007c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fc84 	bl	80050e6 <osThreadCreate>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <main+0x28c>)
 80007e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osSemaphoreWait(uartRxSemHandle, 0);
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <main+0x250>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fd0e 	bl	800520c <osSemaphoreWait>
  osSemaphoreWait(servo1StartSemHandle, 0);
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <main+0x254>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fd08 	bl	800520c <osSemaphoreWait>
  osSemaphoreWait(servo2StartSemHandle, 0);
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <main+0x258>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fd02 	bl	800520c <osSemaphoreWait>
  osSemaphoreWait(servo3StartSemHandle, 0);
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <main+0x25c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 fcfc 	bl	800520c <osSemaphoreWait>
  osSemaphoreWait(servo4StartSemHandle, 0);
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <main+0x260>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fcf6 	bl	800520c <osSemaphoreWait>
  osSemaphoreWait(sequenceDoneSemHandle, 0);
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <main+0x264>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fcf0 	bl	800520c <osSemaphoreWait>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800082c:	f004 fc54 	bl	80050d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <main+0x240>
 8000834:	20000328 	.word	0x20000328
 8000838:	200004ec 	.word	0x200004ec
 800083c:	20000370 	.word	0x20000370
 8000840:	200004d4 	.word	0x200004d4
 8000844:	200004d8 	.word	0x200004d8
 8000848:	200004dc 	.word	0x200004dc
 800084c:	200004e0 	.word	0x200004e0
 8000850:	200004e4 	.word	0x200004e4
 8000854:	200004e8 	.word	0x200004e8
 8000858:	08008aa0 	.word	0x08008aa0
 800085c:	200004c0 	.word	0x200004c0
 8000860:	08008ac8 	.word	0x08008ac8
 8000864:	200004c4 	.word	0x200004c4
 8000868:	08008af0 	.word	0x08008af0
 800086c:	200004c8 	.word	0x200004c8
 8000870:	08008b18 	.word	0x08008b18
 8000874:	200004cc 	.word	0x200004cc
 8000878:	08008b40 	.word	0x08008b40
 800087c:	200004d0 	.word	0x200004d0

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	@ 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f007 f991 	bl	8007bb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b28      	ldr	r3, [pc, #160]	@ (800094c <SystemClock_Config+0xcc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	4a27      	ldr	r2, [pc, #156]	@ (800094c <SystemClock_Config+0xcc>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b4:	4b25      	ldr	r3, [pc, #148]	@ (800094c <SystemClock_Config+0xcc>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a21      	ldr	r2, [pc, #132]	@ (8000950 <SystemClock_Config+0xd0>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <SystemClock_Config+0xd0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2310      	movs	r3, #16
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008f0:	2310      	movs	r3, #16
 80008f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fe:	2304      	movs	r3, #4
 8000900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fe68 	bl	80025dc <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000912:	f000 fc57 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2102      	movs	r1, #2
 8000932:	4618      	mov	r0, r3
 8000934:	f002 f8ca 	bl	8002acc <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800093e:	f000 fc41 	bl	80011c4 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3750      	adds	r7, #80	@ 0x50
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	@ 0x28
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000976:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 8000978:	4a34      	ldr	r2, [pc, #208]	@ (8000a4c <MX_TIM4_Init+0xf8>)
 800097a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 800097c:	4b32      	ldr	r3, [pc, #200]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 800097e:	2254      	movs	r2, #84	@ 0x54
 8000980:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8000988:	4b2f      	ldr	r3, [pc, #188]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 800098a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800098e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b2d      	ldr	r3, [pc, #180]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800099c:	482a      	ldr	r0, [pc, #168]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 800099e:	f002 fba3 	bl	80030e8 <HAL_TIM_PWM_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009a8:	f000 fc0c 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4619      	mov	r1, r3
 80009ba:	4823      	ldr	r0, [pc, #140]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 80009bc:	f003 f8a6 	bl	8003b0c <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80009c6:	f000 fbfd 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ca:	2360      	movs	r3, #96	@ 0x60
 80009cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 80009ce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4819      	ldr	r0, [pc, #100]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 80009e4:	f002 fd70 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009ee:	f000 fbe9 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2204      	movs	r2, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4813      	ldr	r0, [pc, #76]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 80009fa:	f002 fd65 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a04:	f000 fbde 	bl	80011c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480e      	ldr	r0, [pc, #56]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 8000a10:	f002 fd5a 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000a1a:	f000 fbd3 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	220c      	movs	r2, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 8000a2a:	f002 fd4d 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8000a34:	f000 fbc6 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <MX_TIM4_Init+0xf4>)
 8000a3a:	f000 fc1d 	bl	8001278 <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	@ 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000328 	.word	0x20000328
 8000a4c:	40000800 	.word	0x40000800

08000a50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <MX_USART1_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a88:	f003 f8c2 	bl	8003c10 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 fb97 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000370 	.word	0x20000370
 8000aa0:	40011000 	.word	0x40011000

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <MX_USART2_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000adc:	f003 f898 	bl	8003c10 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 fb6d 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200003b8 	.word	0x200003b8
 8000af4:	40004400 	.word	0x40004400

08000af8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_DMA_Init+0x68>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a16      	ldr	r2, [pc, #88]	@ (8000b60 <MX_DMA_Init+0x68>)
 8000b08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_DMA_Init+0x68>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_DMA_Init+0x68>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a0f      	ldr	r2, [pc, #60]	@ (8000b60 <MX_DMA_Init+0x68>)
 8000b24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_DMA_Init+0x68>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
 8000b3a:	2011      	movs	r0, #17
 8000b3c:	f000 ff84 	bl	8001a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b40:	2011      	movs	r0, #17
 8000b42:	f000 ff9d 	bl	8001a80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2105      	movs	r1, #5
 8000b4a:	203a      	movs	r0, #58	@ 0x3a
 8000b4c:	f000 ff7c 	bl	8001a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b50:	203a      	movs	r0, #58	@ 0x3a
 8000b52:	f000 ff95 	bl	8001a80 <HAL_NVIC_EnableIRQ>

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b37      	ldr	r3, [pc, #220]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a36      	ldr	r2, [pc, #216]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b34      	ldr	r3, [pc, #208]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b30      	ldr	r3, [pc, #192]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a28      	ldr	r2, [pc, #160]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a21      	ldr	r2, [pc, #132]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_GPIO_Init+0xf8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	210f      	movs	r1, #15
 8000bee:	481c      	ldr	r0, [pc, #112]	@ (8000c60 <MX_GPIO_Init+0xfc>)
 8000bf0:	f001 fcda 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	481a      	ldr	r0, [pc, #104]	@ (8000c64 <MX_GPIO_Init+0x100>)
 8000bfa:	f001 fcd5 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4812      	ldr	r0, [pc, #72]	@ (8000c60 <MX_GPIO_Init+0xfc>)
 8000c16:	f001 fb43 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <MX_GPIO_Init+0xfc>)
 8000c32:	f001 fb35 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c36:	2320      	movs	r3, #32
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_GPIO_Init+0x100>)
 8000c4e:	f001 fb27 	bl	80022a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	@ 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) //uart인터럽트
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
  if(huart->Instance==USART1){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca8 <HAL_UARTEx_RxEventCallback+0x40>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d110      	bne.n	8000ca0 <HAL_UARTEx_RxEventCallback+0x38>
    // rx_buf[0..Size-1] 가 이번 프레임
    // Circular 유지하려면: __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT); // 선택
	  //uartFlag = 1;
	  HAL_UART_Transmit(&huart2, rx_buf, Size, 100);
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	2364      	movs	r3, #100	@ 0x64
 8000c82:	490a      	ldr	r1, [pc, #40]	@ (8000cac <HAL_UARTEx_RxEventCallback+0x44>)
 8000c84:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <HAL_UARTEx_RxEventCallback+0x48>)
 8000c86:	f003 f813 	bl	8003cb0 <HAL_UART_Transmit>
	  osSemaphoreRelease(uartRxSemHandle);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fb0a 	bl	80052a8 <osSemaphoreRelease>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf, RX_BUF_LEN);
 8000c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c98:	4904      	ldr	r1, [pc, #16]	@ (8000cac <HAL_UARTEx_RxEventCallback+0x44>)
 8000c9a:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <HAL_UARTEx_RxEventCallback+0x50>)
 8000c9c:	f003 f893 	bl	8003dc6 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	200004ec 	.word	0x200004ec
 8000cb0:	200003b8 	.word	0x200003b8
 8000cb4:	200004d4 	.word	0x200004d4
 8000cb8:	20000370 	.word	0x20000370

08000cbc <servo1>:

void servo1(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	480f      	ldr	r0, [pc, #60]	@ (8000d04 <servo1+0x48>)
 8000cc6:	f001 fc6f 	bl	80025a8 <HAL_GPIO_WritePin>
	osDelay(5000);
 8000cca:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cce:	f004 fa56 	bl	800517e <osDelay>
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 1500); //-45도
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <servo1+0x4c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000cda:	635a      	str	r2, [r3, #52]	@ 0x34
	osDelay(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ce0:	f004 fa4d 	bl	800517e <osDelay>
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 2000); //45도
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <servo1+0x4c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cec:	635a      	str	r2, [r3, #52]	@ 0x34
	osDelay(5000);
 8000cee:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cf2:	f004 fa44 	bl	800517e <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <servo1+0x48>)
 8000cfc:	f001 fc54 	bl	80025a8 <HAL_GPIO_WritePin>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40020800 	.word	0x40020800
 8000d08:	20000328 	.word	0x20000328

08000d0c <servo2>:
void servo2(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2102      	movs	r1, #2
 8000d14:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <servo2+0x48>)
 8000d16:	f001 fc47 	bl	80025a8 <HAL_GPIO_WritePin>
	osDelay(5000);
 8000d1a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d1e:	f004 fa2e 	bl	800517e <osDelay>
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 1500); //-45도
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <servo2+0x4c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000d2a:	639a      	str	r2, [r3, #56]	@ 0x38
	osDelay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d30:	f004 fa25 	bl	800517e <osDelay>

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 2000); //45도
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <servo2+0x4c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d3c:	639a      	str	r2, [r3, #56]	@ 0x38
	osDelay(5000);
 8000d3e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d42:	f004 fa1c 	bl	800517e <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <servo2+0x48>)
 8000d4c:	f001 fc2c 	bl	80025a8 <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020800 	.word	0x40020800
 8000d58:	20000328 	.word	0x20000328

08000d5c <servo3>:
void servo3(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2104      	movs	r1, #4
 8000d64:	480f      	ldr	r0, [pc, #60]	@ (8000da4 <servo3+0x48>)
 8000d66:	f001 fc1f 	bl	80025a8 <HAL_GPIO_WritePin>
	osDelay(5000);
 8000d6a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d6e:	f004 fa06 	bl	800517e <osDelay>
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 1500); //-45도
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <servo3+0x4c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	osDelay(1000);
 8000d7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d80:	f004 f9fd 	bl	800517e <osDelay>

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 2000); //45도
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <servo3+0x4c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
	osDelay(5000);
 8000d8e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d92:	f004 f9f4 	bl	800517e <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2104      	movs	r1, #4
 8000d9a:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <servo3+0x48>)
 8000d9c:	f001 fc04 	bl	80025a8 <HAL_GPIO_WritePin>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40020800 	.word	0x40020800
 8000da8:	20000328 	.word	0x20000328

08000dac <servo4>:
void servo4(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2108      	movs	r1, #8
 8000db4:	480f      	ldr	r0, [pc, #60]	@ (8000df4 <servo4+0x48>)
 8000db6:	f001 fbf7 	bl	80025a8 <HAL_GPIO_WritePin>
	osDelay(5000);
 8000dba:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000dbe:	f004 f9de 	bl	800517e <osDelay>
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 1500); //-45도
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <servo4+0x4c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000dca:	641a      	str	r2, [r3, #64]	@ 0x40
	osDelay(1000);
 8000dcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dd0:	f004 f9d5 	bl	800517e <osDelay>

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 2000); //45도
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <servo4+0x4c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ddc:	641a      	str	r2, [r3, #64]	@ 0x40
	osDelay(5000);
 8000dde:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000de2:	f004 f9cc 	bl	800517e <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <servo4+0x48>)
 8000dec:	f001 fbdc 	bl	80025a8 <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40020800 	.word	0x40020800
 8000df8:	20000328 	.word	0x20000328

08000dfc <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e04:	1d39      	adds	r1, r7, #4
 8000e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <__io_putchar+0x20>)
 8000e0e:	f002 ff4f 	bl	8003cb0 <HAL_UART_Transmit>

  return ch;
 8000e12:	687b      	ldr	r3, [r7, #4]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200003b8 	.word	0x200003b8

08000e20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(uartRxSemHandle, osWaitForever);
 8000e28:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <StartDefaultTask+0xcc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 f9eb 	bl	800520c <osSemaphoreWait>

	int i=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
	char * pToken;
	char * pArray[ARR_CNT]={0};
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
	//int arrbuff[4] = {0};
	pToken = strtok(rx_buf,"@");
 8000e4a:	4929      	ldr	r1, [pc, #164]	@ (8000ef0 <StartDefaultTask+0xd0>)
 8000e4c:	4829      	ldr	r0, [pc, #164]	@ (8000ef4 <StartDefaultTask+0xd4>)
 8000e4e:	f006 febb 	bl	8007bc8 <strtok>
 8000e52:	6238      	str	r0, [r7, #32]
	while(pToken != NULL)
 8000e54:	e011      	b.n	8000e7a <StartDefaultTask+0x5a>
	{
		pArray[i] =  pToken;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	3328      	adds	r3, #40	@ 0x28
 8000e5c:	443b      	add	r3, r7
 8000e5e:	6a3a      	ldr	r2, [r7, #32]
 8000e60:	f843 2c20 	str.w	r2, [r3, #-32]
		if(++i >= ARR_CNT)
 8000e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e66:	3301      	adds	r3, #1
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	dc08      	bgt.n	8000e82 <StartDefaultTask+0x62>
		  break;
		pToken = strtok(NULL,"@");
 8000e70:	491f      	ldr	r1, [pc, #124]	@ (8000ef0 <StartDefaultTask+0xd0>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f006 fea8 	bl	8007bc8 <strtok>
 8000e78:	6238      	str	r0, [r7, #32]
	while(pToken != NULL)
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1ea      	bne.n	8000e56 <StartDefaultTask+0x36>
 8000e80:	e000      	b.n	8000e84 <StartDefaultTask+0x64>
		  break;
 8000e82:	bf00      	nop
	}
	for(int j =0; j<sizeof(arrbuff)/sizeof(int); j++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	e019      	b.n	8000ebe <StartDefaultTask+0x9e>
	{
		arrbuff[j]= atoi(pArray[j]);
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	3328      	adds	r3, #40	@ 0x28
 8000e90:	443b      	add	r3, r7
 8000e92:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f006 fcee 	bl	8007878 <atoi>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4916      	ldr	r1, [pc, #88]	@ (8000ef8 <StartDefaultTask+0xd8>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("arrbuff[%d]-> %d\r\n",j,arrbuff[j]);
 8000ea6:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <StartDefaultTask+0xd8>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	69f9      	ldr	r1, [r7, #28]
 8000eb2:	4812      	ldr	r0, [pc, #72]	@ (8000efc <StartDefaultTask+0xdc>)
 8000eb4:	f006 fe2a 	bl	8007b0c <iprintf>
	for(int j =0; j<sizeof(arrbuff)/sizeof(int); j++)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d9e2      	bls.n	8000e8a <StartDefaultTask+0x6a>
	}
	memset(rx_buf, 0, RX_BUF_LEN);
 8000ec4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <StartDefaultTask+0xd4>)
 8000ecc:	f006 fe73 	bl	8007bb6 <memset>

	osSemaphoreRelease(servo1StartSemHandle);
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <StartDefaultTask+0xe0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 f9e7 	bl	80052a8 <osSemaphoreRelease>
	osSemaphoreWait(sequenceDoneSemHandle, osWaitForever);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <StartDefaultTask+0xe4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 f992 	bl	800520c <osSemaphoreWait>
  {
 8000ee8:	e79e      	b.n	8000e28 <StartDefaultTask+0x8>
 8000eea:	bf00      	nop
 8000eec:	200004d4 	.word	0x200004d4
 8000ef0:	08008b5c 	.word	0x08008b5c
 8000ef4:	200004ec 	.word	0x200004ec
 8000ef8:	200005ec 	.word	0x200005ec
 8000efc:	08008b60 	.word	0x08008b60
 8000f00:	200004d8 	.word	0x200004d8
 8000f04:	200004e8 	.word	0x200004e8

08000f08 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(servo1StartSemHandle, osWaitForever);
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <StartTask02+0x78>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 f977 	bl	800520c <osSemaphoreWait>
	if (arrbuff[0])
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <StartTask02+0x7c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d012      	beq.n	8000f4c <StartTask02+0x44>
	{
		strcpy(tx_buffer, "Moisture@Yes@\r\n");
 8000f26:	4a18      	ldr	r2, [pc, #96]	@ (8000f88 <StartTask02+0x80>)
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <StartTask02+0x84>)
 8000f2a:	4614      	mov	r4, r2
 8000f2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 8000f32:	4815      	ldr	r0, [pc, #84]	@ (8000f88 <StartTask02+0x80>)
 8000f34:	f7ff f954 	bl	80001e0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	2364      	movs	r3, #100	@ 0x64
 8000f3e:	4912      	ldr	r1, [pc, #72]	@ (8000f88 <StartTask02+0x80>)
 8000f40:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <StartTask02+0x88>)
 8000f42:	f002 feb5 	bl	8003cb0 <HAL_UART_Transmit>
		servo1();
 8000f46:	f7ff feb9 	bl	8000cbc <servo1>
 8000f4a:	e012      	b.n	8000f72 <StartTask02+0x6a>
	}
	else
	{
		strcpy(tx_buffer, "Moisture@No@\r\n");
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f88 <StartTask02+0x80>)
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <StartTask02+0x8c>)
 8000f50:	4614      	mov	r4, r2
 8000f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f54:	c407      	stmia	r4!, {r0, r1, r2}
 8000f56:	8023      	strh	r3, [r4, #0]
 8000f58:	3402      	adds	r4, #2
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 8000f5e:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <StartTask02+0x80>)
 8000f60:	f7ff f93e 	bl	80001e0 <strlen>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	2364      	movs	r3, #100	@ 0x64
 8000f6a:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <StartTask02+0x80>)
 8000f6c:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <StartTask02+0x88>)
 8000f6e:	f002 fe9f 	bl	8003cb0 <HAL_UART_Transmit>
	}
	osSemaphoreRelease(servo2StartSemHandle);
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <StartTask02+0x90>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 f996 	bl	80052a8 <osSemaphoreRelease>
	osSemaphoreWait(servo1StartSemHandle, osWaitForever);
 8000f7c:	e7c8      	b.n	8000f10 <StartTask02+0x8>
 8000f7e:	bf00      	nop
 8000f80:	200004d8 	.word	0x200004d8
 8000f84:	200005ec 	.word	0x200005ec
 8000f88:	200005fc 	.word	0x200005fc
 8000f8c:	08008b74 	.word	0x08008b74
 8000f90:	20000370 	.word	0x20000370
 8000f94:	08008b84 	.word	0x08008b84
 8000f98:	200004dc 	.word	0x200004dc

08000f9c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(servo2StartSemHandle, osWaitForever);
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <StartTask03+0x78>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 f92d 	bl	800520c <osSemaphoreWait>
	if (arrbuff[1])
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <StartTask03+0x7c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d014      	beq.n	8000fe4 <StartTask03+0x48>
	{
		strcpy(tx_buffer, "Elasticity@Yes@\r\n");
 8000fba:	4a18      	ldr	r2, [pc, #96]	@ (800101c <StartTask03+0x80>)
 8000fbc:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <StartTask03+0x84>)
 8000fbe:	4614      	mov	r4, r2
 8000fc0:	461d      	mov	r5, r3
 8000fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 8000fca:	4814      	ldr	r0, [pc, #80]	@ (800101c <StartTask03+0x80>)
 8000fcc:	f7ff f908 	bl	80001e0 <strlen>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	2364      	movs	r3, #100	@ 0x64
 8000fd6:	4911      	ldr	r1, [pc, #68]	@ (800101c <StartTask03+0x80>)
 8000fd8:	4812      	ldr	r0, [pc, #72]	@ (8001024 <StartTask03+0x88>)
 8000fda:	f002 fe69 	bl	8003cb0 <HAL_UART_Transmit>
		servo2();
 8000fde:	f7ff fe95 	bl	8000d0c <servo2>
 8000fe2:	e011      	b.n	8001008 <StartTask03+0x6c>
	}
	else
	{
		strcpy(tx_buffer, "Elasticity@No@\r\n");
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <StartTask03+0x80>)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <StartTask03+0x8c>)
 8000fe8:	4614      	mov	r4, r2
 8000fea:	461d      	mov	r5, r3
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 8000ff4:	4809      	ldr	r0, [pc, #36]	@ (800101c <StartTask03+0x80>)
 8000ff6:	f7ff f8f3 	bl	80001e0 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	2364      	movs	r3, #100	@ 0x64
 8001000:	4906      	ldr	r1, [pc, #24]	@ (800101c <StartTask03+0x80>)
 8001002:	4808      	ldr	r0, [pc, #32]	@ (8001024 <StartTask03+0x88>)
 8001004:	f002 fe54 	bl	8003cb0 <HAL_UART_Transmit>
	}
	osSemaphoreRelease(servo3StartSemHandle);
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <StartTask03+0x90>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f004 f94b 	bl	80052a8 <osSemaphoreRelease>
	osSemaphoreWait(servo2StartSemHandle, osWaitForever);
 8001012:	e7c7      	b.n	8000fa4 <StartTask03+0x8>
 8001014:	200004dc 	.word	0x200004dc
 8001018:	200005ec 	.word	0x200005ec
 800101c:	200005fc 	.word	0x200005fc
 8001020:	08008b94 	.word	0x08008b94
 8001024:	20000370 	.word	0x20000370
 8001028:	08008ba8 	.word	0x08008ba8
 800102c:	200004e0 	.word	0x200004e0

08001030 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(servo3StartSemHandle, osWaitForever);
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <StartTask04+0x74>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	4618      	mov	r0, r3
 8001042:	f004 f8e3 	bl	800520c <osSemaphoreWait>
	if (arrbuff[2])
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <StartTask04+0x78>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d014      	beq.n	8001078 <StartTask04+0x48>
	{
		strcpy(tx_buffer, "Whitening@Yes@\r\n");
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <StartTask04+0x7c>)
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <StartTask04+0x80>)
 8001052:	4614      	mov	r4, r2
 8001054:	461d      	mov	r5, r3
 8001056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105a:	682b      	ldr	r3, [r5, #0]
 800105c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 800105e:	4813      	ldr	r0, [pc, #76]	@ (80010ac <StartTask04+0x7c>)
 8001060:	f7ff f8be 	bl	80001e0 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	2364      	movs	r3, #100	@ 0x64
 800106a:	4910      	ldr	r1, [pc, #64]	@ (80010ac <StartTask04+0x7c>)
 800106c:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <StartTask04+0x84>)
 800106e:	f002 fe1f 	bl	8003cb0 <HAL_UART_Transmit>
		servo3();
 8001072:	f7ff fe73 	bl	8000d5c <servo3>
 8001076:	e00f      	b.n	8001098 <StartTask04+0x68>
	}
	else
	{
		strcpy(tx_buffer, "Whitening@No@\r\n");
 8001078:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <StartTask04+0x7c>)
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <StartTask04+0x88>)
 800107c:	4614      	mov	r4, r2
 800107e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 8001084:	4809      	ldr	r0, [pc, #36]	@ (80010ac <StartTask04+0x7c>)
 8001086:	f7ff f8ab 	bl	80001e0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	2364      	movs	r3, #100	@ 0x64
 8001090:	4906      	ldr	r1, [pc, #24]	@ (80010ac <StartTask04+0x7c>)
 8001092:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <StartTask04+0x84>)
 8001094:	f002 fe0c 	bl	8003cb0 <HAL_UART_Transmit>
	}
	osSemaphoreRelease(servo4StartSemHandle);
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <StartTask04+0x8c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f004 f903 	bl	80052a8 <osSemaphoreRelease>
	  osSemaphoreWait(servo3StartSemHandle, osWaitForever);
 80010a2:	e7c9      	b.n	8001038 <StartTask04+0x8>
 80010a4:	200004e0 	.word	0x200004e0
 80010a8:	200005ec 	.word	0x200005ec
 80010ac:	200005fc 	.word	0x200005fc
 80010b0:	08008bbc 	.word	0x08008bbc
 80010b4:	20000370 	.word	0x20000370
 80010b8:	08008bd0 	.word	0x08008bd0
 80010bc:	200004e4 	.word	0x200004e4

080010c0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(servo4StartSemHandle, osWaitForever);
 80010c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <StartTask05+0xc0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 f89b 	bl	800520c <osSemaphoreWait>
	if (arrbuff[3])
 80010d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <StartTask05+0xc4>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d022      	beq.n	8001124 <StartTask05+0x64>
	{
		strcpy(tx_buffer, "Pore@Yes@\r\n");
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <StartTask05+0xc8>)
 80010e0:	4a2a      	ldr	r2, [pc, #168]	@ (800118c <StartTask05+0xcc>)
 80010e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 80010e8:	4827      	ldr	r0, [pc, #156]	@ (8001188 <StartTask05+0xc8>)
 80010ea:	f7ff f879 	bl	80001e0 <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	2364      	movs	r3, #100	@ 0x64
 80010f4:	4924      	ldr	r1, [pc, #144]	@ (8001188 <StartTask05+0xc8>)
 80010f6:	4826      	ldr	r0, [pc, #152]	@ (8001190 <StartTask05+0xd0>)
 80010f8:	f002 fdda 	bl	8003cb0 <HAL_UART_Transmit>
		servo4();
 80010fc:	f7ff fe56 	bl	8000dac <servo4>
		strcpy(tx_buffer, "END\r\n");
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <StartTask05+0xc8>)
 8001102:	4a24      	ldr	r2, [pc, #144]	@ (8001194 <StartTask05+0xd4>)
 8001104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001108:	6018      	str	r0, [r3, #0]
 800110a:	3304      	adds	r3, #4
 800110c:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 800110e:	481e      	ldr	r0, [pc, #120]	@ (8001188 <StartTask05+0xc8>)
 8001110:	f7ff f866 	bl	80001e0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	2364      	movs	r3, #100	@ 0x64
 800111a:	491b      	ldr	r1, [pc, #108]	@ (8001188 <StartTask05+0xc8>)
 800111c:	481c      	ldr	r0, [pc, #112]	@ (8001190 <StartTask05+0xd0>)
 800111e:	f002 fdc7 	bl	8003cb0 <HAL_UART_Transmit>
 8001122:	e026      	b.n	8001172 <StartTask05+0xb2>
	}
	else
	{
		strcpy(tx_buffer, "Pore@No@\r\n");
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <StartTask05+0xc8>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <StartTask05+0xd8>)
 8001128:	ca07      	ldmia	r2, {r0, r1, r2}
 800112a:	c303      	stmia	r3!, {r0, r1}
 800112c:	801a      	strh	r2, [r3, #0]
 800112e:	3302      	adds	r3, #2
 8001130:	0c12      	lsrs	r2, r2, #16
 8001132:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 8001134:	4814      	ldr	r0, [pc, #80]	@ (8001188 <StartTask05+0xc8>)
 8001136:	f7ff f853 	bl	80001e0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	2364      	movs	r3, #100	@ 0x64
 8001140:	4911      	ldr	r1, [pc, #68]	@ (8001188 <StartTask05+0xc8>)
 8001142:	4813      	ldr	r0, [pc, #76]	@ (8001190 <StartTask05+0xd0>)
 8001144:	f002 fdb4 	bl	8003cb0 <HAL_UART_Transmit>
		osDelay(1000);
 8001148:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800114c:	f004 f817 	bl	800517e <osDelay>
		strcpy(tx_buffer, "END\r\n");
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <StartTask05+0xc8>)
 8001152:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <StartTask05+0xd4>)
 8001154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001158:	6018      	str	r0, [r3, #0]
 800115a:	3304      	adds	r3, #4
 800115c:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 800115e:	480a      	ldr	r0, [pc, #40]	@ (8001188 <StartTask05+0xc8>)
 8001160:	f7ff f83e 	bl	80001e0 <strlen>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	4907      	ldr	r1, [pc, #28]	@ (8001188 <StartTask05+0xc8>)
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <StartTask05+0xd0>)
 800116e:	f002 fd9f 	bl	8003cb0 <HAL_UART_Transmit>
	}
	osSemaphoreRelease(sequenceDoneSemHandle);
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <StartTask05+0xdc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f004 f896 	bl	80052a8 <osSemaphoreRelease>
	  osSemaphoreWait(servo4StartSemHandle, osWaitForever);
 800117c:	e7a4      	b.n	80010c8 <StartTask05+0x8>
 800117e:	bf00      	nop
 8001180:	200004e4 	.word	0x200004e4
 8001184:	200005ec 	.word	0x200005ec
 8001188:	200005fc 	.word	0x200005fc
 800118c:	08008be0 	.word	0x08008be0
 8001190:	20000370 	.word	0x20000370
 8001194:	08008bec 	.word	0x08008bec
 8001198:	08008bf4 	.word	0x08008bf4
 800119c:	200004e8 	.word	0x200004e8

080011a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011b2:	f000 fb71 	bl	8001898 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40000400 	.word	0x40000400

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <Error_Handler+0x8>

080011d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_MspInit+0x54>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <HAL_MspInit+0x54>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_MspInit+0x54>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_MspInit+0x54>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <HAL_MspInit+0x54>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <HAL_MspInit+0x54>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	210f      	movs	r1, #15
 8001212:	f06f 0001 	mvn.w	r0, #1
 8001216:	f000 fc17 	bl	8001a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0e      	ldr	r2, [pc, #56]	@ (8001270 <HAL_TIM_PWM_MspInit+0x48>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d115      	bne.n	8001266 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <HAL_TIM_PWM_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	4a0c      	ldr	r2, [pc, #48]	@ (8001274 <HAL_TIM_PWM_MspInit+0x4c>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6413      	str	r3, [r2, #64]	@ 0x40
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_TIM_PWM_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2105      	movs	r1, #5
 800125a:	201e      	movs	r0, #30
 800125c:	f000 fbf4 	bl	8001a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001260:	201e      	movs	r0, #30
 8001262:	f000 fc0d 	bl	8001a80 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40000800 	.word	0x40000800
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <HAL_TIM_MspPostInit+0x68>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d11e      	bne.n	80012d8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_TIM_MspPostInit+0x6c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a10      	ldr	r2, [pc, #64]	@ (80012e4 <HAL_TIM_MspPostInit+0x6c>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_TIM_MspPostInit+0x6c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012b6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80012ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <HAL_TIM_MspPostInit+0x70>)
 80012d4:	f000 ffe4 	bl	80022a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40000800 	.word	0x40000800
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020400 	.word	0x40020400

080012ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	@ 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a64      	ldr	r2, [pc, #400]	@ (800149c <HAL_UART_MspInit+0x1b0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d163      	bne.n	80013d6 <HAL_UART_MspInit+0xea>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	4b63      	ldr	r3, [pc, #396]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	4a62      	ldr	r2, [pc, #392]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6453      	str	r3, [r2, #68]	@ 0x44
 800131e:	4b60      	ldr	r3, [pc, #384]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	4b5c      	ldr	r3, [pc, #368]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a5b      	ldr	r2, [pc, #364]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001346:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001358:	2307      	movs	r3, #7
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4850      	ldr	r0, [pc, #320]	@ (80014a4 <HAL_UART_MspInit+0x1b8>)
 8001364:	f000 ff9c 	bl	80022a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001368:	4b4f      	ldr	r3, [pc, #316]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 800136a:	4a50      	ldr	r2, [pc, #320]	@ (80014ac <HAL_UART_MspInit+0x1c0>)
 800136c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800136e:	4b4e      	ldr	r3, [pc, #312]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 8001370:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001374:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001376:	4b4c      	ldr	r3, [pc, #304]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137c:	4b4a      	ldr	r3, [pc, #296]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001382:	4b49      	ldr	r3, [pc, #292]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 8001384:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001388:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138a:	4b47      	ldr	r3, [pc, #284]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001390:	4b45      	ldr	r3, [pc, #276]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001396:	4b44      	ldr	r3, [pc, #272]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800139c:	4b42      	ldr	r3, [pc, #264]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a2:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013a8:	483f      	ldr	r0, [pc, #252]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 80013aa:	f000 fb77 	bl	8001a9c <HAL_DMA_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80013b4:	f7ff ff06 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a3b      	ldr	r2, [pc, #236]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 80013bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013be:	4a3a      	ldr	r2, [pc, #232]	@ (80014a8 <HAL_UART_MspInit+0x1bc>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2105      	movs	r1, #5
 80013c8:	2025      	movs	r0, #37	@ 0x25
 80013ca:	f000 fb3d 	bl	8001a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ce:	2025      	movs	r0, #37	@ 0x25
 80013d0:	f000 fb56 	bl	8001a80 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80013d4:	e05e      	b.n	8001494 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a35      	ldr	r2, [pc, #212]	@ (80014b0 <HAL_UART_MspInit+0x1c4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d159      	bne.n	8001494 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a2d      	ldr	r2, [pc, #180]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 80013ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f0:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	4a26      	ldr	r2, [pc, #152]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6313      	str	r3, [r2, #48]	@ 0x30
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <HAL_UART_MspInit+0x1b4>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001418:	230c      	movs	r3, #12
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001428:	2307      	movs	r3, #7
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	481c      	ldr	r0, [pc, #112]	@ (80014a4 <HAL_UART_MspInit+0x1b8>)
 8001434:	f000 ff34 	bl	80022a0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 800143a:	4a1f      	ldr	r2, [pc, #124]	@ (80014b8 <HAL_UART_MspInit+0x1cc>)
 800143c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800143e:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 8001440:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001444:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001446:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 8001448:	2240      	movs	r2, #64	@ 0x40
 800144a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 8001454:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001458:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001478:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 800147a:	f000 fb0f 	bl	8001a9c <HAL_DMA_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001484:	f7ff fe9e 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 800148c:	639a      	str	r2, [r3, #56]	@ 0x38
 800148e:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <HAL_UART_MspInit+0x1c8>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001494:	bf00      	nop
 8001496:	3730      	adds	r7, #48	@ 0x30
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40011000 	.word	0x40011000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	20000400 	.word	0x20000400
 80014ac:	40026440 	.word	0x40026440
 80014b0:	40004400 	.word	0x40004400
 80014b4:	20000460 	.word	0x20000460
 80014b8:	400260a0 	.word	0x400260a0

080014bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	@ 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <HAL_InitTick+0xe4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	4a32      	ldr	r2, [pc, #200]	@ (80015a0 <HAL_InitTick+0xe4>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	6413      	str	r3, [r2, #64]	@ 0x40
 80014dc:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <HAL_InitTick+0xe4>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e8:	f107 0210 	add.w	r2, r7, #16
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fd0a 	bl	8002f0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001502:	f001 fcdb 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8001506:	6378      	str	r0, [r7, #52]	@ 0x34
 8001508:	e004      	b.n	8001514 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800150a:	f001 fcd7 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 800150e:	4603      	mov	r3, r0
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001516:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <HAL_InitTick+0xe8>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	3b01      	subs	r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_InitTick+0xec>)
 8001524:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <HAL_InitTick+0xf0>)
 8001526:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <HAL_InitTick+0xec>)
 800152a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800152e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001530:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <HAL_InitTick+0xec>)
 8001532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001534:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <HAL_InitTick+0xec>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_InitTick+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_InitTick+0xec>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001548:	4817      	ldr	r0, [pc, #92]	@ (80015a8 <HAL_InitTick+0xec>)
 800154a:	f001 fd11 	bl	8002f70 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001554:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11b      	bne.n	8001594 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800155c:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <HAL_InitTick+0xec>)
 800155e:	f001 fd61 	bl	8003024 <HAL_TIM_Base_Start_IT>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001568:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800156c:	2b00      	cmp	r3, #0
 800156e:	d111      	bne.n	8001594 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001570:	201d      	movs	r0, #29
 8001572:	f000 fa85 	bl	8001a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d808      	bhi.n	800158e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	201d      	movs	r0, #29
 8001582:	f000 fa61 	bl	8001a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <HAL_InitTick+0xf4>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e002      	b.n	8001594 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001594:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001598:	4618      	mov	r0, r3
 800159a:	3738      	adds	r7, #56	@ 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	431bde83 	.word	0x431bde83
 80015a8:	20000624 	.word	0x20000624
 80015ac:	40000400 	.word	0x40000400
 80015b0:	20000004 	.word	0x20000004

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <NMI_Handler+0x4>

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <MemManage_Handler+0x4>

080015cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <UsageFault_Handler+0x4>

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <DMA1_Stream6_IRQHandler+0x10>)
 80015f2:	f000 fbeb 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000460 	.word	0x20000460

08001600 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <TIM3_IRQHandler+0x10>)
 8001606:	f001 fe6f 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000624 	.word	0x20000624

08001614 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <TIM4_IRQHandler+0x10>)
 800161a:	f001 fe65 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000328 	.word	0x20000328

08001628 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <USART1_IRQHandler+0x10>)
 800162e:	f002 fc23 	bl	8003e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000370 	.word	0x20000370

0800163c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <DMA2_Stream2_IRQHandler+0x10>)
 8001642:	f000 fbc3 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000400 	.word	0x20000400

08001650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_kill>:

int _kill(int pid, int sig)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800166a:	f006 fbad 	bl	8007dc8 <__errno>
 800166e:	4603      	mov	r3, r0
 8001670:	2216      	movs	r2, #22
 8001672:	601a      	str	r2, [r3, #0]
  return -1;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_exit>:

void _exit (int status)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ffe7 	bl	8001660 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001692:	bf00      	nop
 8001694:	e7fd      	b.n	8001692 <_exit+0x12>

08001696 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e00a      	b.n	80016be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016a8:	f3af 8000 	nop.w
 80016ac:	4601      	mov	r1, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	60ba      	str	r2, [r7, #8]
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dbf0      	blt.n	80016a8 <_read+0x12>
  }

  return len;
 80016c6:	687b      	ldr	r3, [r7, #4]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e009      	b.n	80016f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	60ba      	str	r2, [r7, #8]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb86 	bl	8000dfc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbf1      	blt.n	80016e2 <_write+0x12>
  }
  return len;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_close>:

int _close(int file)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001730:	605a      	str	r2, [r3, #4]
  return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_isatty>:

int _isatty(int file)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001756:	b480      	push	{r7}
 8001758:	b085      	sub	sp, #20
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f006 fb12 	bl	8007dc8 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20020000 	.word	0x20020000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	2000066c 	.word	0x2000066c
 80017d8:	20004518 	.word	0x20004518

080017dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <SystemInit+0x20>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e6:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <SystemInit+0x20>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001838 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001804:	f7ff ffea 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001808:	480c      	ldr	r0, [pc, #48]	@ (800183c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180a:	490d      	ldr	r1, [pc, #52]	@ (8001840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800180c:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001820:	4c0a      	ldr	r4, [pc, #40]	@ (800184c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182e:	f006 fad1 	bl	8007dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7fe fedd 	bl	80005f0 <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001844:	08008e1c 	.word	0x08008e1c
  ldr r2, =_sbss
 8001848:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800184c:	20004514 	.word	0x20004514

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <HAL_Init+0x40>)
 800185e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <HAL_Init+0x40>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <HAL_Init+0x40>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f8d8 	bl	8001a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	200f      	movs	r0, #15
 8001884:	f7ff fe1a 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff fca2 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000670 	.word	0x20000670

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000670 	.word	0x20000670

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	@ (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	@ (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	@ (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	@ (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	@ 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	@ 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff4c 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5a:	f7ff ff61 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7ff ffb1 	bl	80019cc <NVIC_EncodePriority>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff80 	bl	8001978 <__NVIC_SetPriority>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff54 	bl	800193c <__NVIC_EnableIRQ>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ff0a 	bl	80018c0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e099      	b.n	8001bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad8:	e00f      	b.n	8001afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ada:	f7ff fef1 	bl	80018c0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d908      	bls.n	8001afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2203      	movs	r2, #3
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e078      	b.n	8001bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e8      	bne.n	8001ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <HAL_DMA_Init+0x158>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f023 0307 	bic.w	r3, r3, #7
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d117      	bne.n	8001bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fb01 	bl	80021a8 <DMA_CheckFifoParam>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	@ 0x40
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e016      	b.n	8001bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fab8 	bl	800213c <DMA_CalcBaseAndBitshift>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd4:	223f      	movs	r2, #63	@ 0x3f
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	f010803f 	.word	0xf010803f

08001bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Start_IT+0x26>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e040      	b.n	8001ca0 <HAL_DMA_Start_IT+0xa8>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d12f      	bne.n	8001c92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa4a 	bl	80020e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c50:	223f      	movs	r2, #63	@ 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0216 	orr.w	r2, r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0208 	orr.w	r2, r2, #8
 8001c7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e005      	b.n	8001c9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cb6:	f7ff fe03 	bl	80018c0 <HAL_GetTick>
 8001cba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d008      	beq.n	8001cda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e052      	b.n	8001d80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0216 	bic.w	r2, r2, #22
 8001ce8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d103      	bne.n	8001d0a <HAL_DMA_Abort+0x62>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0208 	bic.w	r2, r2, #8
 8001d18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2a:	e013      	b.n	8001d54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d2c:	f7ff fdc8 	bl	80018c0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d90c      	bls.n	8001d54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2203      	movs	r2, #3
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e015      	b.n	8001d80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1e4      	bne.n	8001d2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d66:	223f      	movs	r2, #63	@ 0x3f
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d004      	beq.n	8001da6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2280      	movs	r2, #128	@ 0x80
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00c      	b.n	8001dc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2205      	movs	r2, #5
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002014 <HAL_DMA_IRQHandler+0x248>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a8e      	ldr	r2, [pc, #568]	@ (8002018 <HAL_DMA_IRQHandler+0x24c>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df6:	2208      	movs	r2, #8
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0204 	bic.w	r2, r2, #4
 8001e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e24:	2208      	movs	r2, #8
 8001e26:	409a      	lsls	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	f043 0202 	orr.w	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e72:	2204      	movs	r2, #4
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e90:	2204      	movs	r2, #4
 8001e92:	409a      	lsls	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9c:	f043 0204 	orr.w	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d043      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03c      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d018      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
 8001efa:	e01f      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0208 	bic.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f40:	2220      	movs	r2, #32
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 808f 	beq.w	800206c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8087 	beq.w	800206c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f62:	2220      	movs	r2, #32
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d136      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0216 	bic.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x1da>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	223f      	movs	r2, #63	@ 0x3f
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d07e      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
        }
        return;
 8001fe2:	e079      	b.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01d      	beq.n	800202e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10d      	bne.n	800201c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	2b00      	cmp	r3, #0
 8002006:	d031      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e02c      	b.n	800206c <HAL_DMA_IRQHandler+0x2a0>
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000
 8002018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
 800202c:	e01e      	b.n	800206c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10f      	bne.n	800205c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0210 	bic.w	r2, r2, #16
 800204a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	2b00      	cmp	r3, #0
 8002072:	d032      	beq.n	80020da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2205      	movs	r2, #5
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	3301      	adds	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d307      	bcc.n	80020b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f2      	bne.n	8002098 <HAL_DMA_IRQHandler+0x2cc>
 80020b2:	e000      	b.n	80020b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
 80020d6:	e000      	b.n	80020da <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d8:	bf00      	nop
    }
  }
}
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b40      	cmp	r3, #64	@ 0x40
 800210c:	d108      	bne.n	8002120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800211e:	e007      	b.n	8002130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3b10      	subs	r3, #16
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <DMA_CalcBaseAndBitshift+0x64>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002156:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d909      	bls.n	800217e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	1d1a      	adds	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	659a      	str	r2, [r3, #88]	@ 0x58
 800217c:	e007      	b.n	800218e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	aaaaaaab 	.word	0xaaaaaaab
 80021a4:	08008c20 	.word	0x08008c20

080021a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11f      	bne.n	8002202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d856      	bhi.n	8002276 <DMA_CheckFifoParam+0xce>
 80021c8:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <DMA_CheckFifoParam+0x28>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021f3 	.word	0x080021f3
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	08002277 	.word	0x08002277
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d046      	beq.n	800227a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f0:	e043      	b.n	800227a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021fa:	d140      	bne.n	800227e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002200:	e03d      	b.n	800227e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800220a:	d121      	bne.n	8002250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d837      	bhi.n	8002282 <DMA_CheckFifoParam+0xda>
 8002212:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <DMA_CheckFifoParam+0x70>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002229 	.word	0x08002229
 800221c:	0800222f 	.word	0x0800222f
 8002220:	08002229 	.word	0x08002229
 8002224:	08002241 	.word	0x08002241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e030      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d025      	beq.n	8002286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223e:	e022      	b.n	8002286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002248:	d11f      	bne.n	800228a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800224e:	e01c      	b.n	800228a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d903      	bls.n	800225e <DMA_CheckFifoParam+0xb6>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d003      	beq.n	8002264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800225c:	e018      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
      break;
 8002262:	e015      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00e      	beq.n	800228e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      break;
 8002274:	e00b      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;
 8002276:	bf00      	nop
 8002278:	e00a      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e008      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e006      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e004      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
 8002288:	e002      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;   
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <DMA_CheckFifoParam+0xe8>
      break;
 800228e:	bf00      	nop
    }
  } 
  
  return status; 
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	@ 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e159      	b.n	8002570 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f040 8148 	bne.w	800256a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d005      	beq.n	80022f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d130      	bne.n	8002354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a2 	beq.w	800256a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <HAL_GPIO_Init+0x2e8>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	4a56      	ldr	r2, [pc, #344]	@ (8002588 <HAL_GPIO_Init+0x2e8>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002434:	6453      	str	r3, [r2, #68]	@ 0x44
 8002436:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <HAL_GPIO_Init+0x2e8>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002442:	4a52      	ldr	r2, [pc, #328]	@ (800258c <HAL_GPIO_Init+0x2ec>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a49      	ldr	r2, [pc, #292]	@ (8002590 <HAL_GPIO_Init+0x2f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0x202>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a48      	ldr	r2, [pc, #288]	@ (8002594 <HAL_GPIO_Init+0x2f4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0x1fe>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a47      	ldr	r2, [pc, #284]	@ (8002598 <HAL_GPIO_Init+0x2f8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00d      	beq.n	800249a <HAL_GPIO_Init+0x1fa>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_GPIO_Init+0x2fc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <HAL_GPIO_Init+0x1f6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a45      	ldr	r2, [pc, #276]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_GPIO_Init+0x1f2>
 800248e:	2304      	movs	r3, #4
 8002490:	e008      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 8002492:	2307      	movs	r3, #7
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 8002496:	2303      	movs	r3, #3
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 80024a2:	2300      	movs	r3, #0
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f002 0203 	and.w	r2, r2, #3
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	@ (800258c <HAL_GPIO_Init+0x2ec>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e6:	4a2f      	ldr	r2, [pc, #188]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ec:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002510:	4a24      	ldr	r2, [pc, #144]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002516:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253a:	4a1a      	ldr	r2, [pc, #104]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002540:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002564:	4a0f      	ldr	r2, [pc, #60]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	f67f aea2 	bls.w	80022bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40013c00 	.word	0x40013c00

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c4:	e003      	b.n	80025ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e267      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d075      	beq.n	80026e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025fa:	4b88      	ldr	r3, [pc, #544]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00c      	beq.n	8002620 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4b85      	ldr	r3, [pc, #532]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800260e:	2b08      	cmp	r3, #8
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b82      	ldr	r3, [pc, #520]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b7e      	ldr	r3, [pc, #504]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d05b      	beq.n	80026e4 <HAL_RCC_OscConfig+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d157      	bne.n	80026e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e242      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x74>
 8002642:	4b76      	ldr	r3, [pc, #472]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b70      	ldr	r3, [pc, #448]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6f      	ldr	r2, [pc, #444]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b6d      	ldr	r3, [pc, #436]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6c      	ldr	r2, [pc, #432]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002674:	4b69      	ldr	r3, [pc, #420]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a68      	ldr	r2, [pc, #416]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b66      	ldr	r3, [pc, #408]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a65      	ldr	r2, [pc, #404]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800268a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f914 	bl	80018c0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff f910 	bl	80018c0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	@ 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e207      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b5b      	ldr	r3, [pc, #364]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xc0>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff f900 	bl	80018c0 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff f8fc 	bl	80018c0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	@ 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1f3      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	4b51      	ldr	r3, [pc, #324]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0xe8>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d063      	beq.n	80027ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026f2:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b47      	ldr	r3, [pc, #284]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11c      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b44      	ldr	r3, [pc, #272]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	4b41      	ldr	r3, [pc, #260]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1c7      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4937      	ldr	r1, [pc, #220]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e03a      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <HAL_RCC_OscConfig+0x244>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7ff f8b5 	bl	80018c0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275a:	f7ff f8b1 	bl	80018c0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1a8      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b28      	ldr	r3, [pc, #160]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4925      	ldr	r1, [pc, #148]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e015      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <HAL_RCC_OscConfig+0x244>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f894 	bl	80018c0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279c:	f7ff f890 	bl	80018c0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e187      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d036      	beq.n	8002834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_RCC_OscConfig+0x248>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7ff f874 	bl	80018c0 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff f870 	bl	80018c0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e167      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x200>
 80027fa:	e01b      	b.n	8002834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <HAL_RCC_OscConfig+0x248>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7ff f85d 	bl	80018c0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e00e      	b.n	8002828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280a:	f7ff f859 	bl	80018c0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d907      	bls.n	8002828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e150      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
 800281c:	40023800 	.word	0x40023800
 8002820:	42470000 	.word	0x42470000
 8002824:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ea      	bne.n	800280a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8097 	beq.w	8002970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b81      	ldr	r3, [pc, #516]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b7d      	ldr	r3, [pc, #500]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	@ 0x40
 8002862:	4b7a      	ldr	r3, [pc, #488]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b77      	ldr	r3, [pc, #476]	@ (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d118      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b74      	ldr	r3, [pc, #464]	@ (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a73      	ldr	r2, [pc, #460]	@ (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7ff f819 	bl	80018c0 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002892:	f7ff f815 	bl	80018c0 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e10c      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a50 <HAL_RCC_OscConfig+0x474>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2ea>
 80028b8:	4b64      	ldr	r3, [pc, #400]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a63      	ldr	r2, [pc, #396]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x324>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x30c>
 80028ce:	4b5f      	ldr	r3, [pc, #380]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028da:	4b5c      	ldr	r3, [pc, #368]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a5b      	ldr	r2, [pc, #364]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x324>
 80028e8:	4b58      	ldr	r3, [pc, #352]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a57      	ldr	r2, [pc, #348]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f4:	4b55      	ldr	r3, [pc, #340]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a54      	ldr	r2, [pc, #336]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe ffda 	bl	80018c0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe ffd6 	bl	80018c0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0cb      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002926:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ee      	beq.n	8002910 <HAL_RCC_OscConfig+0x334>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7fe ffc4 	bl	80018c0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe ffc0 	bl	80018c0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0b5      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002952:	4b3e      	ldr	r3, [pc, #248]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1ee      	bne.n	800293c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b39      	ldr	r3, [pc, #228]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 800296a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a1 	beq.w	8002abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297a:	4b34      	ldr	r3, [pc, #208]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d05c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d141      	bne.n	8002a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b31      	ldr	r3, [pc, #196]	@ (8002a54 <HAL_RCC_OscConfig+0x478>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe ff94 	bl	80018c0 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe ff90 	bl	80018c0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e087      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	491b      	ldr	r1, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x478>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fe ff69 	bl	80018c0 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe ff65 	bl	80018c0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e05c      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x416>
 8002a10:	e054      	b.n	8002abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <HAL_RCC_OscConfig+0x478>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe ff52 	bl	80018c0 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe ff4e 	bl	80018c0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e045      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x444>
 8002a3e:	e03d      	b.n	8002abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e038      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d028      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d121      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d11a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d111      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cc      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b68      	ldr	r3, [pc, #416]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90c      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b65      	ldr	r3, [pc, #404]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a58      	ldr	r2, [pc, #352]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d044      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e067      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4934      	ldr	r1, [pc, #208]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fe80 	bl	80018c0 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fe7c 	bl	80018c0 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2b      	ldr	r3, [pc, #172]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b25      	ldr	r3, [pc, #148]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d20c      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fc22 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08008c08 	.word	0x08008c08
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004

08002c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c9c:	b094      	sub	sp, #80	@ 0x50
 8002c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb0:	4b79      	ldr	r3, [pc, #484]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d00d      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	f200 80e1 	bhi.w	8002e84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x34>
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cca:	e0db      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4b73      	ldr	r3, [pc, #460]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cd0:	e0db      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd2:	4b73      	ldr	r3, [pc, #460]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cd6:	e0d8      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b6a      	ldr	r3, [pc, #424]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	0159      	lsls	r1, r3, #5
 8002d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d1c:	0150      	lsls	r0, r2, #5
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4621      	mov	r1, r4
 8002d24:	1a51      	subs	r1, r2, r1
 8002d26:	6139      	str	r1, [r7, #16]
 8002d28:	4629      	mov	r1, r5
 8002d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	018b      	lsls	r3, r1, #6
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d46:	4651      	mov	r1, sl
 8002d48:	018a      	lsls	r2, r1, #6
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d50:	4659      	mov	r1, fp
 8002d52:	eb63 0901 	sbc.w	r9, r3, r1
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d6a:	4690      	mov	r8, r2
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	4623      	mov	r3, r4
 8002d70:	eb18 0303 	adds.w	r3, r8, r3
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	462b      	mov	r3, r5
 8002d78:	eb49 0303 	adc.w	r3, r9, r3
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	024b      	lsls	r3, r1, #9
 8002d8e:	4621      	mov	r1, r4
 8002d90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d94:	4621      	mov	r1, r4
 8002d96:	024a      	lsls	r2, r1, #9
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9e:	2200      	movs	r2, #0
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002da4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002da8:	f7fd fa72 	bl	8000290 <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4613      	mov	r3, r2
 8002db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002db4:	e058      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db6:	4b38      	ldr	r3, [pc, #224]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	099b      	lsrs	r3, r3, #6
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	0159      	lsls	r1, r3, #5
 8002dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de2:	0150      	lsls	r0, r2, #5
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4641      	mov	r1, r8
 8002dea:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dee:	4649      	mov	r1, r9
 8002df0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e08:	ebb2 040a 	subs.w	r4, r2, sl
 8002e0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	00eb      	lsls	r3, r5, #3
 8002e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1e:	00e2      	lsls	r2, r4, #3
 8002e20:	4614      	mov	r4, r2
 8002e22:	461d      	mov	r5, r3
 8002e24:	4643      	mov	r3, r8
 8002e26:	18e3      	adds	r3, r4, r3
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	eb45 0303 	adc.w	r3, r5, r3
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3e:	4629      	mov	r1, r5
 8002e40:	028b      	lsls	r3, r1, #10
 8002e42:	4621      	mov	r1, r4
 8002e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e48:	4621      	mov	r1, r4
 8002e4a:	028a      	lsls	r2, r1, #10
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e52:	2200      	movs	r2, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	61fa      	str	r2, [r7, #28]
 8002e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5c:	f7fd fa18 	bl	8000290 <__aeabi_uldivmod>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4613      	mov	r3, r2
 8002e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	3301      	adds	r3, #1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e82:	e002      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3750      	adds	r7, #80	@ 0x50
 8002e90:	46bd      	mov	sp, r7
 8002e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	007a1200 	.word	0x007a1200

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	@ (8002eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000000 	.word	0x20000000

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec0:	f7ff fff0 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0a9b      	lsrs	r3, r3, #10
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	@ (8002ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	08008c18 	.word	0x08008c18

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee8:	f7ff ffdc 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	0b5b      	lsrs	r3, r3, #13
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	@ (8002f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	08008c18 	.word	0x08008c18

08002f0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	220f      	movs	r2, #15
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f1c:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f4e:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <HAL_RCC_GetClockConfig+0x60>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40023c00 	.word	0x40023c00

08002f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f839 	bl	800300e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 fb74 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d001      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e044      	b.n	80030c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1e      	ldr	r2, [pc, #120]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003066:	d013      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_TIM_Base_Start_IT+0xb8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	@ (80030e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d010      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	e007      	b.n	80030c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40014000 	.word	0x40014000

080030e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e041      	b.n	800317e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe f88a 	bl	8001228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 fab8 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_TIM_PWM_Start+0x24>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e022      	b.n	80031f2 <HAL_TIM_PWM_Start+0x6a>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d109      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x3e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	e015      	b.n	80031f2 <HAL_TIM_PWM_Start+0x6a>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d109      	bne.n	80031e0 <HAL_TIM_PWM_Start+0x58>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e008      	b.n	80031f2 <HAL_TIM_PWM_Start+0x6a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e068      	b.n	80032cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Start+0x82>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003208:	e013      	b.n	8003232 <HAL_TIM_PWM_Start+0xaa>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0x92>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003218:	e00b      	b.n	8003232 <HAL_TIM_PWM_Start+0xaa>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d104      	bne.n	800322a <HAL_TIM_PWM_Start+0xa2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003228:	e003      	b.n	8003232 <HAL_TIM_PWM_Start+0xaa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fc40 	bl	8003ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a23      	ldr	r2, [pc, #140]	@ (80032d4 <HAL_TIM_PWM_Start+0x14c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1d      	ldr	r2, [pc, #116]	@ (80032d4 <HAL_TIM_PWM_Start+0x14c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326c:	d013      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a19      	ldr	r2, [pc, #100]	@ (80032d8 <HAL_TIM_PWM_Start+0x150>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a17      	ldr	r2, [pc, #92]	@ (80032dc <HAL_TIM_PWM_Start+0x154>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a16      	ldr	r2, [pc, #88]	@ (80032e0 <HAL_TIM_PWM_Start+0x158>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_TIM_PWM_Start+0x10e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a14      	ldr	r2, [pc, #80]	@ (80032e4 <HAL_TIM_PWM_Start+0x15c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d010      	beq.n	80032ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b8:	e007      	b.n	80032ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40000c00 	.word	0x40000c00
 80032e4:	40014000 	.word	0x40014000

080032e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d020      	beq.n	800334c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0202 	mvn.w	r2, #2
 800331c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f994 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f986 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f997 	bl	8003674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0204 	mvn.w	r2, #4
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f96e 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f960 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f971 	bl	8003674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0208 	mvn.w	r2, #8
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2204      	movs	r2, #4
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f948 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f93a 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f94b 	bl	8003674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d020      	beq.n	8003430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0210 	mvn.w	r2, #16
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2208      	movs	r2, #8
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f922 	bl	8003660 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f914 	bl	800364c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f925 	bl	8003674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0201 	mvn.w	r2, #1
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fea6 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fbc2 	bl	8003bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8f6 	bl	8003688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00c      	beq.n	80034c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0220 	mvn.w	r2, #32
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fb94 	bl	8003be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e0ae      	b.n	8003644 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	f200 809f 	bhi.w	8003634 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034f6:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003531 	.word	0x08003531
 8003500:	08003635 	.word	0x08003635
 8003504:	08003635 	.word	0x08003635
 8003508:	08003635 	.word	0x08003635
 800350c:	08003571 	.word	0x08003571
 8003510:	08003635 	.word	0x08003635
 8003514:	08003635 	.word	0x08003635
 8003518:	08003635 	.word	0x08003635
 800351c:	080035b3 	.word	0x080035b3
 8003520:	08003635 	.word	0x08003635
 8003524:	08003635 	.word	0x08003635
 8003528:	08003635 	.word	0x08003635
 800352c:	080035f3 	.word	0x080035f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f936 	bl	80037a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0208 	orr.w	r2, r2, #8
 800354a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0204 	bic.w	r2, r2, #4
 800355a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6999      	ldr	r1, [r3, #24]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	619a      	str	r2, [r3, #24]
      break;
 800356e:	e064      	b.n	800363a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f97c 	bl	8003874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800358a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6999      	ldr	r1, [r3, #24]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	021a      	lsls	r2, r3, #8
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	619a      	str	r2, [r3, #24]
      break;
 80035b0:	e043      	b.n	800363a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f9c7 	bl	800394c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0208 	orr.w	r2, r2, #8
 80035cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0204 	bic.w	r2, r2, #4
 80035dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69d9      	ldr	r1, [r3, #28]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	61da      	str	r2, [r3, #28]
      break;
 80035f0:	e023      	b.n	800363a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fa11 	bl	8003a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800360c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69d9      	ldr	r1, [r3, #28]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	61da      	str	r2, [r3, #28]
      break;
 8003632:	e002      	b.n	800363a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
      break;
 8003638:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003642:	7dfb      	ldrb	r3, [r7, #23]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a37      	ldr	r2, [pc, #220]	@ (800378c <TIM_Base_SetConfig+0xf0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00f      	beq.n	80036d4 <TIM_Base_SetConfig+0x38>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ba:	d00b      	beq.n	80036d4 <TIM_Base_SetConfig+0x38>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a34      	ldr	r2, [pc, #208]	@ (8003790 <TIM_Base_SetConfig+0xf4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_Base_SetConfig+0x38>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a33      	ldr	r2, [pc, #204]	@ (8003794 <TIM_Base_SetConfig+0xf8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0x38>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a32      	ldr	r2, [pc, #200]	@ (8003798 <TIM_Base_SetConfig+0xfc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d108      	bne.n	80036e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a28      	ldr	r2, [pc, #160]	@ (800378c <TIM_Base_SetConfig+0xf0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01b      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f4:	d017      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a25      	ldr	r2, [pc, #148]	@ (8003790 <TIM_Base_SetConfig+0xf4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a24      	ldr	r2, [pc, #144]	@ (8003794 <TIM_Base_SetConfig+0xf8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00f      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a23      	ldr	r2, [pc, #140]	@ (8003798 <TIM_Base_SetConfig+0xfc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a22      	ldr	r2, [pc, #136]	@ (800379c <TIM_Base_SetConfig+0x100>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a21      	ldr	r2, [pc, #132]	@ (80037a0 <TIM_Base_SetConfig+0x104>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_Base_SetConfig+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a20      	ldr	r2, [pc, #128]	@ (80037a4 <TIM_Base_SetConfig+0x108>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d108      	bne.n	8003738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800372c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a0c      	ldr	r2, [pc, #48]	@ (800378c <TIM_Base_SetConfig+0xf0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d103      	bne.n	8003766 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f043 0204 	orr.w	r2, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400
 80037a4:	40014800 	.word	0x40014800

080037a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 0201 	bic.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 0302 	bic.w	r3, r3, #2
 80037f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003870 <TIM_OC1_SetConfig+0xc8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10c      	bne.n	800381e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0308 	bic.w	r3, r3, #8
 800380a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a13      	ldr	r2, [pc, #76]	@ (8003870 <TIM_OC1_SetConfig+0xc8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d111      	bne.n	800384a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800382c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	621a      	str	r2, [r3, #32]
}
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40010000 	.word	0x40010000

08003874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 0210 	bic.w	r2, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0320 	bic.w	r3, r3, #32
 80038be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003948 <TIM_OC2_SetConfig+0xd4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d10d      	bne.n	80038f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a15      	ldr	r2, [pc, #84]	@ (8003948 <TIM_OC2_SetConfig+0xd4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d113      	bne.n	8003920 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000

0800394c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800397a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <TIM_OC3_SetConfig+0xd0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10d      	bne.n	80039c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a14      	ldr	r2, [pc, #80]	@ (8003a1c <TIM_OC3_SetConfig+0xd0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d113      	bne.n	80039f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	621a      	str	r2, [r3, #32]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	40010000 	.word	0x40010000

08003a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	031b      	lsls	r3, r3, #12
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a10      	ldr	r2, [pc, #64]	@ (8003abc <TIM_OC4_SetConfig+0x9c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d109      	bne.n	8003a94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000

08003ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1a      	ldr	r2, [r3, #32]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e050      	b.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b70:	d013      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a18      	ldr	r2, [pc, #96]	@ (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10c      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40014000 	.word	0x40014000

08003be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e042      	b.n	8003ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd fb58 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	@ 0x24
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 ffa1 	bl	8004b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d175      	bne.n	8003dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_UART_Transmit+0x2c>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e06e      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2221      	movs	r2, #33	@ 0x21
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fde7 	bl	80018c0 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Transmit+0x6c>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d24:	e02e      	b.n	8003d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	@ 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fc71 	bl	8004618 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e03a      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3302      	adds	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e007      	b.n	8003d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1cb      	bne.n	8003d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2140      	movs	r1, #64	@ 0x40
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fc3d 	bl	8004618 <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b08c      	sub	sp, #48	@ 0x30
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d146      	bne.n	8003e6e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e03f      	b.n	8003e70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fc62 	bl	80046cc <UART_Start_Receive_DMA>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d125      	bne.n	8003e62 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f043 0310 	orr.w	r3, r3, #16
 8003e42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6a39      	ldr	r1, [r7, #32]
 8003e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003e60:	e002      	b.n	8003e68 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003e68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e6c:	e000      	b.n	8003e70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3730      	adds	r7, #48	@ 0x30
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_UART_IRQHandler+0x66>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fda2 	bl	8004a20 <UART_Receive_IT>
      return;
 8003edc:	e273      	b.n	80043c6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80de 	beq.w	80040a4 <HAL_UART_IRQHandler+0x22c>
 8003ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80d1 	beq.w	80040a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_UART_IRQHandler+0xae>
 8003f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f043 0201 	orr.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_UART_IRQHandler+0xd2>
 8003f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f043 0202 	orr.w	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_UART_IRQHandler+0xf6>
 8003f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f043 0204 	orr.w	r2, r3, #4
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d011      	beq.n	8003f9e <HAL_UART_IRQHandler+0x126>
 8003f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	f043 0208 	orr.w	r2, r3, #8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 820a 	beq.w	80043bc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x14e>
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fd2d 	bl	8004a20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd0:	2b40      	cmp	r3, #64	@ 0x40
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x17a>
 8003fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d04f      	beq.n	8004092 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fc38 	bl	8004868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	2b40      	cmp	r3, #64	@ 0x40
 8004004:	d141      	bne.n	800408a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3314      	adds	r3, #20
 800400c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800401c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3314      	adds	r3, #20
 800402e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004032:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004036:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800403e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800404a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1d9      	bne.n	8004006 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d013      	beq.n	8004082 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	4a8a      	ldr	r2, [pc, #552]	@ (8004288 <HAL_UART_IRQHandler+0x410>)
 8004060:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd fe8e 	bl	8001d88 <HAL_DMA_Abort_IT>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800407c:	4610      	mov	r0, r2
 800407e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	e00e      	b.n	80040a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9c0 	bl	8004408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e00a      	b.n	80040a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f9bc 	bl	8004408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e006      	b.n	80040a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9b8 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800409e:	e18d      	b.n	80043bc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	bf00      	nop
    return;
 80040a2:	e18b      	b.n	80043bc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 8167 	bne.w	800437c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8160 	beq.w	800437c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8159 	beq.w	800437c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b40      	cmp	r3, #64	@ 0x40
 80040ec:	f040 80ce 	bne.w	800428c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a9 	beq.w	8004258 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800410a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800410e:	429a      	cmp	r2, r3
 8004110:	f080 80a2 	bcs.w	8004258 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800411a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004126:	f000 8088 	beq.w	800423a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004140:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004148:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800415a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004162:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800416e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1d9      	bne.n	800412a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3314      	adds	r3, #20
 800417c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800419a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800419e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e1      	bne.n	8004176 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3314      	adds	r3, #20
 80041b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e3      	bne.n	80041b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800420a:	f023 0310 	bic.w	r3, r3, #16
 800420e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	330c      	adds	r3, #12
 8004218:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800421c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800421e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004222:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800422a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e3      	bne.n	80041f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd fd37 	bl	8001ca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004248:	b29b      	uxth	r3, r3
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	b29b      	uxth	r3, r3
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fc fd09 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004256:	e0b3      	b.n	80043c0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800425c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004260:	429a      	cmp	r2, r3
 8004262:	f040 80ad 	bne.w	80043c0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004270:	f040 80a6 	bne.w	80043c0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fc fcf1 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
      return;
 8004286:	e09b      	b.n	80043c0 <HAL_UART_IRQHandler+0x548>
 8004288:	0800492f 	.word	0x0800492f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004294:	b29b      	uxth	r3, r3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 808e 	beq.w	80043c4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80042a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8089 	beq.w	80043c4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e3      	bne.n	80042b2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	623b      	str	r3, [r7, #32]
   return(result);
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3314      	adds	r3, #20
 800430a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800430e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e3      	bne.n	80042ea <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0310 	bic.w	r3, r3, #16
 8004346:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004354:	61fa      	str	r2, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	69b9      	ldr	r1, [r7, #24]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	617b      	str	r3, [r7, #20]
   return(result);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e3      	bne.n	8004330 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800436e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc fc77 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800437a:	e023      	b.n	80043c4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_UART_IRQHandler+0x524>
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fadb 	bl	8004950 <UART_Transmit_IT>
    return;
 800439a:	e014      	b.n	80043c6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <HAL_UART_IRQHandler+0x54e>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fb1b 	bl	80049f0 <UART_EndTransmit_IT>
    return;
 80043ba:	e004      	b.n	80043c6 <HAL_UART_IRQHandler+0x54e>
    return;
 80043bc:	bf00      	nop
 80043be:	e002      	b.n	80043c6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043c0:	bf00      	nop
 80043c2:	e000      	b.n	80043c6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043c4:	bf00      	nop
  }
}
 80043c6:	37e8      	adds	r7, #232	@ 0xe8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b09c      	sub	sp, #112	@ 0x70
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d172      	bne.n	800451e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800443a:	2200      	movs	r2, #0
 800443c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800444e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	330c      	adds	r3, #12
 800445c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800445e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004460:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004464:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800446c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e5      	bne.n	800443e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	667b      	str	r3, [r7, #100]	@ 0x64
 800448a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004492:	647a      	str	r2, [r7, #68]	@ 0x44
 8004494:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004498:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	623b      	str	r3, [r7, #32]
   return(result);
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80044c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d119      	bne.n	800451e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f023 0310 	bic.w	r3, r3, #16
 8004500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	69b9      	ldr	r1, [r7, #24]
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	617b      	str	r3, [r7, #20]
   return(result);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e5      	bne.n	80044ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800451e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004520:	2200      	movs	r2, #0
 8004522:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	2b01      	cmp	r3, #1
 800452a:	d106      	bne.n	800453a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800452c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800452e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004530:	4619      	mov	r1, r3
 8004532:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004534:	f7fc fb98 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004538:	e002      	b.n	8004540 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800453a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800453c:	f7ff ff50 	bl	80043e0 <HAL_UART_RxCpltCallback>
}
 8004540:	bf00      	nop
 8004542:	3770      	adds	r7, #112	@ 0x70
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	2b01      	cmp	r3, #1
 8004562:	d108      	bne.n	8004576 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	b29b      	uxth	r3, r3
 800456c:	4619      	mov	r1, r3
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7fc fb7a 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004574:	e002      	b.n	800457c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff ff3c 	bl	80043f4 <HAL_UART_RxHalfCpltCallback>
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b21      	cmp	r3, #33	@ 0x21
 80045b6:	d108      	bne.n	80045ca <UART_DMAError+0x46>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2200      	movs	r2, #0
 80045c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80045c4:	68b8      	ldr	r0, [r7, #8]
 80045c6:	f000 f927 	bl	8004818 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d4:	2b40      	cmp	r3, #64	@ 0x40
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b22      	cmp	r3, #34	@ 0x22
 80045ea:	d108      	bne.n	80045fe <UART_DMAError+0x7a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2200      	movs	r2, #0
 80045f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80045f8:	68b8      	ldr	r0, [r7, #8]
 80045fa:	f000 f935 	bl	8004868 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004602:	f043 0210 	orr.w	r2, r3, #16
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800460a:	68b8      	ldr	r0, [r7, #8]
 800460c:	f7ff fefc 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004628:	e03b      	b.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d037      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fd f945 	bl	80018c0 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	6a3a      	ldr	r2, [r7, #32]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <UART_WaitOnFlagUntilTimeout+0x30>
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e03a      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d023      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b80      	cmp	r3, #128	@ 0x80
 800465e:	d020      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b40      	cmp	r3, #64	@ 0x40
 8004664:	d01d      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b08      	cmp	r3, #8
 8004672:	d116      	bne.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f8ec 	bl	8004868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2208      	movs	r2, #8
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e00f      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4013      	ands	r3, r2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d0b4      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b098      	sub	sp, #96	@ 0x60
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2222      	movs	r2, #34	@ 0x22
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f8:	4a44      	ldr	r2, [pc, #272]	@ (800480c <UART_Start_Receive_DMA+0x140>)
 80046fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	4a43      	ldr	r2, [pc, #268]	@ (8004810 <UART_Start_Receive_DMA+0x144>)
 8004702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004708:	4a42      	ldr	r2, [pc, #264]	@ (8004814 <UART_Start_Receive_DMA+0x148>)
 800470a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	2200      	movs	r2, #0
 8004712:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	88fb      	ldrh	r3, [r7, #6]
 800472c:	f7fd fa64 	bl	8001bf8 <HAL_DMA_Start_IT>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2210      	movs	r2, #16
 800473a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e05d      	b.n	8004804 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d019      	beq.n	800479a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800477c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004786:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004788:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800478c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e5      	bne.n	8004766 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3314      	adds	r3, #20
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3314      	adds	r3, #20
 80047b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80047bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e5      	bne.n	800479a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3314      	adds	r3, #20
 80047d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	617b      	str	r3, [r7, #20]
   return(result);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80047ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80047f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6a39      	ldr	r1, [r7, #32]
 80047f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e5      	bne.n	80047ce <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3760      	adds	r7, #96	@ 0x60
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	0800441d 	.word	0x0800441d
 8004810:	08004549 	.word	0x08004549
 8004814:	08004585 	.word	0x08004585

08004818 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	61ba      	str	r2, [r7, #24]
 8004842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6979      	ldr	r1, [r7, #20]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	613b      	str	r3, [r7, #16]
   return(result);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e5      	bne.n	8004820 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800485c:	bf00      	nop
 800485e:	3724      	adds	r7, #36	@ 0x24
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b095      	sub	sp, #84	@ 0x54
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004890:	643a      	str	r2, [r7, #64]	@ 0x40
 8004892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800489e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d119      	bne.n	8004914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f023 0310 	bic.w	r3, r3, #16
 80048f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004900:	61ba      	str	r2, [r7, #24]
 8004902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6979      	ldr	r1, [r7, #20]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	613b      	str	r3, [r7, #16]
   return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e5      	bne.n	80048e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004922:	bf00      	nop
 8004924:	3754      	adds	r7, #84	@ 0x54
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff fd60 	bl	8004408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b21      	cmp	r3, #33	@ 0x21
 8004962:	d13e      	bne.n	80049e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496c:	d114      	bne.n	8004998 <UART_Transmit_IT+0x48>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d110      	bne.n	8004998 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	1c9a      	adds	r2, r3, #2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]
 8004996:	e008      	b.n	80049aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	1c59      	adds	r1, r3, #1
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6211      	str	r1, [r2, #32]
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4619      	mov	r1, r3
 80049b8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fcdb 	bl	80043cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	@ 0x30
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b22      	cmp	r3, #34	@ 0x22
 8004a3a:	f040 80aa 	bne.w	8004b92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a46:	d115      	bne.n	8004a74 <UART_Receive_IT+0x54>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d111      	bne.n	8004a74 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	1c9a      	adds	r2, r3, #2
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a72:	e024      	b.n	8004abe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a82:	d007      	beq.n	8004a94 <UART_Receive_IT+0x74>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <UART_Receive_IT+0x82>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e008      	b.n	8004ab4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4619      	mov	r1, r3
 8004acc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d15d      	bne.n	8004b8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0220 	bic.w	r2, r2, #32
 8004ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d135      	bne.n	8004b84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f023 0310 	bic.w	r3, r3, #16
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3e:	623a      	str	r2, [r7, #32]
 8004b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	69f9      	ldr	r1, [r7, #28]
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e5      	bne.n	8004b1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d10a      	bne.n	8004b76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fc f873 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
 8004b82:	e002      	b.n	8004b8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff fc2b 	bl	80043e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e002      	b.n	8004b94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3730      	adds	r7, #48	@ 0x30
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba0:	b0c0      	sub	sp, #256	@ 0x100
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	68d9      	ldr	r1, [r3, #12]
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	ea40 0301 	orr.w	r3, r0, r1
 8004bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bf4:	f021 010c 	bic.w	r1, r1, #12
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c02:	430b      	orrs	r3, r1
 8004c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	6999      	ldr	r1, [r3, #24]
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	ea40 0301 	orr.w	r3, r0, r1
 8004c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8004e68 <UART_SetConfig+0x2cc>)
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d005      	beq.n	8004c3c <UART_SetConfig+0xa0>
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b8d      	ldr	r3, [pc, #564]	@ (8004e6c <UART_SetConfig+0x2d0>)
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d104      	bne.n	8004c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c3c:	f7fe f952 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 8004c40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c44:	e003      	b.n	8004c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c46:	f7fe f939 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c58:	f040 810c 	bne.w	8004e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c6e:	4622      	mov	r2, r4
 8004c70:	462b      	mov	r3, r5
 8004c72:	1891      	adds	r1, r2, r2
 8004c74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c76:	415b      	adcs	r3, r3
 8004c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c7e:	4621      	mov	r1, r4
 8004c80:	eb12 0801 	adds.w	r8, r2, r1
 8004c84:	4629      	mov	r1, r5
 8004c86:	eb43 0901 	adc.w	r9, r3, r1
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c9e:	4690      	mov	r8, r2
 8004ca0:	4699      	mov	r9, r3
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	eb18 0303 	adds.w	r3, r8, r3
 8004ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cac:	462b      	mov	r3, r5
 8004cae:	eb49 0303 	adc.w	r3, r9, r3
 8004cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cca:	460b      	mov	r3, r1
 8004ccc:	18db      	adds	r3, r3, r3
 8004cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	eb42 0303 	adc.w	r3, r2, r3
 8004cd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ce0:	f7fb fad6 	bl	8000290 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4b61      	ldr	r3, [pc, #388]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004cea:	fba3 2302 	umull	r2, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	011c      	lsls	r4, r3, #4
 8004cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d04:	4642      	mov	r2, r8
 8004d06:	464b      	mov	r3, r9
 8004d08:	1891      	adds	r1, r2, r2
 8004d0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d0c:	415b      	adcs	r3, r3
 8004d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d14:	4641      	mov	r1, r8
 8004d16:	eb12 0a01 	adds.w	sl, r2, r1
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d34:	4692      	mov	sl, r2
 8004d36:	469b      	mov	fp, r3
 8004d38:	4643      	mov	r3, r8
 8004d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d42:	464b      	mov	r3, r9
 8004d44:	eb4b 0303 	adc.w	r3, fp, r3
 8004d48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d60:	460b      	mov	r3, r1
 8004d62:	18db      	adds	r3, r3, r3
 8004d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d66:	4613      	mov	r3, r2
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d76:	f7fb fa8b 	bl	8000290 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4b3b      	ldr	r3, [pc, #236]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004d82:	fba3 2301 	umull	r2, r3, r3, r1
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2264      	movs	r2, #100	@ 0x64
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	1acb      	subs	r3, r1, r3
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d96:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004d98:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004da4:	441c      	add	r4, r3
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004db0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dc8:	4641      	mov	r1, r8
 8004dca:	1851      	adds	r1, r2, r1
 8004dcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dce:	4649      	mov	r1, r9
 8004dd0:	414b      	adcs	r3, r1
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004de0:	4659      	mov	r1, fp
 8004de2:	00cb      	lsls	r3, r1, #3
 8004de4:	4651      	mov	r1, sl
 8004de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dea:	4651      	mov	r1, sl
 8004dec:	00ca      	lsls	r2, r1, #3
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	4642      	mov	r2, r8
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	460a      	mov	r2, r1
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	18db      	adds	r3, r3, r3
 8004e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e22:	4613      	mov	r3, r2
 8004e24:	eb42 0303 	adc.w	r3, r2, r3
 8004e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e32:	f7fb fa2d 	bl	8000290 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	2164      	movs	r1, #100	@ 0x64
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	3332      	adds	r3, #50	@ 0x32
 8004e4e:	4a08      	ldr	r2, [pc, #32]	@ (8004e70 <UART_SetConfig+0x2d4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f003 0207 	and.w	r2, r3, #7
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4422      	add	r2, r4
 8004e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e64:	e106      	b.n	8005074 <UART_SetConfig+0x4d8>
 8004e66:	bf00      	nop
 8004e68:	40011000 	.word	0x40011000
 8004e6c:	40011400 	.word	0x40011400
 8004e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e86:	4642      	mov	r2, r8
 8004e88:	464b      	mov	r3, r9
 8004e8a:	1891      	adds	r1, r2, r2
 8004e8c:	6239      	str	r1, [r7, #32]
 8004e8e:	415b      	adcs	r3, r3
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e96:	4641      	mov	r1, r8
 8004e98:	1854      	adds	r4, r2, r1
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	eb43 0501 	adc.w	r5, r3, r1
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	00eb      	lsls	r3, r5, #3
 8004eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eae:	00e2      	lsls	r2, r4, #3
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	4643      	mov	r3, r8
 8004eb6:	18e3      	adds	r3, r4, r3
 8004eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	eb45 0303 	adc.w	r3, r5, r3
 8004ec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ed2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	008b      	lsls	r3, r1, #2
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eec:	4621      	mov	r1, r4
 8004eee:	008a      	lsls	r2, r1, #2
 8004ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ef4:	f7fb f9cc 	bl	8000290 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4b60      	ldr	r3, [pc, #384]	@ (8005080 <UART_SetConfig+0x4e4>)
 8004efe:	fba3 2302 	umull	r2, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	011c      	lsls	r4, r3, #4
 8004f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f18:	4642      	mov	r2, r8
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	1891      	adds	r1, r2, r2
 8004f1e:	61b9      	str	r1, [r7, #24]
 8004f20:	415b      	adcs	r3, r3
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f28:	4641      	mov	r1, r8
 8004f2a:	1851      	adds	r1, r2, r1
 8004f2c:	6139      	str	r1, [r7, #16]
 8004f2e:	4649      	mov	r1, r9
 8004f30:	414b      	adcs	r3, r1
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f40:	4659      	mov	r1, fp
 8004f42:	00cb      	lsls	r3, r1, #3
 8004f44:	4651      	mov	r1, sl
 8004f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f4a:	4651      	mov	r1, sl
 8004f4c:	00ca      	lsls	r2, r1, #3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	4642      	mov	r2, r8
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	460a      	mov	r2, r1
 8004f60:	eb42 0303 	adc.w	r3, r2, r3
 8004f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f80:	4649      	mov	r1, r9
 8004f82:	008b      	lsls	r3, r1, #2
 8004f84:	4641      	mov	r1, r8
 8004f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f8a:	4641      	mov	r1, r8
 8004f8c:	008a      	lsls	r2, r1, #2
 8004f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f92:	f7fb f97d 	bl	8000290 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4b38      	ldr	r3, [pc, #224]	@ (8005080 <UART_SetConfig+0x4e4>)
 8004f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	2264      	movs	r2, #100	@ 0x64
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	1acb      	subs	r3, r1, r3
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	3332      	adds	r3, #50	@ 0x32
 8004fb0:	4a33      	ldr	r2, [pc, #204]	@ (8005080 <UART_SetConfig+0x4e4>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fbc:	441c      	add	r4, r3
 8004fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	1891      	adds	r1, r2, r2
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fdc:	4641      	mov	r1, r8
 8004fde:	1851      	adds	r1, r2, r1
 8004fe0:	6039      	str	r1, [r7, #0]
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	414b      	adcs	r3, r1
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	00cb      	lsls	r3, r1, #3
 8004ff8:	4651      	mov	r1, sl
 8004ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffe:	4651      	mov	r1, sl
 8005000:	00ca      	lsls	r2, r1, #3
 8005002:	4610      	mov	r0, r2
 8005004:	4619      	mov	r1, r3
 8005006:	4603      	mov	r3, r0
 8005008:	4642      	mov	r2, r8
 800500a:	189b      	adds	r3, r3, r2
 800500c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800500e:	464b      	mov	r3, r9
 8005010:	460a      	mov	r2, r1
 8005012:	eb42 0303 	adc.w	r3, r2, r3
 8005016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	663b      	str	r3, [r7, #96]	@ 0x60
 8005022:	667a      	str	r2, [r7, #100]	@ 0x64
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005030:	4649      	mov	r1, r9
 8005032:	008b      	lsls	r3, r1, #2
 8005034:	4641      	mov	r1, r8
 8005036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503a:	4641      	mov	r1, r8
 800503c:	008a      	lsls	r2, r1, #2
 800503e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005042:	f7fb f925 	bl	8000290 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <UART_SetConfig+0x4e4>)
 800504c:	fba3 1302 	umull	r1, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	2164      	movs	r1, #100	@ 0x64
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	3332      	adds	r3, #50	@ 0x32
 800505e:	4a08      	ldr	r2, [pc, #32]	@ (8005080 <UART_SetConfig+0x4e4>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f003 020f 	and.w	r2, r3, #15
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4422      	add	r2, r4
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800507a:	46bd      	mov	sp, r7
 800507c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005080:	51eb851f 	.word	0x51eb851f

08005084 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005096:	2b84      	cmp	r3, #132	@ 0x84
 8005098:	d005      	beq.n	80050a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800509a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	3303      	adds	r3, #3
 80050a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050a6:	68fb      	ldr	r3, [r7, #12]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ba:	f3ef 8305 	mrs	r3, IPSR
 80050be:	607b      	str	r3, [r7, #4]
  return(result);
 80050c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050dc:	f001 f942 	bl	8006364 <vTaskStartScheduler>
  
  return osOK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e8:	b089      	sub	sp, #36	@ 0x24
 80050ea:	af04      	add	r7, sp, #16
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d020      	beq.n	800513a <osThreadCreate+0x54>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01c      	beq.n	800513a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685c      	ldr	r4, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691e      	ldr	r6, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff ffb6 	bl	8005084 <makeFreeRtosPriority>
 8005118:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005122:	9202      	str	r2, [sp, #8]
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	9100      	str	r1, [sp, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4632      	mov	r2, r6
 800512c:	4629      	mov	r1, r5
 800512e:	4620      	mov	r0, r4
 8005130:	f000 ff32 	bl	8005f98 <xTaskCreateStatic>
 8005134:	4603      	mov	r3, r0
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e01c      	b.n	8005174 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685c      	ldr	r4, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005146:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff ff98 	bl	8005084 <makeFreeRtosPriority>
 8005154:	4602      	mov	r2, r0
 8005156:	f107 030c 	add.w	r3, r7, #12
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	9200      	str	r2, [sp, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	4632      	mov	r2, r6
 8005162:	4629      	mov	r1, r5
 8005164:	4620      	mov	r0, r4
 8005166:	f000 ff77 	bl	8006058 <xTaskCreate>
 800516a:	4603      	mov	r3, r0
 800516c:	2b01      	cmp	r3, #1
 800516e:	d001      	beq.n	8005174 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800517e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <osDelay+0x16>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	e000      	b.n	8005196 <osDelay+0x18>
 8005194:	2301      	movs	r3, #1
 8005196:	4618      	mov	r0, r3
 8005198:	f001 f8ae 	bl	80062f8 <vTaskDelay>
  
  return osOK;
 800519c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b086      	sub	sp, #24
 80051aa:	af02      	add	r7, sp, #8
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00f      	beq.n	80051d8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10a      	bne.n	80051d4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2203      	movs	r2, #3
 80051c4:	9200      	str	r2, [sp, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	2100      	movs	r1, #0
 80051ca:	2001      	movs	r0, #1
 80051cc:	f000 f9c0 	bl	8005550 <xQueueGenericCreateStatic>
 80051d0:	4603      	mov	r3, r0
 80051d2:	e016      	b.n	8005202 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e014      	b.n	8005202 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d110      	bne.n	8005200 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80051de:	2203      	movs	r2, #3
 80051e0:	2100      	movs	r1, #0
 80051e2:	2001      	movs	r0, #1
 80051e4:	f000 fa31 	bl	800564a <xQueueGenericCreate>
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <osSemaphoreCreate+0x56>
 80051f0:	2300      	movs	r3, #0
 80051f2:	2200      	movs	r2, #0
 80051f4:	2100      	movs	r1, #0
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fa82 	bl	8005700 <xQueueGenericSend>
      return sema;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	e000      	b.n	8005202 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005200:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005220:	2380      	movs	r3, #128	@ 0x80
 8005222:	e03a      	b.n	800529a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d103      	bne.n	8005238 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e009      	b.n	800524c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <osSemaphoreWait+0x40>
      ticks = 1;
 8005248:	2301      	movs	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800524c:	f7ff ff32 	bl	80050b4 <inHandlerMode>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d017      	beq.n	8005286 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005256:	f107 0308 	add.w	r3, r7, #8
 800525a:	461a      	mov	r2, r3
 800525c:	2100      	movs	r1, #0
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fcf0 	bl	8005c44 <xQueueReceiveFromISR>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d001      	beq.n	800526e <osSemaphoreWait+0x62>
      return osErrorOS;
 800526a:	23ff      	movs	r3, #255	@ 0xff
 800526c:	e015      	b.n	800529a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d011      	beq.n	8005298 <osSemaphoreWait+0x8c>
 8005274:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <osSemaphoreWait+0x98>)
 8005276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	e008      	b.n	8005298 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fbcb 	bl	8005a24 <xQueueSemaphoreTake>
 800528e:	4603      	mov	r3, r0
 8005290:	2b01      	cmp	r3, #1
 8005292:	d001      	beq.n	8005298 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005294:	23ff      	movs	r3, #255	@ 0xff
 8005296:	e000      	b.n	800529a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80052b8:	f7ff fefc 	bl	80050b4 <inHandlerMode>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fb1b 	bl	8005904 <xQueueGiveFromISR>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d001      	beq.n	80052d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80052d4:	23ff      	movs	r3, #255	@ 0xff
 80052d6:	e017      	b.n	8005308 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d013      	beq.n	8005306 <osSemaphoreRelease+0x5e>
 80052de:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <osSemaphoreRelease+0x68>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	e00a      	b.n	8005306 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80052f0:	2300      	movs	r3, #0
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fa02 	bl	8005700 <xQueueGenericSend>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d001      	beq.n	8005306 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005302:	23ff      	movs	r3, #255	@ 0xff
 8005304:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f103 0208 	add.w	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f04f 32ff 	mov.w	r2, #4294967295
 800532c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f103 0208 	add.w	r2, r3, #8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f103 0208 	add.w	r2, r3, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d103      	bne.n	80053d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e00c      	b.n	80053f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3308      	adds	r3, #8
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e002      	b.n	80053e4 <vListInsert+0x2e>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d2f6      	bcs.n	80053de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	601a      	str	r2, [r3, #0]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6892      	ldr	r2, [r2, #8]
 800543e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6852      	ldr	r2, [r2, #4]
 8005448:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d103      	bne.n	800545c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	1e5a      	subs	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054a8:	f001 fed6 	bl	8007258 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b4:	68f9      	ldr	r1, [r7, #12]
 80054b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	441a      	add	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d8:	3b01      	subs	r3, #1
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	441a      	add	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	22ff      	movs	r2, #255	@ 0xff
 80054ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	22ff      	movs	r2, #255	@ 0xff
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d114      	bne.n	8005528 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01a      	beq.n	800553c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3310      	adds	r3, #16
 800550a:	4618      	mov	r0, r3
 800550c:	f001 f984 	bl	8006818 <xTaskRemoveFromEventList>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d012      	beq.n	800553c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <xQueueGenericReset+0xd0>)
 8005518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	e009      	b.n	800553c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3310      	adds	r3, #16
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fef1 	bl	8005314 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3324      	adds	r3, #36	@ 0x24
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff feec 	bl	8005314 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800553c:	f001 febe 	bl	80072bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005540:	2301      	movs	r3, #1
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08e      	sub	sp, #56	@ 0x38
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	e7fd      	b.n	8005596 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <xQueueGenericCreateStatic+0x56>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <xQueueGenericCreateStatic+0x5a>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <xQueueGenericCreateStatic+0x5c>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	623b      	str	r3, [r7, #32]
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <xQueueGenericCreateStatic+0x84>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <xQueueGenericCreateStatic+0x88>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <xQueueGenericCreateStatic+0x8a>
 80055d8:	2300      	movs	r3, #0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	61fb      	str	r3, [r7, #28]
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055f6:	2348      	movs	r3, #72	@ 0x48
 80055f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b48      	cmp	r3, #72	@ 0x48
 80055fe:	d00b      	beq.n	8005618 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	61bb      	str	r3, [r7, #24]
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005618:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800561e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800562c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f840 	bl	80056c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005642:	4618      	mov	r0, r3
 8005644:	3730      	adds	r7, #48	@ 0x30
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800564a:	b580      	push	{r7, lr}
 800564c:	b08a      	sub	sp, #40	@ 0x28
 800564e:	af02      	add	r7, sp, #8
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	4613      	mov	r3, r2
 8005656:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <xQueueGenericCreate+0x2c>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	613b      	str	r3, [r7, #16]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	fb02 f303 	mul.w	r3, r2, r3
 800567e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3348      	adds	r3, #72	@ 0x48
 8005684:	4618      	mov	r0, r3
 8005686:	f001 ff09 	bl	800749c <pvPortMalloc>
 800568a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	3348      	adds	r3, #72	@ 0x48
 800569a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056a4:	79fa      	ldrb	r2, [r7, #7]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	4613      	mov	r3, r2
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f805 	bl	80056c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056b6:	69bb      	ldr	r3, [r7, #24]
	}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	e002      	b.n	80056e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056ee:	2101      	movs	r1, #1
 80056f0:	69b8      	ldr	r0, [r7, #24]
 80056f2:	f7ff fec3 	bl	800547c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08e      	sub	sp, #56	@ 0x38
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800570e:	2300      	movs	r3, #0
 8005710:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <xQueueGenericSend+0x34>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <xQueueGenericSend+0x42>
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <xQueueGenericSend+0x46>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <xQueueGenericSend+0x48>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <xQueueGenericSend+0x64>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d103      	bne.n	8005772 <xQueueGenericSend+0x72>
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <xQueueGenericSend+0x76>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <xQueueGenericSend+0x78>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10b      	bne.n	8005794 <xQueueGenericSend+0x94>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	623b      	str	r3, [r7, #32]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005794:	f001 fa06 	bl	8006ba4 <xTaskGetSchedulerState>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d102      	bne.n	80057a4 <xQueueGenericSend+0xa4>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <xQueueGenericSend+0xa8>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <xQueueGenericSend+0xaa>
 80057a8:	2300      	movs	r3, #0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	61fb      	str	r3, [r7, #28]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057c6:	f001 fd47 	bl	8007258 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <xQueueGenericSend+0xdc>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d129      	bne.n	8005830 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057e2:	f000 fac9 	bl	8005d78 <prvCopyDataToQueue>
 80057e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d010      	beq.n	8005812 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	3324      	adds	r3, #36	@ 0x24
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f80f 	bl	8006818 <xTaskRemoveFromEventList>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d013      	beq.n	8005828 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005800:	4b3f      	ldr	r3, [pc, #252]	@ (8005900 <xQueueGenericSend+0x200>)
 8005802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	e00a      	b.n	8005828 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005818:	4b39      	ldr	r3, [pc, #228]	@ (8005900 <xQueueGenericSend+0x200>)
 800581a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005828:	f001 fd48 	bl	80072bc <vPortExitCritical>
				return pdPASS;
 800582c:	2301      	movs	r3, #1
 800582e:	e063      	b.n	80058f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d103      	bne.n	800583e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005836:	f001 fd41 	bl	80072bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800583a:	2300      	movs	r3, #0
 800583c:	e05c      	b.n	80058f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800583e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005844:	f107 0314 	add.w	r3, r7, #20
 8005848:	4618      	mov	r0, r3
 800584a:	f001 f849 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800584e:	2301      	movs	r3, #1
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005852:	f001 fd33 	bl	80072bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005856:	f000 fdef 	bl	8006438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800585a:	f001 fcfd 	bl	8007258 <vPortEnterCritical>
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005864:	b25b      	sxtb	r3, r3
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d103      	bne.n	8005874 <xQueueGenericSend+0x174>
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800587a:	b25b      	sxtb	r3, r3
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d103      	bne.n	800588a <xQueueGenericSend+0x18a>
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800588a:	f001 fd17 	bl	80072bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800588e:	1d3a      	adds	r2, r7, #4
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f001 f838 	bl	800690c <xTaskCheckForTimeOut>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d124      	bne.n	80058ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058a4:	f000 fb60 	bl	8005f68 <prvIsQueueFull>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	3310      	adds	r3, #16
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4611      	mov	r1, r2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 ff88 	bl	80067cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058be:	f000 faeb 	bl	8005e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058c2:	f000 fdc7 	bl	8006454 <xTaskResumeAll>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f47f af7c 	bne.w	80057c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80058ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005900 <xQueueGenericSend+0x200>)
 80058d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	e772      	b.n	80057c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058e2:	f000 fad9 	bl	8005e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058e6:	f000 fdb5 	bl	8006454 <xTaskResumeAll>
 80058ea:	e76c      	b.n	80057c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ee:	f000 fad3 	bl	8005e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f2:	f000 fdaf 	bl	8006454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3738      	adds	r7, #56	@ 0x38
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08e      	sub	sp, #56	@ 0x38
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10b      	bne.n	8005930 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	623b      	str	r3, [r7, #32]
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	e7fd      	b.n	800592c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00b      	beq.n	8005950 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	61fb      	str	r3, [r7, #28]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <xQueueGiveFromISR+0x5c>
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <xQueueGiveFromISR+0x60>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <xQueueGiveFromISR+0x62>
 8005964:	2300      	movs	r3, #0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10b      	bne.n	8005982 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	61bb      	str	r3, [r7, #24]
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	e7fd      	b.n	800597e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005982:	f001 fd49 	bl	8007418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005986:	f3ef 8211 	mrs	r2, BASEPRI
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	617a      	str	r2, [r7, #20]
 800599c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800599e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d22b      	bcs.n	8005a0a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d112      	bne.n	80059f4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d016      	beq.n	8005a04 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d8:	3324      	adds	r3, #36	@ 0x24
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 ff1c 	bl	8006818 <xTaskRemoveFromEventList>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00e      	beq.n	8005a04 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e007      	b.n	8005a04 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059f8:	3301      	adds	r3, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	b25a      	sxtb	r2, r3
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a08:	e001      	b.n	8005a0e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a10:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3738      	adds	r7, #56	@ 0x38
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08e      	sub	sp, #56	@ 0x38
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10b      	bne.n	8005a58 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	623b      	str	r3, [r7, #32]
}
 8005a52:	bf00      	nop
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61fb      	str	r3, [r7, #28]
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	e7fd      	b.n	8005a74 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a78:	f001 f894 	bl	8006ba4 <xTaskGetSchedulerState>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <xQueueSemaphoreTake+0x64>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <xQueueSemaphoreTake+0x68>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <xQueueSemaphoreTake+0x6a>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	61bb      	str	r3, [r7, #24]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aaa:	f001 fbd5 	bl	8007258 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d024      	beq.n	8005b04 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005aca:	f001 fa17 	bl	8006efc <pvTaskIncrementMutexHeldCount>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00f      	beq.n	8005afc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	3310      	adds	r3, #16
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fe99 	bl	8006818 <xTaskRemoveFromEventList>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005aec:	4b54      	ldr	r3, [pc, #336]	@ (8005c40 <xQueueSemaphoreTake+0x21c>)
 8005aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005afc:	f001 fbde 	bl	80072bc <vPortExitCritical>
				return pdPASS;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e098      	b.n	8005c36 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d112      	bne.n	8005b30 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	617b      	str	r3, [r7, #20]
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	e7fd      	b.n	8005b24 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b28:	f001 fbc8 	bl	80072bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e082      	b.n	8005c36 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b36:	f107 030c 	add.w	r3, r7, #12
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fed0 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b44:	f001 fbba 	bl	80072bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b48:	f000 fc76 	bl	8006438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b4c:	f001 fb84 	bl	8007258 <vPortEnterCritical>
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b56:	b25b      	sxtb	r3, r3
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d103      	bne.n	8005b66 <xQueueSemaphoreTake+0x142>
 8005b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b6c:	b25b      	sxtb	r3, r3
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d103      	bne.n	8005b7c <xQueueSemaphoreTake+0x158>
 8005b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b7c:	f001 fb9e 	bl	80072bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b80:	463a      	mov	r2, r7
 8005b82:	f107 030c 	add.w	r3, r7, #12
 8005b86:	4611      	mov	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 febf 	bl	800690c <xTaskCheckForTimeOut>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d132      	bne.n	8005bfa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b96:	f000 f9d1 	bl	8005f3c <prvIsQueueEmpty>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d026      	beq.n	8005bee <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005ba8:	f001 fb56 	bl	8007258 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 f815 	bl	8006be0 <xTaskPriorityInherit>
 8005bb6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005bb8:	f001 fb80 	bl	80072bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	3324      	adds	r3, #36	@ 0x24
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fe01 	bl	80067cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bcc:	f000 f964 	bl	8005e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bd0:	f000 fc40 	bl	8006454 <xTaskResumeAll>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f47f af67 	bne.w	8005aaa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005bdc:	4b18      	ldr	r3, [pc, #96]	@ (8005c40 <xQueueSemaphoreTake+0x21c>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	e75d      	b.n	8005aaa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bf0:	f000 f952 	bl	8005e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bf4:	f000 fc2e 	bl	8006454 <xTaskResumeAll>
 8005bf8:	e757      	b.n	8005aaa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bfc:	f000 f94c 	bl	8005e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c00:	f000 fc28 	bl	8006454 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c06:	f000 f999 	bl	8005f3c <prvIsQueueEmpty>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f43f af4c 	beq.w	8005aaa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00d      	beq.n	8005c34 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c18:	f001 fb1e 	bl	8007258 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c1e:	f000 f893 	bl	8005d48 <prvGetDisinheritPriorityAfterTimeout>
 8005c22:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 f8d6 	bl	8006ddc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c30:	f001 fb44 	bl	80072bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3738      	adds	r7, #56	@ 0x38
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08e      	sub	sp, #56	@ 0x38
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	623b      	str	r3, [r7, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	e7fd      	b.n	8005c6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <xQueueReceiveFromISR+0x3c>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <xQueueReceiveFromISR+0x40>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <xQueueReceiveFromISR+0x42>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	61fb      	str	r3, [r7, #28]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ca2:	f001 fbb9 	bl	8007418 <vPortValidateInterruptPriority>
	__asm volatile
 8005ca6:	f3ef 8211 	mrs	r2, BASEPRI
 8005caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	61ba      	str	r2, [r7, #24]
 8005cbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005cbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d02f      	beq.n	8005d2e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cdc:	f000 f8b6 	bl	8005e4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	1e5a      	subs	r2, r3, #1
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ce8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d112      	bne.n	8005d18 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	3310      	adds	r3, #16
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fd8a 	bl	8006818 <xTaskRemoveFromEventList>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00e      	beq.n	8005d28 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e007      	b.n	8005d28 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	b25a      	sxtb	r2, r3
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d2c:	e001      	b.n	8005d32 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f383 8811 	msr	BASEPRI, r3
}
 8005d3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3738      	adds	r7, #56	@ 0x38
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d006      	beq.n	8005d66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1c3 0307 	rsb	r3, r3, #7
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e001      	b.n	8005d6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
	}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d14d      	bne.n	8005e3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 ff92 	bl	8006ccc <xTaskPriorityDisinherit>
 8005da8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	e043      	b.n	8005e3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d119      	bne.n	8005dec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6858      	ldr	r0, [r3, #4]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	f002 f82d 	bl	8007e22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	441a      	add	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d32b      	bcc.n	8005e3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	e026      	b.n	8005e3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68d8      	ldr	r0, [r3, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	461a      	mov	r2, r3
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	f002 f813 	bl	8007e22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e04:	425b      	negs	r3, r3
 8005e06:	441a      	add	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d207      	bcs.n	8005e28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	425b      	negs	r3, r3
 8005e22:	441a      	add	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d105      	bne.n	8005e3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e42:	697b      	ldr	r3, [r7, #20]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d018      	beq.n	8005e90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	441a      	add	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d303      	bcc.n	8005e80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68d9      	ldr	r1, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f001 ffc9 	bl	8007e22 <memcpy>
	}
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ea0:	f001 f9da 	bl	8007258 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eac:	e011      	b.n	8005ed2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d012      	beq.n	8005edc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3324      	adds	r3, #36	@ 0x24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fcac 	bl	8006818 <xTaskRemoveFromEventList>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ec6:	f000 fd85 	bl	80069d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	dce9      	bgt.n	8005eae <prvUnlockQueue+0x16>
 8005eda:	e000      	b.n	8005ede <prvUnlockQueue+0x46>
					break;
 8005edc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	22ff      	movs	r2, #255	@ 0xff
 8005ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005ee6:	f001 f9e9 	bl	80072bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eea:	f001 f9b5 	bl	8007258 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ef4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ef6:	e011      	b.n	8005f1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d012      	beq.n	8005f26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3310      	adds	r3, #16
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fc87 	bl	8006818 <xTaskRemoveFromEventList>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f10:	f000 fd60 	bl	80069d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dce9      	bgt.n	8005ef8 <prvUnlockQueue+0x60>
 8005f24:	e000      	b.n	8005f28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	22ff      	movs	r2, #255	@ 0xff
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f30:	f001 f9c4 	bl	80072bc <vPortExitCritical>
}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f44:	f001 f988 	bl	8007258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e001      	b.n	8005f5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f5a:	f001 f9af 	bl	80072bc <vPortExitCritical>

	return xReturn;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f70:	f001 f972 	bl	8007258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d102      	bne.n	8005f86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f80:	2301      	movs	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e001      	b.n	8005f8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f8a:	f001 f997 	bl	80072bc <vPortExitCritical>

	return xReturn;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08e      	sub	sp, #56	@ 0x38
 8005f9c:	af04      	add	r7, sp, #16
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	623b      	str	r3, [r7, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	61fb      	str	r3, [r7, #28]
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fe2:	23a0      	movs	r3, #160	@ 0xa0
 8005fe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2ba0      	cmp	r3, #160	@ 0xa0
 8005fea:	d00b      	beq.n	8006004 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	61bb      	str	r3, [r7, #24]
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006004:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01e      	beq.n	800604a <xTaskCreateStatic+0xb2>
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01b      	beq.n	800604a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800601a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	2202      	movs	r2, #2
 8006020:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006024:	2300      	movs	r3, #0
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	9302      	str	r3, [sp, #8]
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f851 	bl	80060e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006042:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006044:	f000 f8ee 	bl	8006224 <prvAddNewTaskToReadyList>
 8006048:	e001      	b.n	800604e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800604e:	697b      	ldr	r3, [r7, #20]
	}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	@ 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	@ 0x30
 800605c:	af04      	add	r7, sp, #16
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fa15 	bl	800749c <pvPortMalloc>
 8006072:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800607a:	20a0      	movs	r0, #160	@ 0xa0
 800607c:	f001 fa0e 	bl	800749c <pvPortMalloc>
 8006080:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	631a      	str	r2, [r3, #48]	@ 0x30
 800608e:	e005      	b.n	800609c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006090:	6978      	ldr	r0, [r7, #20]
 8006092:	f001 fad1 	bl	8007638 <vPortFree>
 8006096:	e001      	b.n	800609c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d017      	beq.n	80060d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9303      	str	r3, [sp, #12]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f80f 	bl	80060e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060c6:	69f8      	ldr	r0, [r7, #28]
 80060c8:	f000 f8ac 	bl	8006224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060cc:	2301      	movs	r3, #1
 80060ce:	61bb      	str	r3, [r7, #24]
 80060d0:	e002      	b.n	80060d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295
 80060d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060d8:	69bb      	ldr	r3, [r7, #24]
	}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060fc:	3b01      	subs	r3, #1
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f023 0307 	bic.w	r3, r3, #7
 800610a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	617b      	str	r3, [r7, #20]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01f      	beq.n	8006174 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	e012      	b.n	8006160 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	7819      	ldrb	r1, [r3, #0]
 8006142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	3334      	adds	r3, #52	@ 0x34
 800614a:	460a      	mov	r2, r1
 800614c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d006      	beq.n	8006168 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3301      	adds	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b0f      	cmp	r3, #15
 8006164:	d9e9      	bls.n	800613a <prvInitialiseNewTask+0x56>
 8006166:	e000      	b.n	800616a <prvInitialiseNewTask+0x86>
			{
				break;
 8006168:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006172:	e003      	b.n	800617c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	2b06      	cmp	r3, #6
 8006180:	d901      	bls.n	8006186 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006182:	2306      	movs	r3, #6
 8006184:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800618a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006190:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	2200      	movs	r2, #0
 8006196:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	3304      	adds	r3, #4
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff f8d9 	bl	8005354 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	3318      	adds	r3, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff f8d4 	bl	8005354 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b4:	f1c3 0207 	rsb	r2, r3, #7
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	334c      	adds	r3, #76	@ 0x4c
 80061d6:	224c      	movs	r2, #76	@ 0x4c
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fceb 	bl	8007bb6 <memset>
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006218 <prvInitialiseNewTask+0x134>)
 80061e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	4a0c      	ldr	r2, [pc, #48]	@ (800621c <prvInitialiseNewTask+0x138>)
 80061ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006220 <prvInitialiseNewTask+0x13c>)
 80061f0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	68f9      	ldr	r1, [r7, #12]
 80061f6:	69b8      	ldr	r0, [r7, #24]
 80061f8:	f000 fefa 	bl	8006ff0 <pxPortInitialiseStack>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800620e:	bf00      	nop
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	200043c8 	.word	0x200043c8
 800621c:	20004430 	.word	0x20004430
 8006220:	20004498 	.word	0x20004498

08006224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800622c:	f001 f814 	bl	8007258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006230:	4b2a      	ldr	r3, [pc, #168]	@ (80062dc <prvAddNewTaskToReadyList+0xb8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	4a29      	ldr	r2, [pc, #164]	@ (80062dc <prvAddNewTaskToReadyList+0xb8>)
 8006238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800623a:	4b29      	ldr	r3, [pc, #164]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006242:	4a27      	ldr	r2, [pc, #156]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006248:	4b24      	ldr	r3, [pc, #144]	@ (80062dc <prvAddNewTaskToReadyList+0xb8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d110      	bne.n	8006272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006250:	f000 fbe4 	bl	8006a1c <prvInitialiseTaskLists>
 8006254:	e00d      	b.n	8006272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006256:	4b23      	ldr	r3, [pc, #140]	@ (80062e4 <prvAddNewTaskToReadyList+0xc0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800625e:	4b20      	ldr	r3, [pc, #128]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	429a      	cmp	r2, r3
 800626a:	d802      	bhi.n	8006272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800626c:	4a1c      	ldr	r2, [pc, #112]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006272:	4b1d      	ldr	r3, [pc, #116]	@ (80062e8 <prvAddNewTaskToReadyList+0xc4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <prvAddNewTaskToReadyList+0xc4>)
 800627a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	2201      	movs	r2, #1
 8006282:	409a      	lsls	r2, r3
 8006284:	4b19      	ldr	r3, [pc, #100]	@ (80062ec <prvAddNewTaskToReadyList+0xc8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4313      	orrs	r3, r2
 800628a:	4a18      	ldr	r2, [pc, #96]	@ (80062ec <prvAddNewTaskToReadyList+0xc8>)
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4a15      	ldr	r2, [pc, #84]	@ (80062f0 <prvAddNewTaskToReadyList+0xcc>)
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f7ff f862 	bl	800536e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062aa:	f001 f807 	bl	80072bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <prvAddNewTaskToReadyList+0xc0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062b6:	4b0a      	ldr	r3, [pc, #40]	@ (80062e0 <prvAddNewTaskToReadyList+0xbc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d207      	bcs.n	80062d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062c4:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <prvAddNewTaskToReadyList+0xd0>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000774 	.word	0x20000774
 80062e0:	20000674 	.word	0x20000674
 80062e4:	20000780 	.word	0x20000780
 80062e8:	20000790 	.word	0x20000790
 80062ec:	2000077c 	.word	0x2000077c
 80062f0:	20000678 	.word	0x20000678
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800630a:	4b14      	ldr	r3, [pc, #80]	@ (800635c <vTaskDelay+0x64>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <vTaskDelay+0x32>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	60bb      	str	r3, [r7, #8]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800632a:	f000 f885 	bl	8006438 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800632e:	2100      	movs	r1, #0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fdf7 	bl	8006f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006336:	f000 f88d 	bl	8006454 <xTaskResumeAll>
 800633a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d107      	bne.n	8006352 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006342:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <vTaskDelay+0x68>)
 8006344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	2000079c 	.word	0x2000079c
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006372:	463a      	mov	r2, r7
 8006374:	1d39      	adds	r1, r7, #4
 8006376:	f107 0308 	add.w	r3, r7, #8
 800637a:	4618      	mov	r0, r3
 800637c:	f7fa f91e 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	9202      	str	r2, [sp, #8]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	460a      	mov	r2, r1
 8006392:	4921      	ldr	r1, [pc, #132]	@ (8006418 <vTaskStartScheduler+0xb4>)
 8006394:	4821      	ldr	r0, [pc, #132]	@ (800641c <vTaskStartScheduler+0xb8>)
 8006396:	f7ff fdff 	bl	8005f98 <xTaskCreateStatic>
 800639a:	4603      	mov	r3, r0
 800639c:	4a20      	ldr	r2, [pc, #128]	@ (8006420 <vTaskStartScheduler+0xbc>)
 800639e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006420 <vTaskStartScheduler+0xbc>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063a8:	2301      	movs	r3, #1
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e001      	b.n	80063b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d11b      	bne.n	80063f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	613b      	str	r3, [r7, #16]
}
 80063ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063cc:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <vTaskStartScheduler+0xc0>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	334c      	adds	r3, #76	@ 0x4c
 80063d2:	4a15      	ldr	r2, [pc, #84]	@ (8006428 <vTaskStartScheduler+0xc4>)
 80063d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063d6:	4b15      	ldr	r3, [pc, #84]	@ (800642c <vTaskStartScheduler+0xc8>)
 80063d8:	f04f 32ff 	mov.w	r2, #4294967295
 80063dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063de:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <vTaskStartScheduler+0xcc>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063e4:	4b13      	ldr	r3, [pc, #76]	@ (8006434 <vTaskStartScheduler+0xd0>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063ea:	f000 fe91 	bl	8007110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063ee:	e00f      	b.n	8006410 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d10b      	bne.n	8006410 <vTaskStartScheduler+0xac>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60fb      	str	r3, [r7, #12]
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <vTaskStartScheduler+0xa8>
}
 8006410:	bf00      	nop
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	08008c00 	.word	0x08008c00
 800641c:	080069ed 	.word	0x080069ed
 8006420:	20000798 	.word	0x20000798
 8006424:	20000674 	.word	0x20000674
 8006428:	2000001c 	.word	0x2000001c
 800642c:	20000794 	.word	0x20000794
 8006430:	20000780 	.word	0x20000780
 8006434:	20000778 	.word	0x20000778

08006438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800643c:	4b04      	ldr	r3, [pc, #16]	@ (8006450 <vTaskSuspendAll+0x18>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	4a03      	ldr	r2, [pc, #12]	@ (8006450 <vTaskSuspendAll+0x18>)
 8006444:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006446:	bf00      	nop
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	2000079c 	.word	0x2000079c

08006454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006462:	4b42      	ldr	r3, [pc, #264]	@ (800656c <xTaskResumeAll+0x118>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <xTaskResumeAll+0x2e>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	603b      	str	r3, [r7, #0]
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	e7fd      	b.n	800647e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006482:	f000 fee9 	bl	8007258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006486:	4b39      	ldr	r3, [pc, #228]	@ (800656c <xTaskResumeAll+0x118>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3b01      	subs	r3, #1
 800648c:	4a37      	ldr	r2, [pc, #220]	@ (800656c <xTaskResumeAll+0x118>)
 800648e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006490:	4b36      	ldr	r3, [pc, #216]	@ (800656c <xTaskResumeAll+0x118>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d161      	bne.n	800655c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006498:	4b35      	ldr	r3, [pc, #212]	@ (8006570 <xTaskResumeAll+0x11c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d05d      	beq.n	800655c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064a0:	e02e      	b.n	8006500 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a2:	4b34      	ldr	r3, [pc, #208]	@ (8006574 <xTaskResumeAll+0x120>)
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3318      	adds	r3, #24
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe ffba 	bl	8005428 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe ffb5 	bl	8005428 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c2:	2201      	movs	r2, #1
 80064c4:	409a      	lsls	r2, r3
 80064c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006578 <xTaskResumeAll+0x124>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006578 <xTaskResumeAll+0x124>)
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4a27      	ldr	r2, [pc, #156]	@ (800657c <xTaskResumeAll+0x128>)
 80064de:	441a      	add	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f7fe ff41 	bl	800536e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f0:	4b23      	ldr	r3, [pc, #140]	@ (8006580 <xTaskResumeAll+0x12c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064fa:	4b22      	ldr	r3, [pc, #136]	@ (8006584 <xTaskResumeAll+0x130>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006500:	4b1c      	ldr	r3, [pc, #112]	@ (8006574 <xTaskResumeAll+0x120>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1cc      	bne.n	80064a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800650e:	f000 fb29 	bl	8006b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006512:	4b1d      	ldr	r3, [pc, #116]	@ (8006588 <xTaskResumeAll+0x134>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d010      	beq.n	8006540 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800651e:	f000 f837 	bl	8006590 <xTaskIncrementTick>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006528:	4b16      	ldr	r3, [pc, #88]	@ (8006584 <xTaskResumeAll+0x130>)
 800652a:	2201      	movs	r2, #1
 800652c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3b01      	subs	r3, #1
 8006532:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f1      	bne.n	800651e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800653a:	4b13      	ldr	r3, [pc, #76]	@ (8006588 <xTaskResumeAll+0x134>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006540:	4b10      	ldr	r3, [pc, #64]	@ (8006584 <xTaskResumeAll+0x130>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d009      	beq.n	800655c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800654c:	4b0f      	ldr	r3, [pc, #60]	@ (800658c <xTaskResumeAll+0x138>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800655c:	f000 feae 	bl	80072bc <vPortExitCritical>

	return xAlreadyYielded;
 8006560:	68bb      	ldr	r3, [r7, #8]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	2000079c 	.word	0x2000079c
 8006570:	20000774 	.word	0x20000774
 8006574:	20000734 	.word	0x20000734
 8006578:	2000077c 	.word	0x2000077c
 800657c:	20000678 	.word	0x20000678
 8006580:	20000674 	.word	0x20000674
 8006584:	20000788 	.word	0x20000788
 8006588:	20000784 	.word	0x20000784
 800658c:	e000ed04 	.word	0xe000ed04

08006590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800659a:	4b4f      	ldr	r3, [pc, #316]	@ (80066d8 <xTaskIncrementTick+0x148>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 808f 	bne.w	80066c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065a4:	4b4d      	ldr	r3, [pc, #308]	@ (80066dc <xTaskIncrementTick+0x14c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065ac:	4a4b      	ldr	r2, [pc, #300]	@ (80066dc <xTaskIncrementTick+0x14c>)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d121      	bne.n	80065fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065b8:	4b49      	ldr	r3, [pc, #292]	@ (80066e0 <xTaskIncrementTick+0x150>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <xTaskIncrementTick+0x4a>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	603b      	str	r3, [r7, #0]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <xTaskIncrementTick+0x46>
 80065da:	4b41      	ldr	r3, [pc, #260]	@ (80066e0 <xTaskIncrementTick+0x150>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	4b40      	ldr	r3, [pc, #256]	@ (80066e4 <xTaskIncrementTick+0x154>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a3e      	ldr	r2, [pc, #248]	@ (80066e0 <xTaskIncrementTick+0x150>)
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	4a3e      	ldr	r2, [pc, #248]	@ (80066e4 <xTaskIncrementTick+0x154>)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	4b3e      	ldr	r3, [pc, #248]	@ (80066e8 <xTaskIncrementTick+0x158>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3301      	adds	r3, #1
 80065f4:	4a3c      	ldr	r2, [pc, #240]	@ (80066e8 <xTaskIncrementTick+0x158>)
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	f000 fab4 	bl	8006b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065fc:	4b3b      	ldr	r3, [pc, #236]	@ (80066ec <xTaskIncrementTick+0x15c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	429a      	cmp	r2, r3
 8006604:	d348      	bcc.n	8006698 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006606:	4b36      	ldr	r3, [pc, #216]	@ (80066e0 <xTaskIncrementTick+0x150>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d104      	bne.n	800661a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006610:	4b36      	ldr	r3, [pc, #216]	@ (80066ec <xTaskIncrementTick+0x15c>)
 8006612:	f04f 32ff 	mov.w	r2, #4294967295
 8006616:	601a      	str	r2, [r3, #0]
					break;
 8006618:	e03e      	b.n	8006698 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800661a:	4b31      	ldr	r3, [pc, #196]	@ (80066e0 <xTaskIncrementTick+0x150>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	d203      	bcs.n	800663a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006632:	4a2e      	ldr	r2, [pc, #184]	@ (80066ec <xTaskIncrementTick+0x15c>)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006638:	e02e      	b.n	8006698 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	3304      	adds	r3, #4
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe fef2 	bl	8005428 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d004      	beq.n	8006656 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	3318      	adds	r3, #24
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fee9 	bl	8005428 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	2201      	movs	r2, #1
 800665c:	409a      	lsls	r2, r3
 800665e:	4b24      	ldr	r3, [pc, #144]	@ (80066f0 <xTaskIncrementTick+0x160>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4313      	orrs	r3, r2
 8006664:	4a22      	ldr	r2, [pc, #136]	@ (80066f0 <xTaskIncrementTick+0x160>)
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4a1f      	ldr	r2, [pc, #124]	@ (80066f4 <xTaskIncrementTick+0x164>)
 8006676:	441a      	add	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7fe fe75 	bl	800536e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006688:	4b1b      	ldr	r3, [pc, #108]	@ (80066f8 <xTaskIncrementTick+0x168>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668e:	429a      	cmp	r2, r3
 8006690:	d3b9      	bcc.n	8006606 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006696:	e7b6      	b.n	8006606 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006698:	4b17      	ldr	r3, [pc, #92]	@ (80066f8 <xTaskIncrementTick+0x168>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669e:	4915      	ldr	r1, [pc, #84]	@ (80066f4 <xTaskIncrementTick+0x164>)
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d901      	bls.n	80066b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066b4:	4b11      	ldr	r3, [pc, #68]	@ (80066fc <xTaskIncrementTick+0x16c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066bc:	2301      	movs	r3, #1
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e004      	b.n	80066cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006700 <xTaskIncrementTick+0x170>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006700 <xTaskIncrementTick+0x170>)
 80066ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066cc:	697b      	ldr	r3, [r7, #20]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2000079c 	.word	0x2000079c
 80066dc:	20000778 	.word	0x20000778
 80066e0:	2000072c 	.word	0x2000072c
 80066e4:	20000730 	.word	0x20000730
 80066e8:	2000078c 	.word	0x2000078c
 80066ec:	20000794 	.word	0x20000794
 80066f0:	2000077c 	.word	0x2000077c
 80066f4:	20000678 	.word	0x20000678
 80066f8:	20000674 	.word	0x20000674
 80066fc:	20000788 	.word	0x20000788
 8006700:	20000784 	.word	0x20000784

08006704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800670a:	4b2a      	ldr	r3, [pc, #168]	@ (80067b4 <vTaskSwitchContext+0xb0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006712:	4b29      	ldr	r3, [pc, #164]	@ (80067b8 <vTaskSwitchContext+0xb4>)
 8006714:	2201      	movs	r2, #1
 8006716:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006718:	e045      	b.n	80067a6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800671a:	4b27      	ldr	r3, [pc, #156]	@ (80067b8 <vTaskSwitchContext+0xb4>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006720:	4b26      	ldr	r3, [pc, #152]	@ (80067bc <vTaskSwitchContext+0xb8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	fab3 f383 	clz	r3, r3
 800672c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	f1c3 031f 	rsb	r3, r3, #31
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	4922      	ldr	r1, [pc, #136]	@ (80067c0 <vTaskSwitchContext+0xbc>)
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <vTaskSwitchContext+0x5e>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	607b      	str	r3, [r7, #4]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <vTaskSwitchContext+0x5a>
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4a14      	ldr	r2, [pc, #80]	@ (80067c0 <vTaskSwitchContext+0xbc>)
 800676e:	4413      	add	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	605a      	str	r2, [r3, #4]
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3308      	adds	r3, #8
 8006784:	429a      	cmp	r2, r3
 8006786:	d104      	bne.n	8006792 <vTaskSwitchContext+0x8e>
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4a0a      	ldr	r2, [pc, #40]	@ (80067c4 <vTaskSwitchContext+0xc0>)
 800679a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800679c:	4b09      	ldr	r3, [pc, #36]	@ (80067c4 <vTaskSwitchContext+0xc0>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	334c      	adds	r3, #76	@ 0x4c
 80067a2:	4a09      	ldr	r2, [pc, #36]	@ (80067c8 <vTaskSwitchContext+0xc4>)
 80067a4:	6013      	str	r3, [r2, #0]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	2000079c 	.word	0x2000079c
 80067b8:	20000788 	.word	0x20000788
 80067bc:	2000077c 	.word	0x2000077c
 80067c0:	20000678 	.word	0x20000678
 80067c4:	20000674 	.word	0x20000674
 80067c8:	2000001c 	.word	0x2000001c

080067cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	60fb      	str	r3, [r7, #12]
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	e7fd      	b.n	80067f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f4:	4b07      	ldr	r3, [pc, #28]	@ (8006814 <vTaskPlaceOnEventList+0x48>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3318      	adds	r3, #24
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7fe fdda 	bl	80053b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006802:	2101      	movs	r1, #1
 8006804:	6838      	ldr	r0, [r7, #0]
 8006806:	f000 fb8d 	bl	8006f24 <prvAddCurrentTaskToDelayedList>
}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000674 	.word	0x20000674

08006818 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60fb      	str	r3, [r7, #12]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	3318      	adds	r3, #24
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fdec 	bl	8005428 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006850:	4b1d      	ldr	r3, [pc, #116]	@ (80068c8 <xTaskRemoveFromEventList+0xb0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d11c      	bne.n	8006892 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3304      	adds	r3, #4
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe fde3 	bl	8005428 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	2201      	movs	r2, #1
 8006868:	409a      	lsls	r2, r3
 800686a:	4b18      	ldr	r3, [pc, #96]	@ (80068cc <xTaskRemoveFromEventList+0xb4>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4313      	orrs	r3, r2
 8006870:	4a16      	ldr	r2, [pc, #88]	@ (80068cc <xTaskRemoveFromEventList+0xb4>)
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4a13      	ldr	r2, [pc, #76]	@ (80068d0 <xTaskRemoveFromEventList+0xb8>)
 8006882:	441a      	add	r2, r3
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7fe fd6f 	bl	800536e <vListInsertEnd>
 8006890:	e005      	b.n	800689e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3318      	adds	r3, #24
 8006896:	4619      	mov	r1, r3
 8006898:	480e      	ldr	r0, [pc, #56]	@ (80068d4 <xTaskRemoveFromEventList+0xbc>)
 800689a:	f7fe fd68 	bl	800536e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a2:	4b0d      	ldr	r3, [pc, #52]	@ (80068d8 <xTaskRemoveFromEventList+0xc0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d905      	bls.n	80068b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068b0:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <xTaskRemoveFromEventList+0xc4>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e001      	b.n	80068bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068bc:	697b      	ldr	r3, [r7, #20]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	2000079c 	.word	0x2000079c
 80068cc:	2000077c 	.word	0x2000077c
 80068d0:	20000678 	.word	0x20000678
 80068d4:	20000734 	.word	0x20000734
 80068d8:	20000674 	.word	0x20000674
 80068dc:	20000788 	.word	0x20000788

080068e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068e8:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <vTaskInternalSetTimeOutState+0x24>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068f0:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <vTaskInternalSetTimeOutState+0x28>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	2000078c 	.word	0x2000078c
 8006908:	20000778 	.word	0x20000778

0800690c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10b      	bne.n	8006934 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	613b      	str	r3, [r7, #16]
}
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	e7fd      	b.n	8006930 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	60fb      	str	r3, [r7, #12]
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006952:	f000 fc81 	bl	8007258 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006956:	4b1d      	ldr	r3, [pc, #116]	@ (80069cc <xTaskCheckForTimeOut+0xc0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d102      	bne.n	8006976 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006970:	2300      	movs	r3, #0
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e023      	b.n	80069be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b15      	ldr	r3, [pc, #84]	@ (80069d0 <xTaskCheckForTimeOut+0xc4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d007      	beq.n	8006992 <xTaskCheckForTimeOut+0x86>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	429a      	cmp	r2, r3
 800698a:	d302      	bcc.n	8006992 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e015      	b.n	80069be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	429a      	cmp	r2, r3
 800699a:	d20b      	bcs.n	80069b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	1ad2      	subs	r2, r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff ff99 	bl	80068e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	e004      	b.n	80069be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069be:	f000 fc7d 	bl	80072bc <vPortExitCritical>

	return xReturn;
 80069c2:	69fb      	ldr	r3, [r7, #28]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3720      	adds	r7, #32
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000778 	.word	0x20000778
 80069d0:	2000078c 	.word	0x2000078c

080069d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069d8:	4b03      	ldr	r3, [pc, #12]	@ (80069e8 <vTaskMissedYield+0x14>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
}
 80069de:	bf00      	nop
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	20000788 	.word	0x20000788

080069ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069f4:	f000 f852 	bl	8006a9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069f8:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <prvIdleTask+0x28>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d9f9      	bls.n	80069f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a00:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <prvIdleTask+0x2c>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a10:	e7f0      	b.n	80069f4 <prvIdleTask+0x8>
 8006a12:	bf00      	nop
 8006a14:	20000678 	.word	0x20000678
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	e00c      	b.n	8006a42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a12      	ldr	r2, [pc, #72]	@ (8006a7c <prvInitialiseTaskLists+0x60>)
 8006a34:	4413      	add	r3, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fc6c 	bl	8005314 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b06      	cmp	r3, #6
 8006a46:	d9ef      	bls.n	8006a28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a48:	480d      	ldr	r0, [pc, #52]	@ (8006a80 <prvInitialiseTaskLists+0x64>)
 8006a4a:	f7fe fc63 	bl	8005314 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a4e:	480d      	ldr	r0, [pc, #52]	@ (8006a84 <prvInitialiseTaskLists+0x68>)
 8006a50:	f7fe fc60 	bl	8005314 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a54:	480c      	ldr	r0, [pc, #48]	@ (8006a88 <prvInitialiseTaskLists+0x6c>)
 8006a56:	f7fe fc5d 	bl	8005314 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a5a:	480c      	ldr	r0, [pc, #48]	@ (8006a8c <prvInitialiseTaskLists+0x70>)
 8006a5c:	f7fe fc5a 	bl	8005314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a60:	480b      	ldr	r0, [pc, #44]	@ (8006a90 <prvInitialiseTaskLists+0x74>)
 8006a62:	f7fe fc57 	bl	8005314 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a66:	4b0b      	ldr	r3, [pc, #44]	@ (8006a94 <prvInitialiseTaskLists+0x78>)
 8006a68:	4a05      	ldr	r2, [pc, #20]	@ (8006a80 <prvInitialiseTaskLists+0x64>)
 8006a6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a98 <prvInitialiseTaskLists+0x7c>)
 8006a6e:	4a05      	ldr	r2, [pc, #20]	@ (8006a84 <prvInitialiseTaskLists+0x68>)
 8006a70:	601a      	str	r2, [r3, #0]
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000678 	.word	0x20000678
 8006a80:	20000704 	.word	0x20000704
 8006a84:	20000718 	.word	0x20000718
 8006a88:	20000734 	.word	0x20000734
 8006a8c:	20000748 	.word	0x20000748
 8006a90:	20000760 	.word	0x20000760
 8006a94:	2000072c 	.word	0x2000072c
 8006a98:	20000730 	.word	0x20000730

08006a9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aa2:	e019      	b.n	8006ad8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006aa4:	f000 fbd8 	bl	8007258 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa8:	4b10      	ldr	r3, [pc, #64]	@ (8006aec <prvCheckTasksWaitingTermination+0x50>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe fcb7 	bl	8005428 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006aba:	4b0d      	ldr	r3, [pc, #52]	@ (8006af0 <prvCheckTasksWaitingTermination+0x54>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8006af0 <prvCheckTasksWaitingTermination+0x54>)
 8006ac2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8006af4 <prvCheckTasksWaitingTermination+0x58>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	4a0a      	ldr	r2, [pc, #40]	@ (8006af4 <prvCheckTasksWaitingTermination+0x58>)
 8006acc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ace:	f000 fbf5 	bl	80072bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f810 	bl	8006af8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad8:	4b06      	ldr	r3, [pc, #24]	@ (8006af4 <prvCheckTasksWaitingTermination+0x58>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e1      	bne.n	8006aa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000748 	.word	0x20000748
 8006af0:	20000774 	.word	0x20000774
 8006af4:	2000075c 	.word	0x2000075c

08006af8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	334c      	adds	r3, #76	@ 0x4c
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 f8cb 	bl	8007ca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d108      	bne.n	8006b26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fd8d 	bl	8007638 <vPortFree>
				vPortFree( pxTCB );
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fd8a 	bl	8007638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b24:	e019      	b.n	8006b5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d103      	bne.n	8006b38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fd81 	bl	8007638 <vPortFree>
	}
 8006b36:	e010      	b.n	8006b5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d00b      	beq.n	8006b5a <prvDeleteTCB+0x62>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	60fb      	str	r3, [r7, #12]
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop
 8006b58:	e7fd      	b.n	8006b56 <prvDeleteTCB+0x5e>
	}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b9c <prvResetNextTaskUnblockTime+0x38>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b74:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b7c:	e008      	b.n	8006b90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7e:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <prvResetNextTaskUnblockTime+0x38>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8006b8e:	6013      	str	r3, [r2, #0]
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	2000072c 	.word	0x2000072c
 8006ba0:	20000794 	.word	0x20000794

08006ba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <xTaskGetSchedulerState+0x34>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d102      	bne.n	8006bb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	607b      	str	r3, [r7, #4]
 8006bb6:	e008      	b.n	8006bca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb8:	4b08      	ldr	r3, [pc, #32]	@ (8006bdc <xTaskGetSchedulerState+0x38>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	e001      	b.n	8006bca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bca:	687b      	ldr	r3, [r7, #4]
	}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	20000780 	.word	0x20000780
 8006bdc:	2000079c 	.word	0x2000079c

08006be0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d05e      	beq.n	8006cb4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfa:	4b31      	ldr	r3, [pc, #196]	@ (8006cc0 <xTaskPriorityInherit+0xe0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d24e      	bcs.n	8006ca2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db06      	blt.n	8006c1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8006cc0 <xTaskPriorityInherit+0xe0>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c12:	f1c3 0207 	rsb	r2, r3, #7
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6959      	ldr	r1, [r3, #20]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4a26      	ldr	r2, [pc, #152]	@ (8006cc4 <xTaskPriorityInherit+0xe4>)
 8006c2c:	4413      	add	r3, r2
 8006c2e:	4299      	cmp	r1, r3
 8006c30:	d12f      	bne.n	8006c92 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fbf6 	bl	8005428 <uxListRemove>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c46:	2201      	movs	r2, #1
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	43da      	mvns	r2, r3
 8006c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc8 <xTaskPriorityInherit+0xe8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4013      	ands	r3, r2
 8006c54:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc8 <xTaskPriorityInherit+0xe8>)
 8006c56:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c58:	4b19      	ldr	r3, [pc, #100]	@ (8006cc0 <xTaskPriorityInherit+0xe0>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c66:	2201      	movs	r2, #1
 8006c68:	409a      	lsls	r2, r3
 8006c6a:	4b17      	ldr	r3, [pc, #92]	@ (8006cc8 <xTaskPriorityInherit+0xe8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	4a15      	ldr	r2, [pc, #84]	@ (8006cc8 <xTaskPriorityInherit+0xe8>)
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4a10      	ldr	r2, [pc, #64]	@ (8006cc4 <xTaskPriorityInherit+0xe4>)
 8006c82:	441a      	add	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe fb6f 	bl	800536e <vListInsertEnd>
 8006c90:	e004      	b.n	8006c9c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c92:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <xTaskPriorityInherit+0xe0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e008      	b.n	8006cb4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ca6:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <xTaskPriorityInherit+0xe0>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d201      	bcs.n	8006cb4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
	}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000674 	.word	0x20000674
 8006cc4:	20000678 	.word	0x20000678
 8006cc8:	2000077c 	.word	0x2000077c

08006ccc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d070      	beq.n	8006dc4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd0 <xTaskPriorityDisinherit+0x104>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d00b      	beq.n	8006d04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60fb      	str	r3, [r7, #12]
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10b      	bne.n	8006d24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	60bb      	str	r3, [r7, #8]
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	e7fd      	b.n	8006d20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d28:	1e5a      	subs	r2, r3, #1
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d044      	beq.n	8006dc4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d140      	bne.n	8006dc4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fb6e 	bl	8005428 <uxListRemove>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d115      	bne.n	8006d7e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d56:	491f      	ldr	r1, [pc, #124]	@ (8006dd4 <xTaskPriorityDisinherit+0x108>)
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <xTaskPriorityDisinherit+0xb2>
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	43da      	mvns	r2, r3
 8006d74:	4b18      	ldr	r3, [pc, #96]	@ (8006dd8 <xTaskPriorityDisinherit+0x10c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	4a17      	ldr	r2, [pc, #92]	@ (8006dd8 <xTaskPriorityDisinherit+0x10c>)
 8006d7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	f1c3 0207 	rsb	r2, r3, #7
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	2201      	movs	r2, #1
 8006d98:	409a      	lsls	r2, r3
 8006d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <xTaskPriorityDisinherit+0x10c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	4a0d      	ldr	r2, [pc, #52]	@ (8006dd8 <xTaskPriorityDisinherit+0x10c>)
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4a08      	ldr	r2, [pc, #32]	@ (8006dd4 <xTaskPriorityDisinherit+0x108>)
 8006db2:	441a      	add	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f7fe fad7 	bl	800536e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dc4:	697b      	ldr	r3, [r7, #20]
	}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000674 	.word	0x20000674
 8006dd4:	20000678 	.word	0x20000678
 8006dd8:	2000077c 	.word	0x2000077c

08006ddc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006dea:	2301      	movs	r3, #1
 8006dec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d079      	beq.n	8006ee8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d902      	bls.n	8006e24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	e002      	b.n	8006e2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d059      	beq.n	8006ee8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d154      	bne.n	8006ee8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ef0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d10b      	bne.n	8006e60 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60bb      	str	r3, [r7, #8]
}
 8006e5a:	bf00      	nop
 8006e5c:	bf00      	nop
 8006e5e:	e7fd      	b.n	8006e5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	db04      	blt.n	8006e7e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f1c3 0207 	rsb	r2, r3, #7
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	6959      	ldr	r1, [r3, #20]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4a19      	ldr	r2, [pc, #100]	@ (8006ef4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e8e:	4413      	add	r3, r2
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d129      	bne.n	8006ee8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fac5 	bl	8005428 <uxListRemove>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	4b11      	ldr	r3, [pc, #68]	@ (8006ef8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	4a10      	ldr	r2, [pc, #64]	@ (8006ef8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006eb8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8006ef8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4a06      	ldr	r2, [pc, #24]	@ (8006ef4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006eda:	441a      	add	r2, r3
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f7fe fa43 	bl	800536e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ee8:	bf00      	nop
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000674 	.word	0x20000674
 8006ef4:	20000678 	.word	0x20000678
 8006ef8:	2000077c 	.word	0x2000077c

08006efc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f00:	4b07      	ldr	r3, [pc, #28]	@ (8006f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f08:	4b05      	ldr	r3, [pc, #20]	@ (8006f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f0e:	3201      	adds	r2, #1
 8006f10:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006f12:	4b03      	ldr	r3, [pc, #12]	@ (8006f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f14:	681b      	ldr	r3, [r3, #0]
	}
 8006f16:	4618      	mov	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20000674 	.word	0x20000674

08006f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f2e:	4b29      	ldr	r3, [pc, #164]	@ (8006fd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f34:	4b28      	ldr	r3, [pc, #160]	@ (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fa74 	bl	8005428 <uxListRemove>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f46:	4b24      	ldr	r3, [pc, #144]	@ (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43da      	mvns	r2, r3
 8006f54:	4b21      	ldr	r3, [pc, #132]	@ (8006fdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	4a20      	ldr	r2, [pc, #128]	@ (8006fdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d10a      	bne.n	8006f7c <prvAddCurrentTaskToDelayedList+0x58>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4619      	mov	r1, r3
 8006f74:	481a      	ldr	r0, [pc, #104]	@ (8006fe0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f76:	f7fe f9fa 	bl	800536e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f7a:	e026      	b.n	8006fca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f84:	4b14      	ldr	r3, [pc, #80]	@ (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d209      	bcs.n	8006fa8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f94:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe fa08 	bl	80053b6 <vListInsert>
}
 8006fa6:	e010      	b.n	8006fca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7fe f9fe 	bl	80053b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fba:	4b0c      	ldr	r3, [pc, #48]	@ (8006fec <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d202      	bcs.n	8006fca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006fc4:	4a09      	ldr	r2, [pc, #36]	@ (8006fec <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6013      	str	r3, [r2, #0]
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000778 	.word	0x20000778
 8006fd8:	20000674 	.word	0x20000674
 8006fdc:	2000077c 	.word	0x2000077c
 8006fe0:	20000760 	.word	0x20000760
 8006fe4:	20000730 	.word	0x20000730
 8006fe8:	2000072c 	.word	0x2000072c
 8006fec:	20000794 	.word	0x20000794

08006ff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3b04      	subs	r3, #4
 8007000:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3b04      	subs	r3, #4
 800700e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f023 0201 	bic.w	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3b04      	subs	r3, #4
 800701e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007020:	4a0c      	ldr	r2, [pc, #48]	@ (8007054 <pxPortInitialiseStack+0x64>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3b14      	subs	r3, #20
 800702a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3b04      	subs	r3, #4
 8007036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f06f 0202 	mvn.w	r2, #2
 800703e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3b20      	subs	r3, #32
 8007044:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007046:	68fb      	ldr	r3, [r7, #12]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	08007059 	.word	0x08007059

08007058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007062:	4b13      	ldr	r3, [pc, #76]	@ (80070b0 <prvTaskExitError+0x58>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	d00b      	beq.n	8007084 <prvTaskExitError+0x2c>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	60fb      	str	r3, [r7, #12]
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	e7fd      	b.n	8007080 <prvTaskExitError+0x28>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	60bb      	str	r3, [r7, #8]
}
 8007096:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007098:	bf00      	nop
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0fc      	beq.n	800709a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	2000000c 	.word	0x2000000c
	...

080070c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070c0:	4b07      	ldr	r3, [pc, #28]	@ (80070e0 <pxCurrentTCBConst2>)
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	6808      	ldr	r0, [r1, #0]
 80070c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ca:	f380 8809 	msr	PSP, r0
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f380 8811 	msr	BASEPRI, r0
 80070da:	4770      	bx	lr
 80070dc:	f3af 8000 	nop.w

080070e0 <pxCurrentTCBConst2>:
 80070e0:	20000674 	.word	0x20000674
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop

080070e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070e8:	4808      	ldr	r0, [pc, #32]	@ (800710c <prvPortStartFirstTask+0x24>)
 80070ea:	6800      	ldr	r0, [r0, #0]
 80070ec:	6800      	ldr	r0, [r0, #0]
 80070ee:	f380 8808 	msr	MSP, r0
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8814 	msr	CONTROL, r0
 80070fa:	b662      	cpsie	i
 80070fc:	b661      	cpsie	f
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	df00      	svc	0
 8007108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800710a:	bf00      	nop
 800710c:	e000ed08 	.word	0xe000ed08

08007110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007116:	4b47      	ldr	r3, [pc, #284]	@ (8007234 <xPortStartScheduler+0x124>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a47      	ldr	r2, [pc, #284]	@ (8007238 <xPortStartScheduler+0x128>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10b      	bne.n	8007138 <xPortStartScheduler+0x28>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007138:	4b3e      	ldr	r3, [pc, #248]	@ (8007234 <xPortStartScheduler+0x124>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3f      	ldr	r2, [pc, #252]	@ (800723c <xPortStartScheduler+0x12c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d10b      	bne.n	800715a <xPortStartScheduler+0x4a>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	613b      	str	r3, [r7, #16]
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	e7fd      	b.n	8007156 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800715a:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <xPortStartScheduler+0x130>)
 800715c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	22ff      	movs	r2, #255	@ 0xff
 800716a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800717c:	b2da      	uxtb	r2, r3
 800717e:	4b31      	ldr	r3, [pc, #196]	@ (8007244 <xPortStartScheduler+0x134>)
 8007180:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007182:	4b31      	ldr	r3, [pc, #196]	@ (8007248 <xPortStartScheduler+0x138>)
 8007184:	2207      	movs	r2, #7
 8007186:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007188:	e009      	b.n	800719e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800718a:	4b2f      	ldr	r3, [pc, #188]	@ (8007248 <xPortStartScheduler+0x138>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3b01      	subs	r3, #1
 8007190:	4a2d      	ldr	r2, [pc, #180]	@ (8007248 <xPortStartScheduler+0x138>)
 8007192:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	b2db      	uxtb	r3, r3
 800719c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a6:	2b80      	cmp	r3, #128	@ 0x80
 80071a8:	d0ef      	beq.n	800718a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071aa:	4b27      	ldr	r3, [pc, #156]	@ (8007248 <xPortStartScheduler+0x138>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f1c3 0307 	rsb	r3, r3, #7
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d00b      	beq.n	80071ce <xPortStartScheduler+0xbe>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	60bb      	str	r3, [r7, #8]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007248 <xPortStartScheduler+0x138>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007248 <xPortStartScheduler+0x138>)
 80071d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007248 <xPortStartScheduler+0x138>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071e0:	4a19      	ldr	r2, [pc, #100]	@ (8007248 <xPortStartScheduler+0x138>)
 80071e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071ec:	4b17      	ldr	r3, [pc, #92]	@ (800724c <xPortStartScheduler+0x13c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a16      	ldr	r2, [pc, #88]	@ (800724c <xPortStartScheduler+0x13c>)
 80071f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071f8:	4b14      	ldr	r3, [pc, #80]	@ (800724c <xPortStartScheduler+0x13c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a13      	ldr	r2, [pc, #76]	@ (800724c <xPortStartScheduler+0x13c>)
 80071fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007202:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007204:	f000 f8da 	bl	80073bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007208:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <xPortStartScheduler+0x140>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800720e:	f000 f8f9 	bl	8007404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007212:	4b10      	ldr	r3, [pc, #64]	@ (8007254 <xPortStartScheduler+0x144>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a0f      	ldr	r2, [pc, #60]	@ (8007254 <xPortStartScheduler+0x144>)
 8007218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800721c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800721e:	f7ff ff63 	bl	80070e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007222:	f7ff fa6f 	bl	8006704 <vTaskSwitchContext>
	prvTaskExitError();
 8007226:	f7ff ff17 	bl	8007058 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	e000ed00 	.word	0xe000ed00
 8007238:	410fc271 	.word	0x410fc271
 800723c:	410fc270 	.word	0x410fc270
 8007240:	e000e400 	.word	0xe000e400
 8007244:	200007a0 	.word	0x200007a0
 8007248:	200007a4 	.word	0x200007a4
 800724c:	e000ed20 	.word	0xe000ed20
 8007250:	2000000c 	.word	0x2000000c
 8007254:	e000ef34 	.word	0xe000ef34

08007258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	607b      	str	r3, [r7, #4]
}
 8007270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007272:	4b10      	ldr	r3, [pc, #64]	@ (80072b4 <vPortEnterCritical+0x5c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	4a0e      	ldr	r2, [pc, #56]	@ (80072b4 <vPortEnterCritical+0x5c>)
 800727a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800727c:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <vPortEnterCritical+0x5c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d110      	bne.n	80072a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007284:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <vPortEnterCritical+0x60>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	603b      	str	r3, [r7, #0]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <vPortEnterCritical+0x4a>
	}
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072c2:	4b12      	ldr	r3, [pc, #72]	@ (800730c <vPortExitCritical+0x50>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <vPortExitCritical+0x26>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	607b      	str	r3, [r7, #4]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072e2:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <vPortExitCritical+0x50>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	4a08      	ldr	r2, [pc, #32]	@ (800730c <vPortExitCritical+0x50>)
 80072ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072ec:	4b07      	ldr	r3, [pc, #28]	@ (800730c <vPortExitCritical+0x50>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d105      	bne.n	8007300 <vPortExitCritical+0x44>
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f383 8811 	msr	BASEPRI, r3
}
 80072fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	2000000c 	.word	0x2000000c

08007310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007310:	f3ef 8009 	mrs	r0, PSP
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <pxCurrentTCBConst>)
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	f01e 0f10 	tst.w	lr, #16
 8007320:	bf08      	it	eq
 8007322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	6010      	str	r0, [r2, #0]
 800732c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007334:	f380 8811 	msr	BASEPRI, r0
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f7ff f9e0 	bl	8006704 <vTaskSwitchContext>
 8007344:	f04f 0000 	mov.w	r0, #0
 8007348:	f380 8811 	msr	BASEPRI, r0
 800734c:	bc09      	pop	{r0, r3}
 800734e:	6819      	ldr	r1, [r3, #0]
 8007350:	6808      	ldr	r0, [r1, #0]
 8007352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007356:	f01e 0f10 	tst.w	lr, #16
 800735a:	bf08      	it	eq
 800735c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007360:	f380 8809 	msr	PSP, r0
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	f3af 8000 	nop.w

08007370 <pxCurrentTCBConst>:
 8007370:	20000674 	.word	0x20000674
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop

08007378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	607b      	str	r3, [r7, #4]
}
 8007390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007392:	f7ff f8fd 	bl	8006590 <xTaskIncrementTick>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800739c:	4b06      	ldr	r3, [pc, #24]	@ (80073b8 <SysTick_Handler+0x40>)
 800739e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	2300      	movs	r3, #0
 80073a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f383 8811 	msr	BASEPRI, r3
}
 80073ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073b0:	bf00      	nop
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073c0:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <vPortSetupTimerInterrupt+0x34>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073c6:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <vPortSetupTimerInterrupt+0x38>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073cc:	4b0a      	ldr	r3, [pc, #40]	@ (80073f8 <vPortSetupTimerInterrupt+0x3c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	@ (80073fc <vPortSetupTimerInterrupt+0x40>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	099b      	lsrs	r3, r3, #6
 80073d8:	4a09      	ldr	r2, [pc, #36]	@ (8007400 <vPortSetupTimerInterrupt+0x44>)
 80073da:	3b01      	subs	r3, #1
 80073dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073de:	4b04      	ldr	r3, [pc, #16]	@ (80073f0 <vPortSetupTimerInterrupt+0x34>)
 80073e0:	2207      	movs	r2, #7
 80073e2:	601a      	str	r2, [r3, #0]
}
 80073e4:	bf00      	nop
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	e000e010 	.word	0xe000e010
 80073f4:	e000e018 	.word	0xe000e018
 80073f8:	20000000 	.word	0x20000000
 80073fc:	10624dd3 	.word	0x10624dd3
 8007400:	e000e014 	.word	0xe000e014

08007404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007414 <vPortEnableVFP+0x10>
 8007408:	6801      	ldr	r1, [r0, #0]
 800740a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800740e:	6001      	str	r1, [r0, #0]
 8007410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007412:	bf00      	nop
 8007414:	e000ed88 	.word	0xe000ed88

08007418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800741e:	f3ef 8305 	mrs	r3, IPSR
 8007422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b0f      	cmp	r3, #15
 8007428:	d915      	bls.n	8007456 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800742a:	4a18      	ldr	r2, [pc, #96]	@ (800748c <vPortValidateInterruptPriority+0x74>)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007434:	4b16      	ldr	r3, [pc, #88]	@ (8007490 <vPortValidateInterruptPriority+0x78>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	7afa      	ldrb	r2, [r7, #11]
 800743a:	429a      	cmp	r2, r3
 800743c:	d20b      	bcs.n	8007456 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007456:	4b0f      	ldr	r3, [pc, #60]	@ (8007494 <vPortValidateInterruptPriority+0x7c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800745e:	4b0e      	ldr	r3, [pc, #56]	@ (8007498 <vPortValidateInterruptPriority+0x80>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d90b      	bls.n	800747e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	603b      	str	r3, [r7, #0]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <vPortValidateInterruptPriority+0x62>
	}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	e000e3f0 	.word	0xe000e3f0
 8007490:	200007a0 	.word	0x200007a0
 8007494:	e000ed0c 	.word	0xe000ed0c
 8007498:	200007a4 	.word	0x200007a4

0800749c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	@ 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074a8:	f7fe ffc6 	bl	8006438 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007620 <pvPortMalloc+0x184>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074b4:	f000 f924 	bl	8007700 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007624 <pvPortMalloc+0x188>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f040 8095 	bne.w	80075f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01e      	beq.n	800750a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80074cc:	2208      	movs	r2, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4413      	add	r3, r2
 80074d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d015      	beq.n	800750a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	3308      	adds	r3, #8
 80074e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <pvPortMalloc+0x6e>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	617b      	str	r3, [r7, #20]
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	e7fd      	b.n	8007506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d06f      	beq.n	80075f0 <pvPortMalloc+0x154>
 8007510:	4b45      	ldr	r3, [pc, #276]	@ (8007628 <pvPortMalloc+0x18c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d86a      	bhi.n	80075f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800751a:	4b44      	ldr	r3, [pc, #272]	@ (800762c <pvPortMalloc+0x190>)
 800751c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800751e:	4b43      	ldr	r3, [pc, #268]	@ (800762c <pvPortMalloc+0x190>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007524:	e004      	b.n	8007530 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d903      	bls.n	8007542 <pvPortMalloc+0xa6>
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f1      	bne.n	8007526 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007542:	4b37      	ldr	r3, [pc, #220]	@ (8007620 <pvPortMalloc+0x184>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007548:	429a      	cmp	r2, r3
 800754a:	d051      	beq.n	80075f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2208      	movs	r2, #8
 8007552:	4413      	add	r3, r2
 8007554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	1ad2      	subs	r2, r2, r3
 8007566:	2308      	movs	r3, #8
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	429a      	cmp	r2, r3
 800756c:	d920      	bls.n	80075b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800756e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <pvPortMalloc+0xfc>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	613b      	str	r3, [r7, #16]
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	e7fd      	b.n	8007594 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075aa:	69b8      	ldr	r0, [r7, #24]
 80075ac:	f000 f90a 	bl	80077c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007628 <pvPortMalloc+0x18c>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007628 <pvPortMalloc+0x18c>)
 80075bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075be:	4b1a      	ldr	r3, [pc, #104]	@ (8007628 <pvPortMalloc+0x18c>)
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007630 <pvPortMalloc+0x194>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d203      	bcs.n	80075d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075ca:	4b17      	ldr	r3, [pc, #92]	@ (8007628 <pvPortMalloc+0x18c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a18      	ldr	r2, [pc, #96]	@ (8007630 <pvPortMalloc+0x194>)
 80075d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	4b13      	ldr	r3, [pc, #76]	@ (8007624 <pvPortMalloc+0x188>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	431a      	orrs	r2, r3
 80075dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075e6:	4b13      	ldr	r3, [pc, #76]	@ (8007634 <pvPortMalloc+0x198>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a11      	ldr	r2, [pc, #68]	@ (8007634 <pvPortMalloc+0x198>)
 80075ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075f0:	f7fe ff30 	bl	8006454 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <pvPortMalloc+0x17a>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	60fb      	str	r3, [r7, #12]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <pvPortMalloc+0x176>
	return pvReturn;
 8007616:	69fb      	ldr	r3, [r7, #28]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3728      	adds	r7, #40	@ 0x28
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200043b0 	.word	0x200043b0
 8007624:	200043c4 	.word	0x200043c4
 8007628:	200043b4 	.word	0x200043b4
 800762c:	200043a8 	.word	0x200043a8
 8007630:	200043b8 	.word	0x200043b8
 8007634:	200043bc 	.word	0x200043bc

08007638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d04f      	beq.n	80076ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800764a:	2308      	movs	r3, #8
 800764c:	425b      	negs	r3, r3
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4413      	add	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	4b25      	ldr	r3, [pc, #148]	@ (80076f4 <vPortFree+0xbc>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4013      	ands	r3, r2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <vPortFree+0x46>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	60fb      	str	r3, [r7, #12]
}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	e7fd      	b.n	800767a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <vPortFree+0x66>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60bb      	str	r3, [r7, #8]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	4b14      	ldr	r3, [pc, #80]	@ (80076f4 <vPortFree+0xbc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4013      	ands	r3, r2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01e      	beq.n	80076ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11a      	bne.n	80076ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	4b0e      	ldr	r3, [pc, #56]	@ (80076f4 <vPortFree+0xbc>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	43db      	mvns	r3, r3
 80076be:	401a      	ands	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076c4:	f7fe feb8 	bl	8006438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	4b0a      	ldr	r3, [pc, #40]	@ (80076f8 <vPortFree+0xc0>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4413      	add	r3, r2
 80076d2:	4a09      	ldr	r2, [pc, #36]	@ (80076f8 <vPortFree+0xc0>)
 80076d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076d6:	6938      	ldr	r0, [r7, #16]
 80076d8:	f000 f874 	bl	80077c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <vPortFree+0xc4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	4a06      	ldr	r2, [pc, #24]	@ (80076fc <vPortFree+0xc4>)
 80076e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076e6:	f7fe feb5 	bl	8006454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076ea:	bf00      	nop
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	200043c4 	.word	0x200043c4
 80076f8:	200043b4 	.word	0x200043b4
 80076fc:	200043c0 	.word	0x200043c0

08007700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007706:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800770a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800770c:	4b27      	ldr	r3, [pc, #156]	@ (80077ac <prvHeapInit+0xac>)
 800770e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3307      	adds	r3, #7
 800771e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0307 	bic.w	r3, r3, #7
 8007726:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	4a1f      	ldr	r2, [pc, #124]	@ (80077ac <prvHeapInit+0xac>)
 8007730:	4413      	add	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007738:	4a1d      	ldr	r2, [pc, #116]	@ (80077b0 <prvHeapInit+0xb0>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800773e:	4b1c      	ldr	r3, [pc, #112]	@ (80077b0 <prvHeapInit+0xb0>)
 8007740:	2200      	movs	r2, #0
 8007742:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	4413      	add	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800774c:	2208      	movs	r2, #8
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a15      	ldr	r2, [pc, #84]	@ (80077b4 <prvHeapInit+0xb4>)
 8007760:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007762:	4b14      	ldr	r3, [pc, #80]	@ (80077b4 <prvHeapInit+0xb4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2200      	movs	r2, #0
 8007768:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800776a:	4b12      	ldr	r3, [pc, #72]	@ (80077b4 <prvHeapInit+0xb4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007780:	4b0c      	ldr	r3, [pc, #48]	@ (80077b4 <prvHeapInit+0xb4>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	4a0a      	ldr	r2, [pc, #40]	@ (80077b8 <prvHeapInit+0xb8>)
 800778e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4a09      	ldr	r2, [pc, #36]	@ (80077bc <prvHeapInit+0xbc>)
 8007796:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007798:	4b09      	ldr	r3, [pc, #36]	@ (80077c0 <prvHeapInit+0xc0>)
 800779a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	200007a8 	.word	0x200007a8
 80077b0:	200043a8 	.word	0x200043a8
 80077b4:	200043b0 	.word	0x200043b0
 80077b8:	200043b8 	.word	0x200043b8
 80077bc:	200043b4 	.word	0x200043b4
 80077c0:	200043c4 	.word	0x200043c4

080077c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077cc:	4b28      	ldr	r3, [pc, #160]	@ (8007870 <prvInsertBlockIntoFreeList+0xac>)
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e002      	b.n	80077d8 <prvInsertBlockIntoFreeList+0x14>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d8f7      	bhi.n	80077d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4413      	add	r3, r2
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d108      	bne.n	8007806 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	441a      	add	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d118      	bne.n	800784c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b15      	ldr	r3, [pc, #84]	@ (8007874 <prvInsertBlockIntoFreeList+0xb0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d00d      	beq.n	8007842 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e008      	b.n	8007854 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007842:	4b0c      	ldr	r3, [pc, #48]	@ (8007874 <prvInsertBlockIntoFreeList+0xb0>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	e003      	b.n	8007854 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d002      	beq.n	8007862 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	200043a8 	.word	0x200043a8
 8007874:	200043b0 	.word	0x200043b0

08007878 <atoi>:
 8007878:	220a      	movs	r2, #10
 800787a:	2100      	movs	r1, #0
 800787c:	f000 b87a 	b.w	8007974 <strtol>

08007880 <_strtol_l.isra.0>:
 8007880:	2b24      	cmp	r3, #36	@ 0x24
 8007882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007886:	4686      	mov	lr, r0
 8007888:	4690      	mov	r8, r2
 800788a:	d801      	bhi.n	8007890 <_strtol_l.isra.0+0x10>
 800788c:	2b01      	cmp	r3, #1
 800788e:	d106      	bne.n	800789e <_strtol_l.isra.0+0x1e>
 8007890:	f000 fa9a 	bl	8007dc8 <__errno>
 8007894:	2316      	movs	r3, #22
 8007896:	6003      	str	r3, [r0, #0]
 8007898:	2000      	movs	r0, #0
 800789a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789e:	4834      	ldr	r0, [pc, #208]	@ (8007970 <_strtol_l.isra.0+0xf0>)
 80078a0:	460d      	mov	r5, r1
 80078a2:	462a      	mov	r2, r5
 80078a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078a8:	5d06      	ldrb	r6, [r0, r4]
 80078aa:	f016 0608 	ands.w	r6, r6, #8
 80078ae:	d1f8      	bne.n	80078a2 <_strtol_l.isra.0+0x22>
 80078b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80078b2:	d110      	bne.n	80078d6 <_strtol_l.isra.0+0x56>
 80078b4:	782c      	ldrb	r4, [r5, #0]
 80078b6:	2601      	movs	r6, #1
 80078b8:	1c95      	adds	r5, r2, #2
 80078ba:	f033 0210 	bics.w	r2, r3, #16
 80078be:	d115      	bne.n	80078ec <_strtol_l.isra.0+0x6c>
 80078c0:	2c30      	cmp	r4, #48	@ 0x30
 80078c2:	d10d      	bne.n	80078e0 <_strtol_l.isra.0+0x60>
 80078c4:	782a      	ldrb	r2, [r5, #0]
 80078c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80078ca:	2a58      	cmp	r2, #88	@ 0x58
 80078cc:	d108      	bne.n	80078e0 <_strtol_l.isra.0+0x60>
 80078ce:	786c      	ldrb	r4, [r5, #1]
 80078d0:	3502      	adds	r5, #2
 80078d2:	2310      	movs	r3, #16
 80078d4:	e00a      	b.n	80078ec <_strtol_l.isra.0+0x6c>
 80078d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80078d8:	bf04      	itt	eq
 80078da:	782c      	ldrbeq	r4, [r5, #0]
 80078dc:	1c95      	addeq	r5, r2, #2
 80078de:	e7ec      	b.n	80078ba <_strtol_l.isra.0+0x3a>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f6      	bne.n	80078d2 <_strtol_l.isra.0+0x52>
 80078e4:	2c30      	cmp	r4, #48	@ 0x30
 80078e6:	bf14      	ite	ne
 80078e8:	230a      	movne	r3, #10
 80078ea:	2308      	moveq	r3, #8
 80078ec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80078f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80078f4:	2200      	movs	r2, #0
 80078f6:	fbbc f9f3 	udiv	r9, ip, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8007900:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007904:	2f09      	cmp	r7, #9
 8007906:	d80f      	bhi.n	8007928 <_strtol_l.isra.0+0xa8>
 8007908:	463c      	mov	r4, r7
 800790a:	42a3      	cmp	r3, r4
 800790c:	dd1b      	ble.n	8007946 <_strtol_l.isra.0+0xc6>
 800790e:	1c57      	adds	r7, r2, #1
 8007910:	d007      	beq.n	8007922 <_strtol_l.isra.0+0xa2>
 8007912:	4581      	cmp	r9, r0
 8007914:	d314      	bcc.n	8007940 <_strtol_l.isra.0+0xc0>
 8007916:	d101      	bne.n	800791c <_strtol_l.isra.0+0x9c>
 8007918:	45a2      	cmp	sl, r4
 800791a:	db11      	blt.n	8007940 <_strtol_l.isra.0+0xc0>
 800791c:	fb00 4003 	mla	r0, r0, r3, r4
 8007920:	2201      	movs	r2, #1
 8007922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007926:	e7eb      	b.n	8007900 <_strtol_l.isra.0+0x80>
 8007928:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800792c:	2f19      	cmp	r7, #25
 800792e:	d801      	bhi.n	8007934 <_strtol_l.isra.0+0xb4>
 8007930:	3c37      	subs	r4, #55	@ 0x37
 8007932:	e7ea      	b.n	800790a <_strtol_l.isra.0+0x8a>
 8007934:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007938:	2f19      	cmp	r7, #25
 800793a:	d804      	bhi.n	8007946 <_strtol_l.isra.0+0xc6>
 800793c:	3c57      	subs	r4, #87	@ 0x57
 800793e:	e7e4      	b.n	800790a <_strtol_l.isra.0+0x8a>
 8007940:	f04f 32ff 	mov.w	r2, #4294967295
 8007944:	e7ed      	b.n	8007922 <_strtol_l.isra.0+0xa2>
 8007946:	1c53      	adds	r3, r2, #1
 8007948:	d108      	bne.n	800795c <_strtol_l.isra.0+0xdc>
 800794a:	2322      	movs	r3, #34	@ 0x22
 800794c:	f8ce 3000 	str.w	r3, [lr]
 8007950:	4660      	mov	r0, ip
 8007952:	f1b8 0f00 	cmp.w	r8, #0
 8007956:	d0a0      	beq.n	800789a <_strtol_l.isra.0+0x1a>
 8007958:	1e69      	subs	r1, r5, #1
 800795a:	e006      	b.n	800796a <_strtol_l.isra.0+0xea>
 800795c:	b106      	cbz	r6, 8007960 <_strtol_l.isra.0+0xe0>
 800795e:	4240      	negs	r0, r0
 8007960:	f1b8 0f00 	cmp.w	r8, #0
 8007964:	d099      	beq.n	800789a <_strtol_l.isra.0+0x1a>
 8007966:	2a00      	cmp	r2, #0
 8007968:	d1f6      	bne.n	8007958 <_strtol_l.isra.0+0xd8>
 800796a:	f8c8 1000 	str.w	r1, [r8]
 800796e:	e794      	b.n	800789a <_strtol_l.isra.0+0x1a>
 8007970:	08008c29 	.word	0x08008c29

08007974 <strtol>:
 8007974:	4613      	mov	r3, r2
 8007976:	460a      	mov	r2, r1
 8007978:	4601      	mov	r1, r0
 800797a:	4802      	ldr	r0, [pc, #8]	@ (8007984 <strtol+0x10>)
 800797c:	6800      	ldr	r0, [r0, #0]
 800797e:	f7ff bf7f 	b.w	8007880 <_strtol_l.isra.0>
 8007982:	bf00      	nop
 8007984:	2000001c 	.word	0x2000001c

08007988 <std>:
 8007988:	2300      	movs	r3, #0
 800798a:	b510      	push	{r4, lr}
 800798c:	4604      	mov	r4, r0
 800798e:	e9c0 3300 	strd	r3, r3, [r0]
 8007992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007996:	6083      	str	r3, [r0, #8]
 8007998:	8181      	strh	r1, [r0, #12]
 800799a:	6643      	str	r3, [r0, #100]	@ 0x64
 800799c:	81c2      	strh	r2, [r0, #14]
 800799e:	6183      	str	r3, [r0, #24]
 80079a0:	4619      	mov	r1, r3
 80079a2:	2208      	movs	r2, #8
 80079a4:	305c      	adds	r0, #92	@ 0x5c
 80079a6:	f000 f906 	bl	8007bb6 <memset>
 80079aa:	4b0d      	ldr	r3, [pc, #52]	@ (80079e0 <std+0x58>)
 80079ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80079ae:	4b0d      	ldr	r3, [pc, #52]	@ (80079e4 <std+0x5c>)
 80079b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079b2:	4b0d      	ldr	r3, [pc, #52]	@ (80079e8 <std+0x60>)
 80079b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079b6:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <std+0x64>)
 80079b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80079ba:	4b0d      	ldr	r3, [pc, #52]	@ (80079f0 <std+0x68>)
 80079bc:	6224      	str	r4, [r4, #32]
 80079be:	429c      	cmp	r4, r3
 80079c0:	d006      	beq.n	80079d0 <std+0x48>
 80079c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079c6:	4294      	cmp	r4, r2
 80079c8:	d002      	beq.n	80079d0 <std+0x48>
 80079ca:	33d0      	adds	r3, #208	@ 0xd0
 80079cc:	429c      	cmp	r4, r3
 80079ce:	d105      	bne.n	80079dc <std+0x54>
 80079d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d8:	f000 ba20 	b.w	8007e1c <__retarget_lock_init_recursive>
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	bf00      	nop
 80079e0:	08007b31 	.word	0x08007b31
 80079e4:	08007b53 	.word	0x08007b53
 80079e8:	08007b8b 	.word	0x08007b8b
 80079ec:	08007baf 	.word	0x08007baf
 80079f0:	200043c8 	.word	0x200043c8

080079f4 <stdio_exit_handler>:
 80079f4:	4a02      	ldr	r2, [pc, #8]	@ (8007a00 <stdio_exit_handler+0xc>)
 80079f6:	4903      	ldr	r1, [pc, #12]	@ (8007a04 <stdio_exit_handler+0x10>)
 80079f8:	4803      	ldr	r0, [pc, #12]	@ (8007a08 <stdio_exit_handler+0x14>)
 80079fa:	f000 b869 	b.w	8007ad0 <_fwalk_sglue>
 80079fe:	bf00      	nop
 8007a00:	20000010 	.word	0x20000010
 8007a04:	08008721 	.word	0x08008721
 8007a08:	20000020 	.word	0x20000020

08007a0c <cleanup_stdio>:
 8007a0c:	6841      	ldr	r1, [r0, #4]
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a40 <cleanup_stdio+0x34>)
 8007a10:	4299      	cmp	r1, r3
 8007a12:	b510      	push	{r4, lr}
 8007a14:	4604      	mov	r4, r0
 8007a16:	d001      	beq.n	8007a1c <cleanup_stdio+0x10>
 8007a18:	f000 fe82 	bl	8008720 <_fflush_r>
 8007a1c:	68a1      	ldr	r1, [r4, #8]
 8007a1e:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <cleanup_stdio+0x38>)
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d002      	beq.n	8007a2a <cleanup_stdio+0x1e>
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fe7b 	bl	8008720 <_fflush_r>
 8007a2a:	68e1      	ldr	r1, [r4, #12]
 8007a2c:	4b06      	ldr	r3, [pc, #24]	@ (8007a48 <cleanup_stdio+0x3c>)
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	d004      	beq.n	8007a3c <cleanup_stdio+0x30>
 8007a32:	4620      	mov	r0, r4
 8007a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a38:	f000 be72 	b.w	8008720 <_fflush_r>
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop
 8007a40:	200043c8 	.word	0x200043c8
 8007a44:	20004430 	.word	0x20004430
 8007a48:	20004498 	.word	0x20004498

08007a4c <global_stdio_init.part.0>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a7c <global_stdio_init.part.0+0x30>)
 8007a50:	4c0b      	ldr	r4, [pc, #44]	@ (8007a80 <global_stdio_init.part.0+0x34>)
 8007a52:	4a0c      	ldr	r2, [pc, #48]	@ (8007a84 <global_stdio_init.part.0+0x38>)
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	4620      	mov	r0, r4
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	f7ff ff94 	bl	8007988 <std>
 8007a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a64:	2201      	movs	r2, #1
 8007a66:	2109      	movs	r1, #9
 8007a68:	f7ff ff8e 	bl	8007988 <std>
 8007a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a70:	2202      	movs	r2, #2
 8007a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a76:	2112      	movs	r1, #18
 8007a78:	f7ff bf86 	b.w	8007988 <std>
 8007a7c:	20004500 	.word	0x20004500
 8007a80:	200043c8 	.word	0x200043c8
 8007a84:	080079f5 	.word	0x080079f5

08007a88 <__sfp_lock_acquire>:
 8007a88:	4801      	ldr	r0, [pc, #4]	@ (8007a90 <__sfp_lock_acquire+0x8>)
 8007a8a:	f000 b9c8 	b.w	8007e1e <__retarget_lock_acquire_recursive>
 8007a8e:	bf00      	nop
 8007a90:	20004509 	.word	0x20004509

08007a94 <__sfp_lock_release>:
 8007a94:	4801      	ldr	r0, [pc, #4]	@ (8007a9c <__sfp_lock_release+0x8>)
 8007a96:	f000 b9c3 	b.w	8007e20 <__retarget_lock_release_recursive>
 8007a9a:	bf00      	nop
 8007a9c:	20004509 	.word	0x20004509

08007aa0 <__sinit>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	f7ff fff0 	bl	8007a88 <__sfp_lock_acquire>
 8007aa8:	6a23      	ldr	r3, [r4, #32]
 8007aaa:	b11b      	cbz	r3, 8007ab4 <__sinit+0x14>
 8007aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab0:	f7ff bff0 	b.w	8007a94 <__sfp_lock_release>
 8007ab4:	4b04      	ldr	r3, [pc, #16]	@ (8007ac8 <__sinit+0x28>)
 8007ab6:	6223      	str	r3, [r4, #32]
 8007ab8:	4b04      	ldr	r3, [pc, #16]	@ (8007acc <__sinit+0x2c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1f5      	bne.n	8007aac <__sinit+0xc>
 8007ac0:	f7ff ffc4 	bl	8007a4c <global_stdio_init.part.0>
 8007ac4:	e7f2      	b.n	8007aac <__sinit+0xc>
 8007ac6:	bf00      	nop
 8007ac8:	08007a0d 	.word	0x08007a0d
 8007acc:	20004500 	.word	0x20004500

08007ad0 <_fwalk_sglue>:
 8007ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	4688      	mov	r8, r1
 8007ad8:	4614      	mov	r4, r2
 8007ada:	2600      	movs	r6, #0
 8007adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ae4:	d505      	bpl.n	8007af2 <_fwalk_sglue+0x22>
 8007ae6:	6824      	ldr	r4, [r4, #0]
 8007ae8:	2c00      	cmp	r4, #0
 8007aea:	d1f7      	bne.n	8007adc <_fwalk_sglue+0xc>
 8007aec:	4630      	mov	r0, r6
 8007aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d907      	bls.n	8007b08 <_fwalk_sglue+0x38>
 8007af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007afc:	3301      	adds	r3, #1
 8007afe:	d003      	beq.n	8007b08 <_fwalk_sglue+0x38>
 8007b00:	4629      	mov	r1, r5
 8007b02:	4638      	mov	r0, r7
 8007b04:	47c0      	blx	r8
 8007b06:	4306      	orrs	r6, r0
 8007b08:	3568      	adds	r5, #104	@ 0x68
 8007b0a:	e7e9      	b.n	8007ae0 <_fwalk_sglue+0x10>

08007b0c <iprintf>:
 8007b0c:	b40f      	push	{r0, r1, r2, r3}
 8007b0e:	b507      	push	{r0, r1, r2, lr}
 8007b10:	4906      	ldr	r1, [pc, #24]	@ (8007b2c <iprintf+0x20>)
 8007b12:	ab04      	add	r3, sp, #16
 8007b14:	6808      	ldr	r0, [r1, #0]
 8007b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b1a:	6881      	ldr	r1, [r0, #8]
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	f000 fad7 	bl	80080d0 <_vfiprintf_r>
 8007b22:	b003      	add	sp, #12
 8007b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b28:	b004      	add	sp, #16
 8007b2a:	4770      	bx	lr
 8007b2c:	2000001c 	.word	0x2000001c

08007b30 <__sread>:
 8007b30:	b510      	push	{r4, lr}
 8007b32:	460c      	mov	r4, r1
 8007b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b38:	f000 f922 	bl	8007d80 <_read_r>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	bfab      	itete	ge
 8007b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b42:	89a3      	ldrhlt	r3, [r4, #12]
 8007b44:	181b      	addge	r3, r3, r0
 8007b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b4a:	bfac      	ite	ge
 8007b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b4e:	81a3      	strhlt	r3, [r4, #12]
 8007b50:	bd10      	pop	{r4, pc}

08007b52 <__swrite>:
 8007b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b56:	461f      	mov	r7, r3
 8007b58:	898b      	ldrh	r3, [r1, #12]
 8007b5a:	05db      	lsls	r3, r3, #23
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	4616      	mov	r6, r2
 8007b62:	d505      	bpl.n	8007b70 <__swrite+0x1e>
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	2302      	movs	r3, #2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f000 f8f6 	bl	8007d5c <_lseek_r>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	4632      	mov	r2, r6
 8007b7e:	463b      	mov	r3, r7
 8007b80:	4628      	mov	r0, r5
 8007b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b86:	f000 b90d 	b.w	8007da4 <_write_r>

08007b8a <__sseek>:
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b92:	f000 f8e3 	bl	8007d5c <_lseek_r>
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	bf15      	itete	ne
 8007b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ba6:	81a3      	strheq	r3, [r4, #12]
 8007ba8:	bf18      	it	ne
 8007baa:	81a3      	strhne	r3, [r4, #12]
 8007bac:	bd10      	pop	{r4, pc}

08007bae <__sclose>:
 8007bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb2:	f000 b865 	b.w	8007c80 <_close_r>

08007bb6 <memset>:
 8007bb6:	4402      	add	r2, r0
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d100      	bne.n	8007bc0 <memset+0xa>
 8007bbe:	4770      	bx	lr
 8007bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc4:	e7f9      	b.n	8007bba <memset+0x4>
	...

08007bc8 <strtok>:
 8007bc8:	4b16      	ldr	r3, [pc, #88]	@ (8007c24 <strtok+0x5c>)
 8007bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bce:	681f      	ldr	r7, [r3, #0]
 8007bd0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	460e      	mov	r6, r1
 8007bd6:	b9ec      	cbnz	r4, 8007c14 <strtok+0x4c>
 8007bd8:	2050      	movs	r0, #80	@ 0x50
 8007bda:	f000 f999 	bl	8007f10 <malloc>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6478      	str	r0, [r7, #68]	@ 0x44
 8007be2:	b920      	cbnz	r0, 8007bee <strtok+0x26>
 8007be4:	4b10      	ldr	r3, [pc, #64]	@ (8007c28 <strtok+0x60>)
 8007be6:	4811      	ldr	r0, [pc, #68]	@ (8007c2c <strtok+0x64>)
 8007be8:	215b      	movs	r1, #91	@ 0x5b
 8007bea:	f000 f929 	bl	8007e40 <__assert_func>
 8007bee:	e9c0 4400 	strd	r4, r4, [r0]
 8007bf2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007bf6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007bfa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007bfe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007c02:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007c06:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007c0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007c0e:	6184      	str	r4, [r0, #24]
 8007c10:	7704      	strb	r4, [r0, #28]
 8007c12:	6244      	str	r4, [r0, #36]	@ 0x24
 8007c14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c20:	f000 b806 	b.w	8007c30 <__strtok_r>
 8007c24:	2000001c 	.word	0x2000001c
 8007c28:	08008d29 	.word	0x08008d29
 8007c2c:	08008d40 	.word	0x08008d40

08007c30 <__strtok_r>:
 8007c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c32:	4604      	mov	r4, r0
 8007c34:	b908      	cbnz	r0, 8007c3a <__strtok_r+0xa>
 8007c36:	6814      	ldr	r4, [r2, #0]
 8007c38:	b144      	cbz	r4, 8007c4c <__strtok_r+0x1c>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007c40:	460f      	mov	r7, r1
 8007c42:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007c46:	b91e      	cbnz	r6, 8007c50 <__strtok_r+0x20>
 8007c48:	b965      	cbnz	r5, 8007c64 <__strtok_r+0x34>
 8007c4a:	6015      	str	r5, [r2, #0]
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e005      	b.n	8007c5c <__strtok_r+0x2c>
 8007c50:	42b5      	cmp	r5, r6
 8007c52:	d1f6      	bne.n	8007c42 <__strtok_r+0x12>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f0      	bne.n	8007c3a <__strtok_r+0xa>
 8007c58:	6014      	str	r4, [r2, #0]
 8007c5a:	7003      	strb	r3, [r0, #0]
 8007c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c5e:	461c      	mov	r4, r3
 8007c60:	e00c      	b.n	8007c7c <__strtok_r+0x4c>
 8007c62:	b91d      	cbnz	r5, 8007c6c <__strtok_r+0x3c>
 8007c64:	4627      	mov	r7, r4
 8007c66:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c6a:	460e      	mov	r6, r1
 8007c6c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007c70:	42ab      	cmp	r3, r5
 8007c72:	d1f6      	bne.n	8007c62 <__strtok_r+0x32>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0f2      	beq.n	8007c5e <__strtok_r+0x2e>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	703b      	strb	r3, [r7, #0]
 8007c7c:	6014      	str	r4, [r2, #0]
 8007c7e:	e7ed      	b.n	8007c5c <__strtok_r+0x2c>

08007c80 <_close_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	@ (8007c9c <_close_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7f9 fd3c 	bl	8001708 <_close>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_close_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_close_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20004504 	.word	0x20004504

08007ca0 <_reclaim_reent>:
 8007ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8007d58 <_reclaim_reent+0xb8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4283      	cmp	r3, r0
 8007ca6:	b570      	push	{r4, r5, r6, lr}
 8007ca8:	4604      	mov	r4, r0
 8007caa:	d053      	beq.n	8007d54 <_reclaim_reent+0xb4>
 8007cac:	69c3      	ldr	r3, [r0, #28]
 8007cae:	b31b      	cbz	r3, 8007cf8 <_reclaim_reent+0x58>
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	b163      	cbz	r3, 8007cce <_reclaim_reent+0x2e>
 8007cb4:	2500      	movs	r5, #0
 8007cb6:	69e3      	ldr	r3, [r4, #28]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	5959      	ldr	r1, [r3, r5]
 8007cbc:	b9b1      	cbnz	r1, 8007cec <_reclaim_reent+0x4c>
 8007cbe:	3504      	adds	r5, #4
 8007cc0:	2d80      	cmp	r5, #128	@ 0x80
 8007cc2:	d1f8      	bne.n	8007cb6 <_reclaim_reent+0x16>
 8007cc4:	69e3      	ldr	r3, [r4, #28]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	68d9      	ldr	r1, [r3, #12]
 8007cca:	f000 f8d7 	bl	8007e7c <_free_r>
 8007cce:	69e3      	ldr	r3, [r4, #28]
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	b111      	cbz	r1, 8007cda <_reclaim_reent+0x3a>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 f8d1 	bl	8007e7c <_free_r>
 8007cda:	69e3      	ldr	r3, [r4, #28]
 8007cdc:	689d      	ldr	r5, [r3, #8]
 8007cde:	b15d      	cbz	r5, 8007cf8 <_reclaim_reent+0x58>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	682d      	ldr	r5, [r5, #0]
 8007ce6:	f000 f8c9 	bl	8007e7c <_free_r>
 8007cea:	e7f8      	b.n	8007cde <_reclaim_reent+0x3e>
 8007cec:	680e      	ldr	r6, [r1, #0]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 f8c4 	bl	8007e7c <_free_r>
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	e7e1      	b.n	8007cbc <_reclaim_reent+0x1c>
 8007cf8:	6961      	ldr	r1, [r4, #20]
 8007cfa:	b111      	cbz	r1, 8007d02 <_reclaim_reent+0x62>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 f8bd 	bl	8007e7c <_free_r>
 8007d02:	69e1      	ldr	r1, [r4, #28]
 8007d04:	b111      	cbz	r1, 8007d0c <_reclaim_reent+0x6c>
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 f8b8 	bl	8007e7c <_free_r>
 8007d0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007d0e:	b111      	cbz	r1, 8007d16 <_reclaim_reent+0x76>
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f8b3 	bl	8007e7c <_free_r>
 8007d16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d18:	b111      	cbz	r1, 8007d20 <_reclaim_reent+0x80>
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 f8ae 	bl	8007e7c <_free_r>
 8007d20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007d22:	b111      	cbz	r1, 8007d2a <_reclaim_reent+0x8a>
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 f8a9 	bl	8007e7c <_free_r>
 8007d2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007d2c:	b111      	cbz	r1, 8007d34 <_reclaim_reent+0x94>
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 f8a4 	bl	8007e7c <_free_r>
 8007d34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d36:	b111      	cbz	r1, 8007d3e <_reclaim_reent+0x9e>
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 f89f 	bl	8007e7c <_free_r>
 8007d3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007d40:	b111      	cbz	r1, 8007d48 <_reclaim_reent+0xa8>
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 f89a 	bl	8007e7c <_free_r>
 8007d48:	6a23      	ldr	r3, [r4, #32]
 8007d4a:	b11b      	cbz	r3, 8007d54 <_reclaim_reent+0xb4>
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d52:	4718      	bx	r3
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
 8007d56:	bf00      	nop
 8007d58:	2000001c 	.word	0x2000001c

08007d5c <_lseek_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	@ (8007d7c <_lseek_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7f9 fcf3 	bl	8001756 <_lseek>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_lseek_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_lseek_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20004504 	.word	0x20004504

08007d80 <_read_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	@ (8007da0 <_read_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7f9 fc81 	bl	8001696 <_read>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_read_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_read_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20004504 	.word	0x20004504

08007da4 <_write_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d07      	ldr	r5, [pc, #28]	@ (8007dc4 <_write_r+0x20>)
 8007da8:	4604      	mov	r4, r0
 8007daa:	4608      	mov	r0, r1
 8007dac:	4611      	mov	r1, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7f9 fc8c 	bl	80016d0 <_write>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_write_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_write_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20004504 	.word	0x20004504

08007dc8 <__errno>:
 8007dc8:	4b01      	ldr	r3, [pc, #4]	@ (8007dd0 <__errno+0x8>)
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	2000001c 	.word	0x2000001c

08007dd4 <__libc_init_array>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8007e0c <__libc_init_array+0x38>)
 8007dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8007e10 <__libc_init_array+0x3c>)
 8007dda:	1b64      	subs	r4, r4, r5
 8007ddc:	10a4      	asrs	r4, r4, #2
 8007dde:	2600      	movs	r6, #0
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	d109      	bne.n	8007df8 <__libc_init_array+0x24>
 8007de4:	4d0b      	ldr	r5, [pc, #44]	@ (8007e14 <__libc_init_array+0x40>)
 8007de6:	4c0c      	ldr	r4, [pc, #48]	@ (8007e18 <__libc_init_array+0x44>)
 8007de8:	f000 fe48 	bl	8008a7c <_init>
 8007dec:	1b64      	subs	r4, r4, r5
 8007dee:	10a4      	asrs	r4, r4, #2
 8007df0:	2600      	movs	r6, #0
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	d105      	bne.n	8007e02 <__libc_init_array+0x2e>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfc:	4798      	blx	r3
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7ee      	b.n	8007de0 <__libc_init_array+0xc>
 8007e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e06:	4798      	blx	r3
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7f2      	b.n	8007df2 <__libc_init_array+0x1e>
 8007e0c:	08008e14 	.word	0x08008e14
 8007e10:	08008e14 	.word	0x08008e14
 8007e14:	08008e14 	.word	0x08008e14
 8007e18:	08008e18 	.word	0x08008e18

08007e1c <__retarget_lock_init_recursive>:
 8007e1c:	4770      	bx	lr

08007e1e <__retarget_lock_acquire_recursive>:
 8007e1e:	4770      	bx	lr

08007e20 <__retarget_lock_release_recursive>:
 8007e20:	4770      	bx	lr

08007e22 <memcpy>:
 8007e22:	440a      	add	r2, r1
 8007e24:	4291      	cmp	r1, r2
 8007e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e2a:	d100      	bne.n	8007e2e <memcpy+0xc>
 8007e2c:	4770      	bx	lr
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e38:	4291      	cmp	r1, r2
 8007e3a:	d1f9      	bne.n	8007e30 <memcpy+0xe>
 8007e3c:	bd10      	pop	{r4, pc}
	...

08007e40 <__assert_func>:
 8007e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e42:	4614      	mov	r4, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	4b09      	ldr	r3, [pc, #36]	@ (8007e6c <__assert_func+0x2c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	68d8      	ldr	r0, [r3, #12]
 8007e4e:	b14c      	cbz	r4, 8007e64 <__assert_func+0x24>
 8007e50:	4b07      	ldr	r3, [pc, #28]	@ (8007e70 <__assert_func+0x30>)
 8007e52:	9100      	str	r1, [sp, #0]
 8007e54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e58:	4906      	ldr	r1, [pc, #24]	@ (8007e74 <__assert_func+0x34>)
 8007e5a:	462b      	mov	r3, r5
 8007e5c:	f000 fc88 	bl	8008770 <fiprintf>
 8007e60:	f000 fd3c 	bl	80088dc <abort>
 8007e64:	4b04      	ldr	r3, [pc, #16]	@ (8007e78 <__assert_func+0x38>)
 8007e66:	461c      	mov	r4, r3
 8007e68:	e7f3      	b.n	8007e52 <__assert_func+0x12>
 8007e6a:	bf00      	nop
 8007e6c:	2000001c 	.word	0x2000001c
 8007e70:	08008d9a 	.word	0x08008d9a
 8007e74:	08008da7 	.word	0x08008da7
 8007e78:	08008dd5 	.word	0x08008dd5

08007e7c <_free_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4605      	mov	r5, r0
 8007e80:	2900      	cmp	r1, #0
 8007e82:	d041      	beq.n	8007f08 <_free_r+0x8c>
 8007e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e88:	1f0c      	subs	r4, r1, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bfb8      	it	lt
 8007e8e:	18e4      	addlt	r4, r4, r3
 8007e90:	f000 f8e8 	bl	8008064 <__malloc_lock>
 8007e94:	4a1d      	ldr	r2, [pc, #116]	@ (8007f0c <_free_r+0x90>)
 8007e96:	6813      	ldr	r3, [r2, #0]
 8007e98:	b933      	cbnz	r3, 8007ea8 <_free_r+0x2c>
 8007e9a:	6063      	str	r3, [r4, #4]
 8007e9c:	6014      	str	r4, [r2, #0]
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea4:	f000 b8e4 	b.w	8008070 <__malloc_unlock>
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	d908      	bls.n	8007ebe <_free_r+0x42>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	1821      	adds	r1, r4, r0
 8007eb0:	428b      	cmp	r3, r1
 8007eb2:	bf01      	itttt	eq
 8007eb4:	6819      	ldreq	r1, [r3, #0]
 8007eb6:	685b      	ldreq	r3, [r3, #4]
 8007eb8:	1809      	addeq	r1, r1, r0
 8007eba:	6021      	streq	r1, [r4, #0]
 8007ebc:	e7ed      	b.n	8007e9a <_free_r+0x1e>
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	b10b      	cbz	r3, 8007ec8 <_free_r+0x4c>
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d9fa      	bls.n	8007ebe <_free_r+0x42>
 8007ec8:	6811      	ldr	r1, [r2, #0]
 8007eca:	1850      	adds	r0, r2, r1
 8007ecc:	42a0      	cmp	r0, r4
 8007ece:	d10b      	bne.n	8007ee8 <_free_r+0x6c>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	4401      	add	r1, r0
 8007ed4:	1850      	adds	r0, r2, r1
 8007ed6:	4283      	cmp	r3, r0
 8007ed8:	6011      	str	r1, [r2, #0]
 8007eda:	d1e0      	bne.n	8007e9e <_free_r+0x22>
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	6053      	str	r3, [r2, #4]
 8007ee2:	4408      	add	r0, r1
 8007ee4:	6010      	str	r0, [r2, #0]
 8007ee6:	e7da      	b.n	8007e9e <_free_r+0x22>
 8007ee8:	d902      	bls.n	8007ef0 <_free_r+0x74>
 8007eea:	230c      	movs	r3, #12
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	e7d6      	b.n	8007e9e <_free_r+0x22>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	1821      	adds	r1, r4, r0
 8007ef4:	428b      	cmp	r3, r1
 8007ef6:	bf04      	itt	eq
 8007ef8:	6819      	ldreq	r1, [r3, #0]
 8007efa:	685b      	ldreq	r3, [r3, #4]
 8007efc:	6063      	str	r3, [r4, #4]
 8007efe:	bf04      	itt	eq
 8007f00:	1809      	addeq	r1, r1, r0
 8007f02:	6021      	streq	r1, [r4, #0]
 8007f04:	6054      	str	r4, [r2, #4]
 8007f06:	e7ca      	b.n	8007e9e <_free_r+0x22>
 8007f08:	bd38      	pop	{r3, r4, r5, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20004510 	.word	0x20004510

08007f10 <malloc>:
 8007f10:	4b02      	ldr	r3, [pc, #8]	@ (8007f1c <malloc+0xc>)
 8007f12:	4601      	mov	r1, r0
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	f000 b825 	b.w	8007f64 <_malloc_r>
 8007f1a:	bf00      	nop
 8007f1c:	2000001c 	.word	0x2000001c

08007f20 <sbrk_aligned>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	4e0f      	ldr	r6, [pc, #60]	@ (8007f60 <sbrk_aligned+0x40>)
 8007f24:	460c      	mov	r4, r1
 8007f26:	6831      	ldr	r1, [r6, #0]
 8007f28:	4605      	mov	r5, r0
 8007f2a:	b911      	cbnz	r1, 8007f32 <sbrk_aligned+0x12>
 8007f2c:	f000 fcc6 	bl	80088bc <_sbrk_r>
 8007f30:	6030      	str	r0, [r6, #0]
 8007f32:	4621      	mov	r1, r4
 8007f34:	4628      	mov	r0, r5
 8007f36:	f000 fcc1 	bl	80088bc <_sbrk_r>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	d103      	bne.n	8007f46 <sbrk_aligned+0x26>
 8007f3e:	f04f 34ff 	mov.w	r4, #4294967295
 8007f42:	4620      	mov	r0, r4
 8007f44:	bd70      	pop	{r4, r5, r6, pc}
 8007f46:	1cc4      	adds	r4, r0, #3
 8007f48:	f024 0403 	bic.w	r4, r4, #3
 8007f4c:	42a0      	cmp	r0, r4
 8007f4e:	d0f8      	beq.n	8007f42 <sbrk_aligned+0x22>
 8007f50:	1a21      	subs	r1, r4, r0
 8007f52:	4628      	mov	r0, r5
 8007f54:	f000 fcb2 	bl	80088bc <_sbrk_r>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d1f2      	bne.n	8007f42 <sbrk_aligned+0x22>
 8007f5c:	e7ef      	b.n	8007f3e <sbrk_aligned+0x1e>
 8007f5e:	bf00      	nop
 8007f60:	2000450c 	.word	0x2000450c

08007f64 <_malloc_r>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	1ccd      	adds	r5, r1, #3
 8007f6a:	f025 0503 	bic.w	r5, r5, #3
 8007f6e:	3508      	adds	r5, #8
 8007f70:	2d0c      	cmp	r5, #12
 8007f72:	bf38      	it	cc
 8007f74:	250c      	movcc	r5, #12
 8007f76:	2d00      	cmp	r5, #0
 8007f78:	4606      	mov	r6, r0
 8007f7a:	db01      	blt.n	8007f80 <_malloc_r+0x1c>
 8007f7c:	42a9      	cmp	r1, r5
 8007f7e:	d904      	bls.n	8007f8a <_malloc_r+0x26>
 8007f80:	230c      	movs	r3, #12
 8007f82:	6033      	str	r3, [r6, #0]
 8007f84:	2000      	movs	r0, #0
 8007f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008060 <_malloc_r+0xfc>
 8007f8e:	f000 f869 	bl	8008064 <__malloc_lock>
 8007f92:	f8d8 3000 	ldr.w	r3, [r8]
 8007f96:	461c      	mov	r4, r3
 8007f98:	bb44      	cbnz	r4, 8007fec <_malloc_r+0x88>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7ff ffbf 	bl	8007f20 <sbrk_aligned>
 8007fa2:	1c43      	adds	r3, r0, #1
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	d158      	bne.n	800805a <_malloc_r+0xf6>
 8007fa8:	f8d8 4000 	ldr.w	r4, [r8]
 8007fac:	4627      	mov	r7, r4
 8007fae:	2f00      	cmp	r7, #0
 8007fb0:	d143      	bne.n	800803a <_malloc_r+0xd6>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	d04b      	beq.n	800804e <_malloc_r+0xea>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	4639      	mov	r1, r7
 8007fba:	4630      	mov	r0, r6
 8007fbc:	eb04 0903 	add.w	r9, r4, r3
 8007fc0:	f000 fc7c 	bl	80088bc <_sbrk_r>
 8007fc4:	4581      	cmp	r9, r0
 8007fc6:	d142      	bne.n	800804e <_malloc_r+0xea>
 8007fc8:	6821      	ldr	r1, [r4, #0]
 8007fca:	1a6d      	subs	r5, r5, r1
 8007fcc:	4629      	mov	r1, r5
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff ffa6 	bl	8007f20 <sbrk_aligned>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d03a      	beq.n	800804e <_malloc_r+0xea>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	442b      	add	r3, r5
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	f8d8 3000 	ldr.w	r3, [r8]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	bb62      	cbnz	r2, 8008040 <_malloc_r+0xdc>
 8007fe6:	f8c8 7000 	str.w	r7, [r8]
 8007fea:	e00f      	b.n	800800c <_malloc_r+0xa8>
 8007fec:	6822      	ldr	r2, [r4, #0]
 8007fee:	1b52      	subs	r2, r2, r5
 8007ff0:	d420      	bmi.n	8008034 <_malloc_r+0xd0>
 8007ff2:	2a0b      	cmp	r2, #11
 8007ff4:	d917      	bls.n	8008026 <_malloc_r+0xc2>
 8007ff6:	1961      	adds	r1, r4, r5
 8007ff8:	42a3      	cmp	r3, r4
 8007ffa:	6025      	str	r5, [r4, #0]
 8007ffc:	bf18      	it	ne
 8007ffe:	6059      	strne	r1, [r3, #4]
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	bf08      	it	eq
 8008004:	f8c8 1000 	streq.w	r1, [r8]
 8008008:	5162      	str	r2, [r4, r5]
 800800a:	604b      	str	r3, [r1, #4]
 800800c:	4630      	mov	r0, r6
 800800e:	f000 f82f 	bl	8008070 <__malloc_unlock>
 8008012:	f104 000b 	add.w	r0, r4, #11
 8008016:	1d23      	adds	r3, r4, #4
 8008018:	f020 0007 	bic.w	r0, r0, #7
 800801c:	1ac2      	subs	r2, r0, r3
 800801e:	bf1c      	itt	ne
 8008020:	1a1b      	subne	r3, r3, r0
 8008022:	50a3      	strne	r3, [r4, r2]
 8008024:	e7af      	b.n	8007f86 <_malloc_r+0x22>
 8008026:	6862      	ldr	r2, [r4, #4]
 8008028:	42a3      	cmp	r3, r4
 800802a:	bf0c      	ite	eq
 800802c:	f8c8 2000 	streq.w	r2, [r8]
 8008030:	605a      	strne	r2, [r3, #4]
 8008032:	e7eb      	b.n	800800c <_malloc_r+0xa8>
 8008034:	4623      	mov	r3, r4
 8008036:	6864      	ldr	r4, [r4, #4]
 8008038:	e7ae      	b.n	8007f98 <_malloc_r+0x34>
 800803a:	463c      	mov	r4, r7
 800803c:	687f      	ldr	r7, [r7, #4]
 800803e:	e7b6      	b.n	8007fae <_malloc_r+0x4a>
 8008040:	461a      	mov	r2, r3
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	42a3      	cmp	r3, r4
 8008046:	d1fb      	bne.n	8008040 <_malloc_r+0xdc>
 8008048:	2300      	movs	r3, #0
 800804a:	6053      	str	r3, [r2, #4]
 800804c:	e7de      	b.n	800800c <_malloc_r+0xa8>
 800804e:	230c      	movs	r3, #12
 8008050:	6033      	str	r3, [r6, #0]
 8008052:	4630      	mov	r0, r6
 8008054:	f000 f80c 	bl	8008070 <__malloc_unlock>
 8008058:	e794      	b.n	8007f84 <_malloc_r+0x20>
 800805a:	6005      	str	r5, [r0, #0]
 800805c:	e7d6      	b.n	800800c <_malloc_r+0xa8>
 800805e:	bf00      	nop
 8008060:	20004510 	.word	0x20004510

08008064 <__malloc_lock>:
 8008064:	4801      	ldr	r0, [pc, #4]	@ (800806c <__malloc_lock+0x8>)
 8008066:	f7ff beda 	b.w	8007e1e <__retarget_lock_acquire_recursive>
 800806a:	bf00      	nop
 800806c:	20004508 	.word	0x20004508

08008070 <__malloc_unlock>:
 8008070:	4801      	ldr	r0, [pc, #4]	@ (8008078 <__malloc_unlock+0x8>)
 8008072:	f7ff bed5 	b.w	8007e20 <__retarget_lock_release_recursive>
 8008076:	bf00      	nop
 8008078:	20004508 	.word	0x20004508

0800807c <__sfputc_r>:
 800807c:	6893      	ldr	r3, [r2, #8]
 800807e:	3b01      	subs	r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	b410      	push	{r4}
 8008084:	6093      	str	r3, [r2, #8]
 8008086:	da08      	bge.n	800809a <__sfputc_r+0x1e>
 8008088:	6994      	ldr	r4, [r2, #24]
 800808a:	42a3      	cmp	r3, r4
 800808c:	db01      	blt.n	8008092 <__sfputc_r+0x16>
 800808e:	290a      	cmp	r1, #10
 8008090:	d103      	bne.n	800809a <__sfputc_r+0x1e>
 8008092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008096:	f000 bb7d 	b.w	8008794 <__swbuf_r>
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	1c58      	adds	r0, r3, #1
 800809e:	6010      	str	r0, [r2, #0]
 80080a0:	7019      	strb	r1, [r3, #0]
 80080a2:	4608      	mov	r0, r1
 80080a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <__sfputs_r>:
 80080aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ac:	4606      	mov	r6, r0
 80080ae:	460f      	mov	r7, r1
 80080b0:	4614      	mov	r4, r2
 80080b2:	18d5      	adds	r5, r2, r3
 80080b4:	42ac      	cmp	r4, r5
 80080b6:	d101      	bne.n	80080bc <__sfputs_r+0x12>
 80080b8:	2000      	movs	r0, #0
 80080ba:	e007      	b.n	80080cc <__sfputs_r+0x22>
 80080bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c0:	463a      	mov	r2, r7
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff ffda 	bl	800807c <__sfputc_r>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d1f3      	bne.n	80080b4 <__sfputs_r+0xa>
 80080cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080d0 <_vfiprintf_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	460d      	mov	r5, r1
 80080d6:	b09d      	sub	sp, #116	@ 0x74
 80080d8:	4614      	mov	r4, r2
 80080da:	4698      	mov	r8, r3
 80080dc:	4606      	mov	r6, r0
 80080de:	b118      	cbz	r0, 80080e8 <_vfiprintf_r+0x18>
 80080e0:	6a03      	ldr	r3, [r0, #32]
 80080e2:	b90b      	cbnz	r3, 80080e8 <_vfiprintf_r+0x18>
 80080e4:	f7ff fcdc 	bl	8007aa0 <__sinit>
 80080e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ea:	07d9      	lsls	r1, r3, #31
 80080ec:	d405      	bmi.n	80080fa <_vfiprintf_r+0x2a>
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_vfiprintf_r+0x2a>
 80080f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080f6:	f7ff fe92 	bl	8007e1e <__retarget_lock_acquire_recursive>
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	071b      	lsls	r3, r3, #28
 80080fe:	d501      	bpl.n	8008104 <_vfiprintf_r+0x34>
 8008100:	692b      	ldr	r3, [r5, #16]
 8008102:	b99b      	cbnz	r3, 800812c <_vfiprintf_r+0x5c>
 8008104:	4629      	mov	r1, r5
 8008106:	4630      	mov	r0, r6
 8008108:	f000 fb82 	bl	8008810 <__swsetup_r>
 800810c:	b170      	cbz	r0, 800812c <_vfiprintf_r+0x5c>
 800810e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008110:	07dc      	lsls	r4, r3, #31
 8008112:	d504      	bpl.n	800811e <_vfiprintf_r+0x4e>
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	b01d      	add	sp, #116	@ 0x74
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	89ab      	ldrh	r3, [r5, #12]
 8008120:	0598      	lsls	r0, r3, #22
 8008122:	d4f7      	bmi.n	8008114 <_vfiprintf_r+0x44>
 8008124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008126:	f7ff fe7b 	bl	8007e20 <__retarget_lock_release_recursive>
 800812a:	e7f3      	b.n	8008114 <_vfiprintf_r+0x44>
 800812c:	2300      	movs	r3, #0
 800812e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008130:	2320      	movs	r3, #32
 8008132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008136:	f8cd 800c 	str.w	r8, [sp, #12]
 800813a:	2330      	movs	r3, #48	@ 0x30
 800813c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082ec <_vfiprintf_r+0x21c>
 8008140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008144:	f04f 0901 	mov.w	r9, #1
 8008148:	4623      	mov	r3, r4
 800814a:	469a      	mov	sl, r3
 800814c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008150:	b10a      	cbz	r2, 8008156 <_vfiprintf_r+0x86>
 8008152:	2a25      	cmp	r2, #37	@ 0x25
 8008154:	d1f9      	bne.n	800814a <_vfiprintf_r+0x7a>
 8008156:	ebba 0b04 	subs.w	fp, sl, r4
 800815a:	d00b      	beq.n	8008174 <_vfiprintf_r+0xa4>
 800815c:	465b      	mov	r3, fp
 800815e:	4622      	mov	r2, r4
 8008160:	4629      	mov	r1, r5
 8008162:	4630      	mov	r0, r6
 8008164:	f7ff ffa1 	bl	80080aa <__sfputs_r>
 8008168:	3001      	adds	r0, #1
 800816a:	f000 80a7 	beq.w	80082bc <_vfiprintf_r+0x1ec>
 800816e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008170:	445a      	add	r2, fp
 8008172:	9209      	str	r2, [sp, #36]	@ 0x24
 8008174:	f89a 3000 	ldrb.w	r3, [sl]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 809f 	beq.w	80082bc <_vfiprintf_r+0x1ec>
 800817e:	2300      	movs	r3, #0
 8008180:	f04f 32ff 	mov.w	r2, #4294967295
 8008184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008188:	f10a 0a01 	add.w	sl, sl, #1
 800818c:	9304      	str	r3, [sp, #16]
 800818e:	9307      	str	r3, [sp, #28]
 8008190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008194:	931a      	str	r3, [sp, #104]	@ 0x68
 8008196:	4654      	mov	r4, sl
 8008198:	2205      	movs	r2, #5
 800819a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819e:	4853      	ldr	r0, [pc, #332]	@ (80082ec <_vfiprintf_r+0x21c>)
 80081a0:	f7f8 f826 	bl	80001f0 <memchr>
 80081a4:	9a04      	ldr	r2, [sp, #16]
 80081a6:	b9d8      	cbnz	r0, 80081e0 <_vfiprintf_r+0x110>
 80081a8:	06d1      	lsls	r1, r2, #27
 80081aa:	bf44      	itt	mi
 80081ac:	2320      	movmi	r3, #32
 80081ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b2:	0713      	lsls	r3, r2, #28
 80081b4:	bf44      	itt	mi
 80081b6:	232b      	movmi	r3, #43	@ 0x2b
 80081b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081bc:	f89a 3000 	ldrb.w	r3, [sl]
 80081c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081c2:	d015      	beq.n	80081f0 <_vfiprintf_r+0x120>
 80081c4:	9a07      	ldr	r2, [sp, #28]
 80081c6:	4654      	mov	r4, sl
 80081c8:	2000      	movs	r0, #0
 80081ca:	f04f 0c0a 	mov.w	ip, #10
 80081ce:	4621      	mov	r1, r4
 80081d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d4:	3b30      	subs	r3, #48	@ 0x30
 80081d6:	2b09      	cmp	r3, #9
 80081d8:	d94b      	bls.n	8008272 <_vfiprintf_r+0x1a2>
 80081da:	b1b0      	cbz	r0, 800820a <_vfiprintf_r+0x13a>
 80081dc:	9207      	str	r2, [sp, #28]
 80081de:	e014      	b.n	800820a <_vfiprintf_r+0x13a>
 80081e0:	eba0 0308 	sub.w	r3, r0, r8
 80081e4:	fa09 f303 	lsl.w	r3, r9, r3
 80081e8:	4313      	orrs	r3, r2
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	46a2      	mov	sl, r4
 80081ee:	e7d2      	b.n	8008196 <_vfiprintf_r+0xc6>
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	1d19      	adds	r1, r3, #4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	9103      	str	r1, [sp, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bfbb      	ittet	lt
 80081fc:	425b      	neglt	r3, r3
 80081fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008202:	9307      	strge	r3, [sp, #28]
 8008204:	9307      	strlt	r3, [sp, #28]
 8008206:	bfb8      	it	lt
 8008208:	9204      	strlt	r2, [sp, #16]
 800820a:	7823      	ldrb	r3, [r4, #0]
 800820c:	2b2e      	cmp	r3, #46	@ 0x2e
 800820e:	d10a      	bne.n	8008226 <_vfiprintf_r+0x156>
 8008210:	7863      	ldrb	r3, [r4, #1]
 8008212:	2b2a      	cmp	r3, #42	@ 0x2a
 8008214:	d132      	bne.n	800827c <_vfiprintf_r+0x1ac>
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	1d1a      	adds	r2, r3, #4
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	9203      	str	r2, [sp, #12]
 800821e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008222:	3402      	adds	r4, #2
 8008224:	9305      	str	r3, [sp, #20]
 8008226:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082fc <_vfiprintf_r+0x22c>
 800822a:	7821      	ldrb	r1, [r4, #0]
 800822c:	2203      	movs	r2, #3
 800822e:	4650      	mov	r0, sl
 8008230:	f7f7 ffde 	bl	80001f0 <memchr>
 8008234:	b138      	cbz	r0, 8008246 <_vfiprintf_r+0x176>
 8008236:	9b04      	ldr	r3, [sp, #16]
 8008238:	eba0 000a 	sub.w	r0, r0, sl
 800823c:	2240      	movs	r2, #64	@ 0x40
 800823e:	4082      	lsls	r2, r0
 8008240:	4313      	orrs	r3, r2
 8008242:	3401      	adds	r4, #1
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824a:	4829      	ldr	r0, [pc, #164]	@ (80082f0 <_vfiprintf_r+0x220>)
 800824c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008250:	2206      	movs	r2, #6
 8008252:	f7f7 ffcd 	bl	80001f0 <memchr>
 8008256:	2800      	cmp	r0, #0
 8008258:	d03f      	beq.n	80082da <_vfiprintf_r+0x20a>
 800825a:	4b26      	ldr	r3, [pc, #152]	@ (80082f4 <_vfiprintf_r+0x224>)
 800825c:	bb1b      	cbnz	r3, 80082a6 <_vfiprintf_r+0x1d6>
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	3307      	adds	r3, #7
 8008262:	f023 0307 	bic.w	r3, r3, #7
 8008266:	3308      	adds	r3, #8
 8008268:	9303      	str	r3, [sp, #12]
 800826a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800826c:	443b      	add	r3, r7
 800826e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008270:	e76a      	b.n	8008148 <_vfiprintf_r+0x78>
 8008272:	fb0c 3202 	mla	r2, ip, r2, r3
 8008276:	460c      	mov	r4, r1
 8008278:	2001      	movs	r0, #1
 800827a:	e7a8      	b.n	80081ce <_vfiprintf_r+0xfe>
 800827c:	2300      	movs	r3, #0
 800827e:	3401      	adds	r4, #1
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	4619      	mov	r1, r3
 8008284:	f04f 0c0a 	mov.w	ip, #10
 8008288:	4620      	mov	r0, r4
 800828a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828e:	3a30      	subs	r2, #48	@ 0x30
 8008290:	2a09      	cmp	r2, #9
 8008292:	d903      	bls.n	800829c <_vfiprintf_r+0x1cc>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0c6      	beq.n	8008226 <_vfiprintf_r+0x156>
 8008298:	9105      	str	r1, [sp, #20]
 800829a:	e7c4      	b.n	8008226 <_vfiprintf_r+0x156>
 800829c:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a0:	4604      	mov	r4, r0
 80082a2:	2301      	movs	r3, #1
 80082a4:	e7f0      	b.n	8008288 <_vfiprintf_r+0x1b8>
 80082a6:	ab03      	add	r3, sp, #12
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	462a      	mov	r2, r5
 80082ac:	4b12      	ldr	r3, [pc, #72]	@ (80082f8 <_vfiprintf_r+0x228>)
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	4630      	mov	r0, r6
 80082b2:	f3af 8000 	nop.w
 80082b6:	4607      	mov	r7, r0
 80082b8:	1c78      	adds	r0, r7, #1
 80082ba:	d1d6      	bne.n	800826a <_vfiprintf_r+0x19a>
 80082bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082be:	07d9      	lsls	r1, r3, #31
 80082c0:	d405      	bmi.n	80082ce <_vfiprintf_r+0x1fe>
 80082c2:	89ab      	ldrh	r3, [r5, #12]
 80082c4:	059a      	lsls	r2, r3, #22
 80082c6:	d402      	bmi.n	80082ce <_vfiprintf_r+0x1fe>
 80082c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ca:	f7ff fda9 	bl	8007e20 <__retarget_lock_release_recursive>
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	065b      	lsls	r3, r3, #25
 80082d2:	f53f af1f 	bmi.w	8008114 <_vfiprintf_r+0x44>
 80082d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082d8:	e71e      	b.n	8008118 <_vfiprintf_r+0x48>
 80082da:	ab03      	add	r3, sp, #12
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	462a      	mov	r2, r5
 80082e0:	4b05      	ldr	r3, [pc, #20]	@ (80082f8 <_vfiprintf_r+0x228>)
 80082e2:	a904      	add	r1, sp, #16
 80082e4:	4630      	mov	r0, r6
 80082e6:	f000 f879 	bl	80083dc <_printf_i>
 80082ea:	e7e4      	b.n	80082b6 <_vfiprintf_r+0x1e6>
 80082ec:	08008dd6 	.word	0x08008dd6
 80082f0:	08008de0 	.word	0x08008de0
 80082f4:	00000000 	.word	0x00000000
 80082f8:	080080ab 	.word	0x080080ab
 80082fc:	08008ddc 	.word	0x08008ddc

08008300 <_printf_common>:
 8008300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	4616      	mov	r6, r2
 8008306:	4698      	mov	r8, r3
 8008308:	688a      	ldr	r2, [r1, #8]
 800830a:	690b      	ldr	r3, [r1, #16]
 800830c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008310:	4293      	cmp	r3, r2
 8008312:	bfb8      	it	lt
 8008314:	4613      	movlt	r3, r2
 8008316:	6033      	str	r3, [r6, #0]
 8008318:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800831c:	4607      	mov	r7, r0
 800831e:	460c      	mov	r4, r1
 8008320:	b10a      	cbz	r2, 8008326 <_printf_common+0x26>
 8008322:	3301      	adds	r3, #1
 8008324:	6033      	str	r3, [r6, #0]
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	0699      	lsls	r1, r3, #26
 800832a:	bf42      	ittt	mi
 800832c:	6833      	ldrmi	r3, [r6, #0]
 800832e:	3302      	addmi	r3, #2
 8008330:	6033      	strmi	r3, [r6, #0]
 8008332:	6825      	ldr	r5, [r4, #0]
 8008334:	f015 0506 	ands.w	r5, r5, #6
 8008338:	d106      	bne.n	8008348 <_printf_common+0x48>
 800833a:	f104 0a19 	add.w	sl, r4, #25
 800833e:	68e3      	ldr	r3, [r4, #12]
 8008340:	6832      	ldr	r2, [r6, #0]
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	42ab      	cmp	r3, r5
 8008346:	dc26      	bgt.n	8008396 <_printf_common+0x96>
 8008348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	3b00      	subs	r3, #0
 8008350:	bf18      	it	ne
 8008352:	2301      	movne	r3, #1
 8008354:	0692      	lsls	r2, r2, #26
 8008356:	d42b      	bmi.n	80083b0 <_printf_common+0xb0>
 8008358:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800835c:	4641      	mov	r1, r8
 800835e:	4638      	mov	r0, r7
 8008360:	47c8      	blx	r9
 8008362:	3001      	adds	r0, #1
 8008364:	d01e      	beq.n	80083a4 <_printf_common+0xa4>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	6922      	ldr	r2, [r4, #16]
 800836a:	f003 0306 	and.w	r3, r3, #6
 800836e:	2b04      	cmp	r3, #4
 8008370:	bf02      	ittt	eq
 8008372:	68e5      	ldreq	r5, [r4, #12]
 8008374:	6833      	ldreq	r3, [r6, #0]
 8008376:	1aed      	subeq	r5, r5, r3
 8008378:	68a3      	ldr	r3, [r4, #8]
 800837a:	bf0c      	ite	eq
 800837c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008380:	2500      	movne	r5, #0
 8008382:	4293      	cmp	r3, r2
 8008384:	bfc4      	itt	gt
 8008386:	1a9b      	subgt	r3, r3, r2
 8008388:	18ed      	addgt	r5, r5, r3
 800838a:	2600      	movs	r6, #0
 800838c:	341a      	adds	r4, #26
 800838e:	42b5      	cmp	r5, r6
 8008390:	d11a      	bne.n	80083c8 <_printf_common+0xc8>
 8008392:	2000      	movs	r0, #0
 8008394:	e008      	b.n	80083a8 <_printf_common+0xa8>
 8008396:	2301      	movs	r3, #1
 8008398:	4652      	mov	r2, sl
 800839a:	4641      	mov	r1, r8
 800839c:	4638      	mov	r0, r7
 800839e:	47c8      	blx	r9
 80083a0:	3001      	adds	r0, #1
 80083a2:	d103      	bne.n	80083ac <_printf_common+0xac>
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ac:	3501      	adds	r5, #1
 80083ae:	e7c6      	b.n	800833e <_printf_common+0x3e>
 80083b0:	18e1      	adds	r1, r4, r3
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	2030      	movs	r0, #48	@ 0x30
 80083b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083ba:	4422      	add	r2, r4
 80083bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083c4:	3302      	adds	r3, #2
 80083c6:	e7c7      	b.n	8008358 <_printf_common+0x58>
 80083c8:	2301      	movs	r3, #1
 80083ca:	4622      	mov	r2, r4
 80083cc:	4641      	mov	r1, r8
 80083ce:	4638      	mov	r0, r7
 80083d0:	47c8      	blx	r9
 80083d2:	3001      	adds	r0, #1
 80083d4:	d0e6      	beq.n	80083a4 <_printf_common+0xa4>
 80083d6:	3601      	adds	r6, #1
 80083d8:	e7d9      	b.n	800838e <_printf_common+0x8e>
	...

080083dc <_printf_i>:
 80083dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083e0:	7e0f      	ldrb	r7, [r1, #24]
 80083e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083e4:	2f78      	cmp	r7, #120	@ 0x78
 80083e6:	4691      	mov	r9, r2
 80083e8:	4680      	mov	r8, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	469a      	mov	sl, r3
 80083ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083f2:	d807      	bhi.n	8008404 <_printf_i+0x28>
 80083f4:	2f62      	cmp	r7, #98	@ 0x62
 80083f6:	d80a      	bhi.n	800840e <_printf_i+0x32>
 80083f8:	2f00      	cmp	r7, #0
 80083fa:	f000 80d1 	beq.w	80085a0 <_printf_i+0x1c4>
 80083fe:	2f58      	cmp	r7, #88	@ 0x58
 8008400:	f000 80b8 	beq.w	8008574 <_printf_i+0x198>
 8008404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800840c:	e03a      	b.n	8008484 <_printf_i+0xa8>
 800840e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008412:	2b15      	cmp	r3, #21
 8008414:	d8f6      	bhi.n	8008404 <_printf_i+0x28>
 8008416:	a101      	add	r1, pc, #4	@ (adr r1, 800841c <_printf_i+0x40>)
 8008418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800841c:	08008475 	.word	0x08008475
 8008420:	08008489 	.word	0x08008489
 8008424:	08008405 	.word	0x08008405
 8008428:	08008405 	.word	0x08008405
 800842c:	08008405 	.word	0x08008405
 8008430:	08008405 	.word	0x08008405
 8008434:	08008489 	.word	0x08008489
 8008438:	08008405 	.word	0x08008405
 800843c:	08008405 	.word	0x08008405
 8008440:	08008405 	.word	0x08008405
 8008444:	08008405 	.word	0x08008405
 8008448:	08008587 	.word	0x08008587
 800844c:	080084b3 	.word	0x080084b3
 8008450:	08008541 	.word	0x08008541
 8008454:	08008405 	.word	0x08008405
 8008458:	08008405 	.word	0x08008405
 800845c:	080085a9 	.word	0x080085a9
 8008460:	08008405 	.word	0x08008405
 8008464:	080084b3 	.word	0x080084b3
 8008468:	08008405 	.word	0x08008405
 800846c:	08008405 	.word	0x08008405
 8008470:	08008549 	.word	0x08008549
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	1d1a      	adds	r2, r3, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6032      	str	r2, [r6, #0]
 800847c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008484:	2301      	movs	r3, #1
 8008486:	e09c      	b.n	80085c2 <_printf_i+0x1e6>
 8008488:	6833      	ldr	r3, [r6, #0]
 800848a:	6820      	ldr	r0, [r4, #0]
 800848c:	1d19      	adds	r1, r3, #4
 800848e:	6031      	str	r1, [r6, #0]
 8008490:	0606      	lsls	r6, r0, #24
 8008492:	d501      	bpl.n	8008498 <_printf_i+0xbc>
 8008494:	681d      	ldr	r5, [r3, #0]
 8008496:	e003      	b.n	80084a0 <_printf_i+0xc4>
 8008498:	0645      	lsls	r5, r0, #25
 800849a:	d5fb      	bpl.n	8008494 <_printf_i+0xb8>
 800849c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084a0:	2d00      	cmp	r5, #0
 80084a2:	da03      	bge.n	80084ac <_printf_i+0xd0>
 80084a4:	232d      	movs	r3, #45	@ 0x2d
 80084a6:	426d      	negs	r5, r5
 80084a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084ac:	4858      	ldr	r0, [pc, #352]	@ (8008610 <_printf_i+0x234>)
 80084ae:	230a      	movs	r3, #10
 80084b0:	e011      	b.n	80084d6 <_printf_i+0xfa>
 80084b2:	6821      	ldr	r1, [r4, #0]
 80084b4:	6833      	ldr	r3, [r6, #0]
 80084b6:	0608      	lsls	r0, r1, #24
 80084b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80084bc:	d402      	bmi.n	80084c4 <_printf_i+0xe8>
 80084be:	0649      	lsls	r1, r1, #25
 80084c0:	bf48      	it	mi
 80084c2:	b2ad      	uxthmi	r5, r5
 80084c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80084c6:	4852      	ldr	r0, [pc, #328]	@ (8008610 <_printf_i+0x234>)
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	bf14      	ite	ne
 80084cc:	230a      	movne	r3, #10
 80084ce:	2308      	moveq	r3, #8
 80084d0:	2100      	movs	r1, #0
 80084d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084d6:	6866      	ldr	r6, [r4, #4]
 80084d8:	60a6      	str	r6, [r4, #8]
 80084da:	2e00      	cmp	r6, #0
 80084dc:	db05      	blt.n	80084ea <_printf_i+0x10e>
 80084de:	6821      	ldr	r1, [r4, #0]
 80084e0:	432e      	orrs	r6, r5
 80084e2:	f021 0104 	bic.w	r1, r1, #4
 80084e6:	6021      	str	r1, [r4, #0]
 80084e8:	d04b      	beq.n	8008582 <_printf_i+0x1a6>
 80084ea:	4616      	mov	r6, r2
 80084ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80084f0:	fb03 5711 	mls	r7, r3, r1, r5
 80084f4:	5dc7      	ldrb	r7, [r0, r7]
 80084f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084fa:	462f      	mov	r7, r5
 80084fc:	42bb      	cmp	r3, r7
 80084fe:	460d      	mov	r5, r1
 8008500:	d9f4      	bls.n	80084ec <_printf_i+0x110>
 8008502:	2b08      	cmp	r3, #8
 8008504:	d10b      	bne.n	800851e <_printf_i+0x142>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	07df      	lsls	r7, r3, #31
 800850a:	d508      	bpl.n	800851e <_printf_i+0x142>
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	6861      	ldr	r1, [r4, #4]
 8008510:	4299      	cmp	r1, r3
 8008512:	bfde      	ittt	le
 8008514:	2330      	movle	r3, #48	@ 0x30
 8008516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800851a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800851e:	1b92      	subs	r2, r2, r6
 8008520:	6122      	str	r2, [r4, #16]
 8008522:	f8cd a000 	str.w	sl, [sp]
 8008526:	464b      	mov	r3, r9
 8008528:	aa03      	add	r2, sp, #12
 800852a:	4621      	mov	r1, r4
 800852c:	4640      	mov	r0, r8
 800852e:	f7ff fee7 	bl	8008300 <_printf_common>
 8008532:	3001      	adds	r0, #1
 8008534:	d14a      	bne.n	80085cc <_printf_i+0x1f0>
 8008536:	f04f 30ff 	mov.w	r0, #4294967295
 800853a:	b004      	add	sp, #16
 800853c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	f043 0320 	orr.w	r3, r3, #32
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	4832      	ldr	r0, [pc, #200]	@ (8008614 <_printf_i+0x238>)
 800854a:	2778      	movs	r7, #120	@ 0x78
 800854c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	6831      	ldr	r1, [r6, #0]
 8008554:	061f      	lsls	r7, r3, #24
 8008556:	f851 5b04 	ldr.w	r5, [r1], #4
 800855a:	d402      	bmi.n	8008562 <_printf_i+0x186>
 800855c:	065f      	lsls	r7, r3, #25
 800855e:	bf48      	it	mi
 8008560:	b2ad      	uxthmi	r5, r5
 8008562:	6031      	str	r1, [r6, #0]
 8008564:	07d9      	lsls	r1, r3, #31
 8008566:	bf44      	itt	mi
 8008568:	f043 0320 	orrmi.w	r3, r3, #32
 800856c:	6023      	strmi	r3, [r4, #0]
 800856e:	b11d      	cbz	r5, 8008578 <_printf_i+0x19c>
 8008570:	2310      	movs	r3, #16
 8008572:	e7ad      	b.n	80084d0 <_printf_i+0xf4>
 8008574:	4826      	ldr	r0, [pc, #152]	@ (8008610 <_printf_i+0x234>)
 8008576:	e7e9      	b.n	800854c <_printf_i+0x170>
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	f023 0320 	bic.w	r3, r3, #32
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	e7f6      	b.n	8008570 <_printf_i+0x194>
 8008582:	4616      	mov	r6, r2
 8008584:	e7bd      	b.n	8008502 <_printf_i+0x126>
 8008586:	6833      	ldr	r3, [r6, #0]
 8008588:	6825      	ldr	r5, [r4, #0]
 800858a:	6961      	ldr	r1, [r4, #20]
 800858c:	1d18      	adds	r0, r3, #4
 800858e:	6030      	str	r0, [r6, #0]
 8008590:	062e      	lsls	r6, r5, #24
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	d501      	bpl.n	800859a <_printf_i+0x1be>
 8008596:	6019      	str	r1, [r3, #0]
 8008598:	e002      	b.n	80085a0 <_printf_i+0x1c4>
 800859a:	0668      	lsls	r0, r5, #25
 800859c:	d5fb      	bpl.n	8008596 <_printf_i+0x1ba>
 800859e:	8019      	strh	r1, [r3, #0]
 80085a0:	2300      	movs	r3, #0
 80085a2:	6123      	str	r3, [r4, #16]
 80085a4:	4616      	mov	r6, r2
 80085a6:	e7bc      	b.n	8008522 <_printf_i+0x146>
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	1d1a      	adds	r2, r3, #4
 80085ac:	6032      	str	r2, [r6, #0]
 80085ae:	681e      	ldr	r6, [r3, #0]
 80085b0:	6862      	ldr	r2, [r4, #4]
 80085b2:	2100      	movs	r1, #0
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7f7 fe1b 	bl	80001f0 <memchr>
 80085ba:	b108      	cbz	r0, 80085c0 <_printf_i+0x1e4>
 80085bc:	1b80      	subs	r0, r0, r6
 80085be:	6060      	str	r0, [r4, #4]
 80085c0:	6863      	ldr	r3, [r4, #4]
 80085c2:	6123      	str	r3, [r4, #16]
 80085c4:	2300      	movs	r3, #0
 80085c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ca:	e7aa      	b.n	8008522 <_printf_i+0x146>
 80085cc:	6923      	ldr	r3, [r4, #16]
 80085ce:	4632      	mov	r2, r6
 80085d0:	4649      	mov	r1, r9
 80085d2:	4640      	mov	r0, r8
 80085d4:	47d0      	blx	sl
 80085d6:	3001      	adds	r0, #1
 80085d8:	d0ad      	beq.n	8008536 <_printf_i+0x15a>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	079b      	lsls	r3, r3, #30
 80085de:	d413      	bmi.n	8008608 <_printf_i+0x22c>
 80085e0:	68e0      	ldr	r0, [r4, #12]
 80085e2:	9b03      	ldr	r3, [sp, #12]
 80085e4:	4298      	cmp	r0, r3
 80085e6:	bfb8      	it	lt
 80085e8:	4618      	movlt	r0, r3
 80085ea:	e7a6      	b.n	800853a <_printf_i+0x15e>
 80085ec:	2301      	movs	r3, #1
 80085ee:	4632      	mov	r2, r6
 80085f0:	4649      	mov	r1, r9
 80085f2:	4640      	mov	r0, r8
 80085f4:	47d0      	blx	sl
 80085f6:	3001      	adds	r0, #1
 80085f8:	d09d      	beq.n	8008536 <_printf_i+0x15a>
 80085fa:	3501      	adds	r5, #1
 80085fc:	68e3      	ldr	r3, [r4, #12]
 80085fe:	9903      	ldr	r1, [sp, #12]
 8008600:	1a5b      	subs	r3, r3, r1
 8008602:	42ab      	cmp	r3, r5
 8008604:	dcf2      	bgt.n	80085ec <_printf_i+0x210>
 8008606:	e7eb      	b.n	80085e0 <_printf_i+0x204>
 8008608:	2500      	movs	r5, #0
 800860a:	f104 0619 	add.w	r6, r4, #25
 800860e:	e7f5      	b.n	80085fc <_printf_i+0x220>
 8008610:	08008de7 	.word	0x08008de7
 8008614:	08008df8 	.word	0x08008df8

08008618 <__sflush_r>:
 8008618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	0716      	lsls	r6, r2, #28
 8008622:	4605      	mov	r5, r0
 8008624:	460c      	mov	r4, r1
 8008626:	d454      	bmi.n	80086d2 <__sflush_r+0xba>
 8008628:	684b      	ldr	r3, [r1, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	dc02      	bgt.n	8008634 <__sflush_r+0x1c>
 800862e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	dd48      	ble.n	80086c6 <__sflush_r+0xae>
 8008634:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008636:	2e00      	cmp	r6, #0
 8008638:	d045      	beq.n	80086c6 <__sflush_r+0xae>
 800863a:	2300      	movs	r3, #0
 800863c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008640:	682f      	ldr	r7, [r5, #0]
 8008642:	6a21      	ldr	r1, [r4, #32]
 8008644:	602b      	str	r3, [r5, #0]
 8008646:	d030      	beq.n	80086aa <__sflush_r+0x92>
 8008648:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	0759      	lsls	r1, r3, #29
 800864e:	d505      	bpl.n	800865c <__sflush_r+0x44>
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	1ad2      	subs	r2, r2, r3
 8008654:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008656:	b10b      	cbz	r3, 800865c <__sflush_r+0x44>
 8008658:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800865a:	1ad2      	subs	r2, r2, r3
 800865c:	2300      	movs	r3, #0
 800865e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008660:	6a21      	ldr	r1, [r4, #32]
 8008662:	4628      	mov	r0, r5
 8008664:	47b0      	blx	r6
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	d106      	bne.n	800867a <__sflush_r+0x62>
 800866c:	6829      	ldr	r1, [r5, #0]
 800866e:	291d      	cmp	r1, #29
 8008670:	d82b      	bhi.n	80086ca <__sflush_r+0xb2>
 8008672:	4a2a      	ldr	r2, [pc, #168]	@ (800871c <__sflush_r+0x104>)
 8008674:	40ca      	lsrs	r2, r1
 8008676:	07d6      	lsls	r6, r2, #31
 8008678:	d527      	bpl.n	80086ca <__sflush_r+0xb2>
 800867a:	2200      	movs	r2, #0
 800867c:	6062      	str	r2, [r4, #4]
 800867e:	04d9      	lsls	r1, r3, #19
 8008680:	6922      	ldr	r2, [r4, #16]
 8008682:	6022      	str	r2, [r4, #0]
 8008684:	d504      	bpl.n	8008690 <__sflush_r+0x78>
 8008686:	1c42      	adds	r2, r0, #1
 8008688:	d101      	bne.n	800868e <__sflush_r+0x76>
 800868a:	682b      	ldr	r3, [r5, #0]
 800868c:	b903      	cbnz	r3, 8008690 <__sflush_r+0x78>
 800868e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008692:	602f      	str	r7, [r5, #0]
 8008694:	b1b9      	cbz	r1, 80086c6 <__sflush_r+0xae>
 8008696:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800869a:	4299      	cmp	r1, r3
 800869c:	d002      	beq.n	80086a4 <__sflush_r+0x8c>
 800869e:	4628      	mov	r0, r5
 80086a0:	f7ff fbec 	bl	8007e7c <_free_r>
 80086a4:	2300      	movs	r3, #0
 80086a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80086a8:	e00d      	b.n	80086c6 <__sflush_r+0xae>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b0      	blx	r6
 80086b0:	4602      	mov	r2, r0
 80086b2:	1c50      	adds	r0, r2, #1
 80086b4:	d1c9      	bne.n	800864a <__sflush_r+0x32>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0c6      	beq.n	800864a <__sflush_r+0x32>
 80086bc:	2b1d      	cmp	r3, #29
 80086be:	d001      	beq.n	80086c4 <__sflush_r+0xac>
 80086c0:	2b16      	cmp	r3, #22
 80086c2:	d11e      	bne.n	8008702 <__sflush_r+0xea>
 80086c4:	602f      	str	r7, [r5, #0]
 80086c6:	2000      	movs	r0, #0
 80086c8:	e022      	b.n	8008710 <__sflush_r+0xf8>
 80086ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ce:	b21b      	sxth	r3, r3
 80086d0:	e01b      	b.n	800870a <__sflush_r+0xf2>
 80086d2:	690f      	ldr	r7, [r1, #16]
 80086d4:	2f00      	cmp	r7, #0
 80086d6:	d0f6      	beq.n	80086c6 <__sflush_r+0xae>
 80086d8:	0793      	lsls	r3, r2, #30
 80086da:	680e      	ldr	r6, [r1, #0]
 80086dc:	bf08      	it	eq
 80086de:	694b      	ldreq	r3, [r1, #20]
 80086e0:	600f      	str	r7, [r1, #0]
 80086e2:	bf18      	it	ne
 80086e4:	2300      	movne	r3, #0
 80086e6:	eba6 0807 	sub.w	r8, r6, r7
 80086ea:	608b      	str	r3, [r1, #8]
 80086ec:	f1b8 0f00 	cmp.w	r8, #0
 80086f0:	dde9      	ble.n	80086c6 <__sflush_r+0xae>
 80086f2:	6a21      	ldr	r1, [r4, #32]
 80086f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086f6:	4643      	mov	r3, r8
 80086f8:	463a      	mov	r2, r7
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b0      	blx	r6
 80086fe:	2800      	cmp	r0, #0
 8008700:	dc08      	bgt.n	8008714 <__sflush_r+0xfc>
 8008702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870a:	81a3      	strh	r3, [r4, #12]
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008714:	4407      	add	r7, r0
 8008716:	eba8 0800 	sub.w	r8, r8, r0
 800871a:	e7e7      	b.n	80086ec <__sflush_r+0xd4>
 800871c:	20400001 	.word	0x20400001

08008720 <_fflush_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	690b      	ldr	r3, [r1, #16]
 8008724:	4605      	mov	r5, r0
 8008726:	460c      	mov	r4, r1
 8008728:	b913      	cbnz	r3, 8008730 <_fflush_r+0x10>
 800872a:	2500      	movs	r5, #0
 800872c:	4628      	mov	r0, r5
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	b118      	cbz	r0, 800873a <_fflush_r+0x1a>
 8008732:	6a03      	ldr	r3, [r0, #32]
 8008734:	b90b      	cbnz	r3, 800873a <_fflush_r+0x1a>
 8008736:	f7ff f9b3 	bl	8007aa0 <__sinit>
 800873a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f3      	beq.n	800872a <_fflush_r+0xa>
 8008742:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008744:	07d0      	lsls	r0, r2, #31
 8008746:	d404      	bmi.n	8008752 <_fflush_r+0x32>
 8008748:	0599      	lsls	r1, r3, #22
 800874a:	d402      	bmi.n	8008752 <_fflush_r+0x32>
 800874c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800874e:	f7ff fb66 	bl	8007e1e <__retarget_lock_acquire_recursive>
 8008752:	4628      	mov	r0, r5
 8008754:	4621      	mov	r1, r4
 8008756:	f7ff ff5f 	bl	8008618 <__sflush_r>
 800875a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800875c:	07da      	lsls	r2, r3, #31
 800875e:	4605      	mov	r5, r0
 8008760:	d4e4      	bmi.n	800872c <_fflush_r+0xc>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	059b      	lsls	r3, r3, #22
 8008766:	d4e1      	bmi.n	800872c <_fflush_r+0xc>
 8008768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800876a:	f7ff fb59 	bl	8007e20 <__retarget_lock_release_recursive>
 800876e:	e7dd      	b.n	800872c <_fflush_r+0xc>

08008770 <fiprintf>:
 8008770:	b40e      	push	{r1, r2, r3}
 8008772:	b503      	push	{r0, r1, lr}
 8008774:	4601      	mov	r1, r0
 8008776:	ab03      	add	r3, sp, #12
 8008778:	4805      	ldr	r0, [pc, #20]	@ (8008790 <fiprintf+0x20>)
 800877a:	f853 2b04 	ldr.w	r2, [r3], #4
 800877e:	6800      	ldr	r0, [r0, #0]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	f7ff fca5 	bl	80080d0 <_vfiprintf_r>
 8008786:	b002      	add	sp, #8
 8008788:	f85d eb04 	ldr.w	lr, [sp], #4
 800878c:	b003      	add	sp, #12
 800878e:	4770      	bx	lr
 8008790:	2000001c 	.word	0x2000001c

08008794 <__swbuf_r>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	460e      	mov	r6, r1
 8008798:	4614      	mov	r4, r2
 800879a:	4605      	mov	r5, r0
 800879c:	b118      	cbz	r0, 80087a6 <__swbuf_r+0x12>
 800879e:	6a03      	ldr	r3, [r0, #32]
 80087a0:	b90b      	cbnz	r3, 80087a6 <__swbuf_r+0x12>
 80087a2:	f7ff f97d 	bl	8007aa0 <__sinit>
 80087a6:	69a3      	ldr	r3, [r4, #24]
 80087a8:	60a3      	str	r3, [r4, #8]
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	071a      	lsls	r2, r3, #28
 80087ae:	d501      	bpl.n	80087b4 <__swbuf_r+0x20>
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	b943      	cbnz	r3, 80087c6 <__swbuf_r+0x32>
 80087b4:	4621      	mov	r1, r4
 80087b6:	4628      	mov	r0, r5
 80087b8:	f000 f82a 	bl	8008810 <__swsetup_r>
 80087bc:	b118      	cbz	r0, 80087c6 <__swbuf_r+0x32>
 80087be:	f04f 37ff 	mov.w	r7, #4294967295
 80087c2:	4638      	mov	r0, r7
 80087c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	6922      	ldr	r2, [r4, #16]
 80087ca:	1a98      	subs	r0, r3, r2
 80087cc:	6963      	ldr	r3, [r4, #20]
 80087ce:	b2f6      	uxtb	r6, r6
 80087d0:	4283      	cmp	r3, r0
 80087d2:	4637      	mov	r7, r6
 80087d4:	dc05      	bgt.n	80087e2 <__swbuf_r+0x4e>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f7ff ffa1 	bl	8008720 <_fflush_r>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d1ed      	bne.n	80087be <__swbuf_r+0x2a>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	701e      	strb	r6, [r3, #0]
 80087f0:	6962      	ldr	r2, [r4, #20]
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d004      	beq.n	8008802 <__swbuf_r+0x6e>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	07db      	lsls	r3, r3, #31
 80087fc:	d5e1      	bpl.n	80087c2 <__swbuf_r+0x2e>
 80087fe:	2e0a      	cmp	r6, #10
 8008800:	d1df      	bne.n	80087c2 <__swbuf_r+0x2e>
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f7ff ff8b 	bl	8008720 <_fflush_r>
 800880a:	2800      	cmp	r0, #0
 800880c:	d0d9      	beq.n	80087c2 <__swbuf_r+0x2e>
 800880e:	e7d6      	b.n	80087be <__swbuf_r+0x2a>

08008810 <__swsetup_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4b29      	ldr	r3, [pc, #164]	@ (80088b8 <__swsetup_r+0xa8>)
 8008814:	4605      	mov	r5, r0
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	460c      	mov	r4, r1
 800881a:	b118      	cbz	r0, 8008824 <__swsetup_r+0x14>
 800881c:	6a03      	ldr	r3, [r0, #32]
 800881e:	b90b      	cbnz	r3, 8008824 <__swsetup_r+0x14>
 8008820:	f7ff f93e 	bl	8007aa0 <__sinit>
 8008824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008828:	0719      	lsls	r1, r3, #28
 800882a:	d422      	bmi.n	8008872 <__swsetup_r+0x62>
 800882c:	06da      	lsls	r2, r3, #27
 800882e:	d407      	bmi.n	8008840 <__swsetup_r+0x30>
 8008830:	2209      	movs	r2, #9
 8008832:	602a      	str	r2, [r5, #0]
 8008834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	e033      	b.n	80088a8 <__swsetup_r+0x98>
 8008840:	0758      	lsls	r0, r3, #29
 8008842:	d512      	bpl.n	800886a <__swsetup_r+0x5a>
 8008844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008846:	b141      	cbz	r1, 800885a <__swsetup_r+0x4a>
 8008848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800884c:	4299      	cmp	r1, r3
 800884e:	d002      	beq.n	8008856 <__swsetup_r+0x46>
 8008850:	4628      	mov	r0, r5
 8008852:	f7ff fb13 	bl	8007e7c <_free_r>
 8008856:	2300      	movs	r3, #0
 8008858:	6363      	str	r3, [r4, #52]	@ 0x34
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	2300      	movs	r3, #0
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f043 0308 	orr.w	r3, r3, #8
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	b94b      	cbnz	r3, 800888a <__swsetup_r+0x7a>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800887c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008880:	d003      	beq.n	800888a <__swsetup_r+0x7a>
 8008882:	4621      	mov	r1, r4
 8008884:	4628      	mov	r0, r5
 8008886:	f000 f856 	bl	8008936 <__smakebuf_r>
 800888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888e:	f013 0201 	ands.w	r2, r3, #1
 8008892:	d00a      	beq.n	80088aa <__swsetup_r+0x9a>
 8008894:	2200      	movs	r2, #0
 8008896:	60a2      	str	r2, [r4, #8]
 8008898:	6962      	ldr	r2, [r4, #20]
 800889a:	4252      	negs	r2, r2
 800889c:	61a2      	str	r2, [r4, #24]
 800889e:	6922      	ldr	r2, [r4, #16]
 80088a0:	b942      	cbnz	r2, 80088b4 <__swsetup_r+0xa4>
 80088a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088a6:	d1c5      	bne.n	8008834 <__swsetup_r+0x24>
 80088a8:	bd38      	pop	{r3, r4, r5, pc}
 80088aa:	0799      	lsls	r1, r3, #30
 80088ac:	bf58      	it	pl
 80088ae:	6962      	ldrpl	r2, [r4, #20]
 80088b0:	60a2      	str	r2, [r4, #8]
 80088b2:	e7f4      	b.n	800889e <__swsetup_r+0x8e>
 80088b4:	2000      	movs	r0, #0
 80088b6:	e7f7      	b.n	80088a8 <__swsetup_r+0x98>
 80088b8:	2000001c 	.word	0x2000001c

080088bc <_sbrk_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d06      	ldr	r5, [pc, #24]	@ (80088d8 <_sbrk_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7f8 ff52 	bl	8001770 <_sbrk>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_sbrk_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_sbrk_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20004504 	.word	0x20004504

080088dc <abort>:
 80088dc:	b508      	push	{r3, lr}
 80088de:	2006      	movs	r0, #6
 80088e0:	f000 f88e 	bl	8008a00 <raise>
 80088e4:	2001      	movs	r0, #1
 80088e6:	f7f8 fecb 	bl	8001680 <_exit>

080088ea <__swhatbuf_r>:
 80088ea:	b570      	push	{r4, r5, r6, lr}
 80088ec:	460c      	mov	r4, r1
 80088ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f2:	2900      	cmp	r1, #0
 80088f4:	b096      	sub	sp, #88	@ 0x58
 80088f6:	4615      	mov	r5, r2
 80088f8:	461e      	mov	r6, r3
 80088fa:	da0d      	bge.n	8008918 <__swhatbuf_r+0x2e>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008902:	f04f 0100 	mov.w	r1, #0
 8008906:	bf14      	ite	ne
 8008908:	2340      	movne	r3, #64	@ 0x40
 800890a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800890e:	2000      	movs	r0, #0
 8008910:	6031      	str	r1, [r6, #0]
 8008912:	602b      	str	r3, [r5, #0]
 8008914:	b016      	add	sp, #88	@ 0x58
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	466a      	mov	r2, sp
 800891a:	f000 f879 	bl	8008a10 <_fstat_r>
 800891e:	2800      	cmp	r0, #0
 8008920:	dbec      	blt.n	80088fc <__swhatbuf_r+0x12>
 8008922:	9901      	ldr	r1, [sp, #4]
 8008924:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008928:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800892c:	4259      	negs	r1, r3
 800892e:	4159      	adcs	r1, r3
 8008930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008934:	e7eb      	b.n	800890e <__swhatbuf_r+0x24>

08008936 <__smakebuf_r>:
 8008936:	898b      	ldrh	r3, [r1, #12]
 8008938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800893a:	079d      	lsls	r5, r3, #30
 800893c:	4606      	mov	r6, r0
 800893e:	460c      	mov	r4, r1
 8008940:	d507      	bpl.n	8008952 <__smakebuf_r+0x1c>
 8008942:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	2301      	movs	r3, #1
 800894c:	6163      	str	r3, [r4, #20]
 800894e:	b003      	add	sp, #12
 8008950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008952:	ab01      	add	r3, sp, #4
 8008954:	466a      	mov	r2, sp
 8008956:	f7ff ffc8 	bl	80088ea <__swhatbuf_r>
 800895a:	9f00      	ldr	r7, [sp, #0]
 800895c:	4605      	mov	r5, r0
 800895e:	4639      	mov	r1, r7
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff faff 	bl	8007f64 <_malloc_r>
 8008966:	b948      	cbnz	r0, 800897c <__smakebuf_r+0x46>
 8008968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800896c:	059a      	lsls	r2, r3, #22
 800896e:	d4ee      	bmi.n	800894e <__smakebuf_r+0x18>
 8008970:	f023 0303 	bic.w	r3, r3, #3
 8008974:	f043 0302 	orr.w	r3, r3, #2
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	e7e2      	b.n	8008942 <__smakebuf_r+0xc>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	6020      	str	r0, [r4, #0]
 8008980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800898c:	b15b      	cbz	r3, 80089a6 <__smakebuf_r+0x70>
 800898e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008992:	4630      	mov	r0, r6
 8008994:	f000 f84e 	bl	8008a34 <_isatty_r>
 8008998:	b128      	cbz	r0, 80089a6 <__smakebuf_r+0x70>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	f023 0303 	bic.w	r3, r3, #3
 80089a0:	f043 0301 	orr.w	r3, r3, #1
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	89a3      	ldrh	r3, [r4, #12]
 80089a8:	431d      	orrs	r5, r3
 80089aa:	81a5      	strh	r5, [r4, #12]
 80089ac:	e7cf      	b.n	800894e <__smakebuf_r+0x18>

080089ae <_raise_r>:
 80089ae:	291f      	cmp	r1, #31
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4605      	mov	r5, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	d904      	bls.n	80089c2 <_raise_r+0x14>
 80089b8:	2316      	movs	r3, #22
 80089ba:	6003      	str	r3, [r0, #0]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	bd38      	pop	{r3, r4, r5, pc}
 80089c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80089c4:	b112      	cbz	r2, 80089cc <_raise_r+0x1e>
 80089c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089ca:	b94b      	cbnz	r3, 80089e0 <_raise_r+0x32>
 80089cc:	4628      	mov	r0, r5
 80089ce:	f000 f853 	bl	8008a78 <_getpid_r>
 80089d2:	4622      	mov	r2, r4
 80089d4:	4601      	mov	r1, r0
 80089d6:	4628      	mov	r0, r5
 80089d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089dc:	f000 b83a 	b.w	8008a54 <_kill_r>
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d00a      	beq.n	80089fa <_raise_r+0x4c>
 80089e4:	1c59      	adds	r1, r3, #1
 80089e6:	d103      	bne.n	80089f0 <_raise_r+0x42>
 80089e8:	2316      	movs	r3, #22
 80089ea:	6003      	str	r3, [r0, #0]
 80089ec:	2001      	movs	r0, #1
 80089ee:	e7e7      	b.n	80089c0 <_raise_r+0x12>
 80089f0:	2100      	movs	r1, #0
 80089f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80089f6:	4620      	mov	r0, r4
 80089f8:	4798      	blx	r3
 80089fa:	2000      	movs	r0, #0
 80089fc:	e7e0      	b.n	80089c0 <_raise_r+0x12>
	...

08008a00 <raise>:
 8008a00:	4b02      	ldr	r3, [pc, #8]	@ (8008a0c <raise+0xc>)
 8008a02:	4601      	mov	r1, r0
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	f7ff bfd2 	b.w	80089ae <_raise_r>
 8008a0a:	bf00      	nop
 8008a0c:	2000001c 	.word	0x2000001c

08008a10 <_fstat_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d07      	ldr	r5, [pc, #28]	@ (8008a30 <_fstat_r+0x20>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	602b      	str	r3, [r5, #0]
 8008a1e:	f7f8 fe7f 	bl	8001720 <_fstat>
 8008a22:	1c43      	adds	r3, r0, #1
 8008a24:	d102      	bne.n	8008a2c <_fstat_r+0x1c>
 8008a26:	682b      	ldr	r3, [r5, #0]
 8008a28:	b103      	cbz	r3, 8008a2c <_fstat_r+0x1c>
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	bf00      	nop
 8008a30:	20004504 	.word	0x20004504

08008a34 <_isatty_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d06      	ldr	r5, [pc, #24]	@ (8008a50 <_isatty_r+0x1c>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	f7f8 fe7e 	bl	8001740 <_isatty>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_isatty_r+0x1a>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_isatty_r+0x1a>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20004504 	.word	0x20004504

08008a54 <_kill_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d07      	ldr	r5, [pc, #28]	@ (8008a74 <_kill_r+0x20>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	4611      	mov	r1, r2
 8008a60:	602b      	str	r3, [r5, #0]
 8008a62:	f7f8 fdfd 	bl	8001660 <_kill>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d102      	bne.n	8008a70 <_kill_r+0x1c>
 8008a6a:	682b      	ldr	r3, [r5, #0]
 8008a6c:	b103      	cbz	r3, 8008a70 <_kill_r+0x1c>
 8008a6e:	6023      	str	r3, [r4, #0]
 8008a70:	bd38      	pop	{r3, r4, r5, pc}
 8008a72:	bf00      	nop
 8008a74:	20004504 	.word	0x20004504

08008a78 <_getpid_r>:
 8008a78:	f7f8 bdea 	b.w	8001650 <_getpid>

08008a7c <_init>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	bf00      	nop
 8008a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a82:	bc08      	pop	{r3}
 8008a84:	469e      	mov	lr, r3
 8008a86:	4770      	bx	lr

08008a88 <_fini>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr
